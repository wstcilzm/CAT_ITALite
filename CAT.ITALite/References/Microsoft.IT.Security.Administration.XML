<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.IT.Security.Administration</name>
    </assembly>
    <members>
        <member name="T:Microsoft.IT.Security.AccessAdministration.FaultHandlerBehavior">
            <summary>
            Fault Handler class for Authorization Data Service
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.FaultHandlerBehavior.HandleError(System.Exception)">
            <summary>
            Flag indicating whether to handler error
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.FaultHandlerBehavior.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
            <summary>
            Method to handle the faults
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.FaultHandlerBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Method to add binding parameters
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.FaultHandlerBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Method to apply dispatch behavior for channel
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.FaultHandlerBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Method to validate
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.AccessAdministration.FaultHandlerExtensionElement">
            <summary>
            Behavior extension class to handle faults
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.FaultHandlerExtensionElement.CreateBehavior">
            <summary>
            Override method for creating behavior
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.AccessAdministration.FaultHandlerExtensionElement.BehaviorType">
            <summary>
            Behavior type override method
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaTree">
            <summary>
            AutoRoleCriteriaTree
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaTree.#ctor">
            <summary>
            AutoRoleCriteriaTree constructor
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaTree.Level">
            <summary>
            Get or set Level
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaTree.IsNot">
            <summary>
            Get or set IsNot
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaTree.OperatorName">
            <summary>
            Get or set OperatorName
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaTree.Property">
            <summary>
            Get or set Property
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaTree.Value">
            <summary>
            Get or set Value
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaTree.StartPos">
            <summary>
            Get or set StartPos (1-based position)
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaTree.EndPos">
            <summary>
            Get or set EndPos (1-based position)
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaTree.LogicalOperator">
            <summary>
            Get or set LogicalOperator
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaTree.Conditions">
            <summary>
            Get or set Conditions
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken">
            <summary>
            AutoRoleCriteriaToken
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.AND">
            <summary>
            Logical operator
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.OR">
            <summary>
            Logical operator
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.NOT">
            <summary>
            Function
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.STARTS_WITH">
            <summary>
            Function
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.EQUAL">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.NOT_EQUAL">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.GREATER_THAN">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.GREATER_THAN_EQ">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.LESS_THAN">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.LESS_THAN_EQ">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.COMMA">
            <summary>
            Separator
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.SINGLE_QUOTE">
            <summary>
            Separator
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.LEFT_PAREN">
            <summary>
            Separator
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaToken.RIGHT_PAREN">
            <summary>
            Separator
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaPropertySource">
            <summary>
            AutoRoleCriteriaPropertySource
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaPropertySource.FIM">
            <summary>
            Property for FIM
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaPropertySource.SGSync">
            <summary>
            Property for SGSync
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaProperty">
            <summary>
            AutoRoleCriteriaProperty
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaProperty.#ctor(System.String,Microsoft.IT.Security.Core.DataEntities.AttributeDataType,Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaPropertySource)">
            <summary>
            AutoRoleCriteriaProperty constructor
            </summary>
            <param name="name"></param>
            <param name="dataType"></param>
            <param name="source"></param>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaProperty.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaProperty.DataType">
            <summary>
            DataType
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaProperty.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaParser">
            <summary>
            AutoRoleCriteriaParser for criteria validating or parsing
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaParser.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaProperty},System.UInt32,System.UInt32)">
            <summary>
            AutoRoleCriteriaParser constructor
            </summary>
            <param name="criteria">Criteria to be parsed</param>
            <param name="properties">Properties supported in the criteria</param>
            <param name="subConditionNumberLimitation">Max sub-condition number</param>
            <param name="statementNumberLimitation">Max statement number in top level condition or sub-condition</param>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaParser.IsFIMPropertyFound">
            <summary>
            Is FIM property found in criteria
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaParser.IsSGSyncPropertyFound">
            <summary>
            Is SGSync property found in criteria
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaParser.Criteria">
            <summary>
            Get Criteria
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaParser.AutoRoleCriteriaTree">
            <summary>
            Get AutoRoleCriteriaTree
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.AutoRoleCriteriaParser.AutoRoleCriteriaNormalTree">
            <summary>
            Get AutoRoleCriteriaTree
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.AutoRole.IAutoRoleService">
            <summary>
            IAutoRoleService interface defines APIs which are exposed to work with AutoRoleService data
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.IAutoRoleService.CreateAutoRoleAssignmentCriteria(Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria)">
             <summary>
             	<c>CreateAutoRoleAssignmentCriteria</c> API is used to create auto role assignment criteria.
             </summary>
            <param name="autoRoleAssignmentCriteria"> <see cref="T:Microsoft.IT.Security.AutoRole.AutoRoleAssignmentCriteria"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>CreateAutoRoleAssignmentCriteriaKey and Criteria of AutoRoleAssignmentCriteria class are required for this operation. ExclusionListToBeAdded of AutoRoleAssignmentCriteria class is optional. All other members of Role class are ignored.</para>
             </remarks>
             <example>
             <para>Use below code to create a new auto role assignment criteria.</para>
             <code>
               using (AutoRoleServiceClient client = new AutoRoleServiceClient())
               {
                   AutoRoleAssignmentCriteria autoRoleAssignmentCriteria = new AutoRoleAssignmentCriteria();
                   autoRoleAssignmentCriteria.AutoRoleAssignmentCriteriaKey = new AutoRoleAssignmentCriteriaKey();
                   autoRoleAssignmentCriteria.AutoRoleAssignmentCriteriaKey.NamedProtectionDomain = "myNPD";
                   autoRoleAssignmentCriteria.AutoRoleAssignmentCriteriaKey.RoleName = "myRole";
                   autoRoleAssignmentCriteria.Criteria = "(CostCenter = '123') and ((MailNickname = 'alias1') or (MailNickname = 'alias2'))";
            
                   client.CreateAutoRoleAssignmentCriteria(autoRoleAssignmentCriteria);
               }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.IAutoRoleService.UpdateAutoRoleAssignmentCriteria(Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria)">
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.IAutoRoleService.DeleteAutoRoleAssignmentCriteria(Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria)">
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.IAutoRoleService.GetAutoRoleAssignmentCriteria(Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria)">
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.IAutoRoleService.SearchAutoRoleUsers(Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleManager">
            <summary>
            AutoRole manager provides abstraction to accessing data for service layer
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleManager.#cctor">
            <summary>
            Create provider list and keep them in memory
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleManager.#ctor(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Set default provider to the application level default provider
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleManager.#ctor(Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleProvider,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Set default provider to the passed provider while creating manager
            </summary>
            <param name="dataProvider">dataprovider object</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleManager.SetProvider(Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleProvider)">
            <summary>
            Sets default provider to the passed provider
            </summary>
            <param name="dataProvider">dataprovider object</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleManager.GetProvider(System.String)">
            <summary>
            returns specific dataprovider
            </summary>
            <param name="provider">provider name</param>
            <returns>dataprovider object</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleManager.Create``1(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Create entity using appropriate provider
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="entities">entity collection</param>
            <param name="context">context with corelation id etc</param>
            <returns>return entities list</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleManager.Update``1(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Update entity using appropriate provider
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="entities">entity collection</param>
            <param name="context">context with corelation id etc</param>
            <returns>return entities list</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleManager.Get``1(``0,Microsoft.IT.Security.Core.CustomContext)" -->
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleManager.Delete``1(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Delete entity using appropriate provider
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="entities">entity collection</param>
            <param name="context">context with corelation id etc</param>
            <returns>return entities list</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleManager.Ping(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Ping method to check the database connectivity.
            </summary>
            <param name="context">Custom context instance.</param>
            <returns>Database name.</returns>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleManager.AutoRoleDefaultProvider">
            <summary>
            Get default dataprovider
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleManager.ProviderList">
            <summary>
            get list of all the configured dataprovider
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleProvider">
            <summary>
            Base class for AutoRole Data Providers
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleProvider.Ping(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Ping method to check the database connectivity.
            </summary>
            <param name="context">Custom context instance.</param>
            <returns>Database name.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleProvider.Create(Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Create AutoRoleAssignmentCriteria
            </summary>
            <param name="autoRoleAssignmentCriteria"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleProvider.Update(Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Update AutoRoleAssignmentCriteria
            </summary>
            <param name="autoRoleAssignmentCriteria"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleProvider.Delete(Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Delete AutoRoleAssignmentCriteria
            </summary>
            <param name="autoRoleAssignmentCriteria"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.AutoRoleProvider.Get(Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Get AutoRoleAssignmentCriteria
            </summary>
            <param name="autoRoleAssignmentCriteria"></param>
            <param name="context"></param>
            <returns>AutoRoleAssignmentCriteria</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.SqlProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initialize provider
            </summary>
            <param name="providerName">provider name</param>
            <param name="config">configurable parameters</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataProviders.SqlProvider.Ping(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Ping method to check the database connectivity.
            </summary>
            <param name="context">Custom context instance.</param>
            <returns>Database name.</returns>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.Provisioning.DataEntities.DomainValueCollection">
            <summary>
            Represents domain values
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.Provisioning.DataEntities.DomainValueCollection.DomainName">
            <summary>
            Domain name
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.Provisioning.DataEntities.DomainValueCollection.Values">
            <summary>
            Domain values
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.Provisioning.DataEntities.DomainValueCollection.Descriptions">
            <summary>
            Domain value descriptions
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningConstants.LogEventId">
            <summary>
            Provisioning service event id for logging
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningConstants.GetDomainValuesEventId">
            <summary>
            EventId for GetDomainValues API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningConstants.GetProvisioningSyncRulesEventId">
            <summary>
            EventId for GetProvisioningSyncRules API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningConstants.GetRoleProvisioningStatusEventId">
            <summary>
            EventId for GetRoleProvisioningStatus API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningConstants.GetSubjectAssignmentProvisioningStatusEventId">
            <summary>
            EventId for GetSubjectAssignmentProvisioningStatus API
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningStatusCollection">
            <summary>
            A collection of <see cref="T:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningStatus"/>.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRuleCollection">
            <summary>
            A collection of <see cref="T:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule"/>.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningManager">
            <summary>
            A class that provides abstraction to accessing data for service layer
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningManager.#cctor">
            <summary>
            Create provider list and keep them in memory
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningManager.#ctor(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Set default provider to the application level default provider
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningManager.#ctor(Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningProvider,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Set default provider to the passed provider while creating manager
            </summary>
            <param name="dataProvider">dataprovider object</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningManager.SetProvider(Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningProvider)">
            <summary>
            Sets default provider to the passed provider
            </summary>
            <param name="dataProvider">dataprovider object</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningManager.GetProvider(System.String)">
            <summary>
            returns specific dataprovider
            </summary>
            <param name="provider">provider name</param>
            <returns>dataprovider object</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningManager.GetProvisioningSyncRules(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningManager.GetRoleProvisioningStatus(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningManager.GetSubjectAssignmentProvisioningStatus(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningManager.Ping(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Ping method to check the database connectivity.
            </summary>
            <param name="context">Custom context instance.</param>
            <returns>Database name.</returns>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningManager.ProvisioningDefaultProvider">
            <summary>
            Get default dataprovider
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningManager.ProviderList">
            <summary>
            get list of all the configured dataprovider
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningProvider">
            <summary>
            Base class for Data Providers
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.ProvisioningProvider.Ping(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Ping method to check the database connectivity.
            </summary>
            <param name="context">Custom context instance.</param>
            <returns>Database name.</returns>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.Provisioning.DataProviders.SqlProvider">
            <summary>
            SqlProvider is used to perform CRUD operations on objects stored in a sql database.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.SqlProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initialize provider
            </summary>
            <param name="providerName">provider name</param>
            <param name="config">configurable parameters</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.SqlProvider.Ping(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Ping method to check the database connectivity.
            </summary>
            <param name="context">Custom context instance.</param>
            <returns>Database name.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.SqlProvider.GetRoleProvisioningStatus(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.DataProviders.SqlProvider.GetSubjectAssignmentProvisioningStatus(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.IT.Security.Administration.Provisioning.IProvisioningDataService">
            <summary>
            Provisioning Data Service interface that provides lookup data for ITAuthorize platform
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.IProvisioningDataService.GetDomainValues(System.String)">
            <summary>
                <c>GetDomainValues</c> API is used to get collection of domain values for a specific domain.
            </summary>
            <param name="domainName">Domain name such as "CompanyCode".
            </param>
            <returns>Returns collection of domain values</returns>
            <example>
            <para> Use below code to get domain values</para>
            <code>
              using (ProvisioningDataServiceClient client = new ProvisioningDataServiceClient())
              {
                  DomainValueCollection domainValues = client.GetDomainValues("CompanyCode");
              }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.Provisioning.IProvisioningDataService.GetProvisioningSyncRules(System.String,System.String,System.String)">
            <summary>
                <c>GetProvisioningSyncRules</c> API is used to get collection of provisioning sync rules for a specific environmentName, provisioningSystem and domain.
            </summary>
            <param name="environmentName">Environment name such as "DEV".</param>
            <param name="provisioningSystem">Provisioning System such as "AD".</param>
            <param name="domain">Domain such as "Redmond".</param>
            <returns>Returns collection of provisioning sync rules</returns>
            <example>
            <para> Use below code to get provisioning sync rules</para>
            <code>
              using (ProvisioningDataServiceClient client = new ProvisioningDataServiceClient())
              {
                  ProvisioningSyncRuleCollection syncRules = client.GetProvisioningSyncRules("DEV", "AD", "Redmond");
              }
            </code>
            </example>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService">
            <summary>
            RoleAdministration interface defines APIs which are exposed to work with RoleAdministration data via Admin Service Bus Relay
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService.GetConstraintValuesOfSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.DataEntities.AttributeEntity)">
             <summary>
             	<c>GetConstraintValuesOfSubject</c> API returns a list of subject constraint entries for an existing subject, where each entry contrains attributes and constraint values for given subject, role and/or permission combination.
             </summary>
             <param name="subject">Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <param name="role">The role.</param>
             <param name="permission">The permission.</param>
             <param name="attribute">The attribute.</param>
             <returns>
             SubjectConstraintEntry collection. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectConstraintEntry"/> class.
             </returns>
             <remarks>
             <para><c>Audit:</c> This API call is not audited.</para>
             <para>Specified subject should already exist in the system. Note that only those constraint template attributes will return which are either associated to role or to permission. If they are associated to permission then permisison to role and role to subject link will also be considered while returning attributes. This API returns attribute with values if they are already set earlier otherwise values will be empty.</para>
             </remarks>
             <example>
             	<para>Use below code to get subject constraint attributes</para>
             <code>
                 using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
                 {
                    Subject subject = new Subject();
                    subject.SubjectKey = new SubjectKey();
                    subject.SubjectKey.RealmName = "corp.microsoft.com";
                    subject.SubjectKey.Key = @"redmond\\alias";
                    subject.BusinessStatus = "Active";
                    subject.ContactEmail = "alias@microsoft.com";
                    subject.ContactName = "full name";
                    subject.ContactPhone = "123 456 7890";
            
                    Permission permission = new Permission();
                    permission.PermissionKey = new PermissionKey();
                    permission.PermissionKey.ResourceName = "WebPage";
                    permission.PermissionKey.Operation = "Access";
                    permission.PermissionKey.NamedProtectionDomain = "MyBusinessDomain";
            
                    Role role = new Role();
                    role.RoleKey = new RoleKey();
                    role.RoleKey.RoleName = "Owner";
                    role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                    AttributeEntity attribute = new AttributeEntity();
                    AttributeKey.Urn = "Expiration Date New" + System.Guid.NewGuid();
                    attributeKey.AttributeType = AttributeType.Subject;
                    attributeKey.NamedProtectionDomain = "MyBusinessDomain";
                    attribute.NewAttributeKey = attributeKey;
                    attribute.Scope = AttributeScopeType.WithinSameNpd;
                    attribute.DataType = AttributeDataType.DateTime;
            
                    client.GetConstraintValuesOfSubject(subject, role, permission, AttributeEntity attribute);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService.AssignConstraintValueToSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
             <summary>
             Assigns the constraint value to subject.
             </summary>
             <param name="subjectConstraintEntries">The subject constraint entries.</param>
             <param name="subject">The subject.</param>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             	<para>Use below code to get subject constraint attributes</para>
             <code>
                 using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
                 {
                     Subject subject = new Subject();
                     subject.SubjectKey = new SubjectKey();
                     subject.SubjectKey.RealmName = "corp.microsoft.com";
                     subject.SubjectKey.Key = @"redmond\\abc";
                     subject.BusinessStatus = "Active";
                     subject.ContactEmail = "abc@microsoft.com";
                     subject.ContactName = "abc";
                     subject.ContactPhone = "123 456 7890";
            
                     SubjectConstraintEntry subjectConstraintEntry = new SubjectConstraintEntry();
                     subjectConstraintEntry.NamedProtectionDomain = "MyBusinessDomain";
                     subjectConstraintEntry.RoleName = "abd";
            
                     SubjectConstraintAttributeEntry subjectConstraintValueEntry = new SubjectConstraintAttributeEntry();
                     subjectConstraintValueEntry.AttributeName = "MyAttribute";
                     subjectConstraintValueEntry.ConstraintValues = new string[1]{"MyAttributeValue"};
            
                     subjectConstraintEntry.SubjectConstraintAttributes = new SubjectConstraintAttributeEntry[] {subjectConstraintValueEntry};
            
                     SubjectConstraintEntry[] subjectConstraintEntries = new SubjectConstraintEntry[] { subjectConstraintEntry };
            
                     client.AssignConstraintValueToSubject(subjectConstraintEntries, subject);
                 }
            
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService.UnassignConstraintValueFromSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
             <summary>
             Unassigns the constraint value from subject.
             </summary>
             <param name="subjectConstraintEntries">The subject constraint entries.</param>
             <param name="subject">The subject.</param>
             <returns></returns>
              <example>
             	<para>Use below code to get subject constraint attributes</para>
             <code>
                 using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
                 {
                    Subject subject = new Subject();
                    subject.SubjectKey = new SubjectKey();
                    subject.SubjectKey.RealmName = "corp.microsoft.com";
                    subject.SubjectKey.Key = @"redmond\\abc";
                    subject.BusinessStatus = "Active";
                    subject.ContactEmail = "abc@microsoft.com";
                    subject.ContactName = "abc";
                    subject.ContactPhone = "123 456 7890";
            
                    SubjectConstraintEntry subjectConstraintEntry = new SubjectConstraintEntry();
                    subjectConstraintEntry.NamedProtectionDomain = "MyBusinessDomain";
                    subjectConstraintEntry.RoleName = "abd";
                    SubjectConstraintEntry[] subjectConstraintEntries = new SubjectConstraintEntry[]{subjectConstraintEntry};
            
                    client.UnassignConstraintValueFromSubject(subjectConstraintEntries,subject);
                 }
             </code>
             </example>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService.CreateSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject})">
             <summary>
             	<c>CreateSubject</c> API is used to create Subjects in specified AuthenticationRealm.
             </summary>
            <param name="subjects">Subject collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>SubjectKey member of Subject class is required in Create operation. NewSubjectKey object will be ignored in this operation. </para>
             </remarks>
             <example>
             <para>Use below code to create a new Subject in corp AuthenticationRealm.</para>
             <code>
                using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
                {
                    Subject subject = new Subject();
                    subject.SubjectKey = new SubjectKey();
                    subject.SubjectKey.RealmName = "corp.microsoft.com";
                    subject.SubjectKey.Key = @"redmond\\abc";
                    subject.BusinessStatus = "Active";
                    subject.ContactEmail = "abc@microsoft.com";
                    subject.ContactName = "abc";
                    subject.ContactPhone = "123 456 7890";
            
                    Subject[] subjects = new Subject[] { subject };
                    client.CreateSubject(subjects);
            
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService.UpdateSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject})">
             <summary>
             	<c>UpdateSubject</c> API is used to update existing Subjects in specified AuthenticationRealm.
             </summary>
            <param name="subjects">Subject collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>SubjectKey member of Subject is mandatory for Update operation. NewSubjectKey can be used with Update operation if you want to update Key of the Subject. Only Key can be updated using NewSubjectKey.
             	You cannot update RealmName using NewSubjectKey; if new value specified for RealmName, it will be ignored.</para>
             </remarks>
             <example>
             <para>Use below code to update Subject which already exists in AuthenticationRealm called redmond.</para>
             <code>
                using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
                {
                    Subject subject = new Subject();
                    subject.SubjectKey = new SubjectKey();
                    subject.SubjectKey.RealmName = "corp.microsoft.com";
                    subject.SubjectKey.Key = "redmond\\myalias";
                    subject.ContactName = "my full name";
            
                    Subject[] subjects = new Subject[] { subject };
                    client.UpdateSubject(subjects);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService.DeleteSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
             <summary>
             	<c>DeleteSubject</c> API is used to delete an existing Subjects in specified AuthenticationRealm.
             </summary>
            <param name="subject"> Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>Only SubjectKey object of Subject class is required for this operation. All other members of Subject class are ignored.</para>
             </remarks>
             <example>
             <para>Use below code to delete existing Subject from corp AuthenticationRealm.</para>
             <code>
               using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
               {
                   Subject subject = new Subject();
                   subject.SubjectKey = new SubjectKey();
                   subject.SubjectKey.Key = "redmond\abc";
                   subject.SubjectKey.RealmName = "corp.microsoft.com";
                   int key = client.DeleteSubject(subject);
               }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService.GetSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
             <summary>
             	<c>GetSubject</c> API is used to fetch existing Subject in specified AuthenticationRealm.
             	SubjectKey information is required to fetch Subject object.
             </summary>
             <param name="subject">Subject object only containing SubjectKey information. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectKey"/> class.</param>
             <returns>Subject object populated with SubjectKey, ContactName, ContactPhone and ContactEmail members etc. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             	<para>Only SubjectKey object of Subject class is used for this operation. All other members of Subject class are ignored.
             	All details of Subject object will be populated except NewSubjectKey object.</para>
             </remarks>
             <example>
             <para>Use below code to get existing Subject in AuthenticationRealm called redmond.</para>
             <code>
                 using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
                 {
                     Subject subject = new Subject();
                     subject.SubjectKey = new SubjectKey();
                     subject.SubjectKey.Key = "redmond\\abc";
                     subject.SubjectKey.RealmName = "corp.microsoft.com";
            
                     subject = client.GetSubject(subject);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService.SearchSubjects(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
             <summary>
             	<c>SearchSubjects</c> API is used to search Subjects as per specified search criteria.
             </summary>
             <param name="criteria">Search criteria object. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectSearchCriteria"/> class.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <returns>Returns SearchResult&lt;Subject&gt; matching specified search criteria Details of <see cref="T:Microsoft.IT.Security.Common.SearchResult"/> class.</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para>SearchSearchCriteria is optional parameter to pass.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
                 <para>Page Size must be between 1 and 1000.</para>
                 <para>When using RoleName and/or NamedProtectionDomainName criteria, this API doesn't return results if the subject's assignment to a role has expired. 
                 For more information see bug # 488165</para>
             </remarks>
             <example>
             <para>Use below code to search Subjects in corp AuthenticationRealm.</para>
             <code>
              using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
              {
                  SubjectSearchCriteria criteria = new SubjectSearchCriteria();
                  criteria.RealmName = "redmond";
                  Page page = new Page { Number = 1, Size = 10 };
                  SearchResultOfSubject searchResult = client.SearchSubjects(criteria, page);
              }
             </code>
             <para>
             Use below code to search all users assigned to the admin role in corp authentical realm.
             </para>
             <code>
              using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
              {
                  SubjectSearchCriteria criteria = new SubjectSearchCriteria();
                  criteria.RoleName = "Admin";
                  Page page = new Page { Number = 1, Size = 100 };
                  SearchResultOfSubject searchResult = client.SearchSubjects(criteria, page);
                  //Get total matching count
                  int matchingCount = searchResult.Total;
            
                  //Get all subjects that matched search criteria
                  Subject[] matchingResults = searchResult.Results;
              }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService.AssignSubjectToRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
             <summary>
             <c>AssignSubjectToRole</c> API is used to assign subjects to role and hence all subjects get permissions associated with role.
             If the subject has already assigned with the role, it will be  overwritten with new assigning info.
             </summary>
             <param name="subjects">Subject collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <param name="role">Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>All specified subjects and role should exist in the system before you can perform assignment operation.</para>
             </remarks>
             <example>
             <para>Use below code to assign subjects to role.</para>
             <code>
                 using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
                 {
                     //Create Subject object 1 with SubjectKey object
                     Subject subject1 = new Subject();
                     subject1.SubjectKey = new SubjectKey();
                     subject1.SubjectKey.RealmName = "corp.microsoft.com";
                     subject1.SubjectKey.Key = @"redmond\abc1";
                     
                     //Create Subject object 2 with SubjectKey object
                     Subject subject2 = new Subject();
                     subject2.SubjectKey = new SubjectKey();
                     subject2.SubjectKey.RealmName = "corp.microsoft.com";
                     subject2.SubjectKey.Key = @"redmond\abc2";
            
                     //Create Role object with RoleKey object
                     Role role = new Role();
                     role.RoleKey = new RoleKey();
                     role.RoleKey.RoleName = "Owner";
                     role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                     //Assign Subjects To Role
                     client.AssignSubjectToRole(new Subject[] { subject1, subject2 }, role);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService.AssignRoleToSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
             <summary>
             <c>AssignRoleToSubject</c> API is used to assign roles to subject and hence subject gets permissions associated with all roles.
             </summary>
             <param name="roles">Roles collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <param name="subject">Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <remarks>
                 <para> <c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>All specified roles and subject should exist in the system before you can perform assignment operation.</para>
             </remarks>
             <example>
             <para>Use below code to assign subjects to owner and admin roles.</para>
             <code>
              using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
              {
                  //Create Role object with RoleKey object
                  Role role = new Role();
                  role.RoleKey = new RoleKey();
                  role.RoleKey.RoleName = "Owner";
                  role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                  Role role2 = new Role();
                  role2.RoleKey = new RoleKey();
                  role2.RoleKey.RoleName = "Admin";
                  role2.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                  //Create Subject object with SubjectKey object
                  Subject subject = new Subject();
                  subject.SubjectKey = new SubjectKey();
                  subject.SubjectKey.RealmName = "corp.microsoft.com";
                  subject.SubjectKey.Key = @"redmond\abc";
                  //Assign Roles To Subject
                  client.AssignRoleToSubject(new Role[] { role }, subject);
              }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService.UnassignSubjectFromRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
             <summary>
             <c>UnassignSubjectFromRole</c> API is used to unassign subjects from role and hence permissions associated with role are revoked from subjects.
             </summary>
             <param name="subjects">Subject collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <param name="role">Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <remarks>
                 <para> <c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>All specified subjects and role should exist in the system before you can perform unassignment operation.</para>
             </remarks>
             <example>
             <para>Use below code to unassign subjects from role.</para>
             <code>
                 using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
                 {
                     //Create Subject object 1 with SubjectKey object
                     Subject subject1 = new Subject();
                     subject1.SubjectKey = new SubjectKey();
                     subject1.SubjectKey.RealmName = "corp.microsoft.com";
                     subject1.SubjectKey.Key = @"redmond\abc1";
                     
                     //Create Subject object 2 with SubjectKey object
                     Subject subject2 = new Subject();
                     subject2.SubjectKey = new SubjectKey();
                     subject2.SubjectKey.RealmName = "corp.microsoft.com";
                     subject2.SubjectKey.Key = @"redmond\abc2";
            
                     //Create Role object with RoleKey object
                     Role role = new Role();
                     role.RoleKey = new RoleKey();
                     role.RoleKey.RoleName = "Owner";
                     role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                     //Unassign Subjects from Role
                     client.UnassignSubjectFromRole(new Subject[] { subject1, subject2 }, role);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService.UnassignRoleFromSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
             <summary>
             <c>UnassignRoleFromSubject</c> API is used to unassign roles from subject and hence all permissions associated with all roles are revoked from subject.
             </summary>
             <param name="roles">Roles collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <param name="subject">Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <returns></returns>
             <remarks>
                 <para> <c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>All specified roles and subject should exist in the system and roles should already be assigned to subject before you can perform unassignment operation.</para>
             </remarks>
             <example>
             <para>Use below code to assign subjects to role.</para>
             <code>
                 using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
                 {
                     //Create Role object with RoleKey object
                     Role role = new Role();
                     role.RoleKey = new RoleKey();
                     role.RoleKey.RoleName = "Owner";
                     role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                     //Create Subject object with SubjectKey object
                     Subject subject = new Subject();
                     subject.SubjectKey = new SubjectKey();
                     subject.SubjectKey.RealmName = "corp.microsoft.com";
                     subject.SubjectKey.Key = @"redmond\abc";
                     //Unassign Roles from Subject
                     client.UnassignRoleFromSubject(new Role[] { role }, subject);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationRelayService.SearchSubjectToRoleAssignments(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,System.String)">
             <summary>
             	<c>SearchSubjectToRoleAssignments</c> API is used to search SubjectsToRoleAssignments as per specified search criteria.
             </summary>
             <param name="criteria">Search criteria object. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectToRoleAssignmentSearchCriteria"/> class.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <param name="NamedProtectionDomainName"> The Named protection domain name</param>
             <returns>Returns SearchResult&lt;SubjectAssignment&gt; matching specified search criteria Details of <see cref="T:Microsoft.IT.Security.Common.SearchResult"/> class.</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para>SearchSearchCriteria is optional parameter to pass.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
                 <para>Page Size must be between 1 and 1000.</para>
             </remarks>
             <example>
             <para>Use below code to search SubjectAssignments in corp AuthenticationRealm .</para>
             <code>
              using (RoleAdministrationRelayServiceClient client = new RoleAdministrationRelayServiceClient())
              {
                  SubjectToRoleAssignmentSearchCriteria criteria = new SubjectToRoleAssignmentSearchCriteria();
                  criteria.RoleName = "admin";
                  criteria.RealmName = "corp.microsoft.com";
            
                  Page page = new Page { Number = 1, Size = 100 };
                  SearchResultOfSubjectAssignment searchResult = client.SearchSubjectToRoleAssignments(criteria, page, "MyBusinessDomain");
            
                  //Get total matching count
                  int matchingCount = searchResult.Total;
            
                  //Get all assignments that matched search criteria
                  SubjectAssignment[] matchingResults = searchResult.Results;
              }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthorizationDataEntityBase">
            <summary>
            Base entity class for the criterias used for AuthZ APIs
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthorizationDataEntityBase.ExtractObjectInformation">
            <summary>
            Extract the object information required the authorization.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthorizationDataEntityBase.NamedProtectionDomain">
            <summary>
            Named protection domain
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthorizationDataEntityBase.RoleName">
            <summary>
            Role name
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthorizationDataEntityBase.RoleTag">
            <summary>
            Role tag
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule">
            <summary>
            Provisioning sync rule defines how the role needs to be provisioned in
            external systems such as active directory, MSCRM, SAP, Sharepoint etc.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule.ProvisioningSyncRuleKey">
            <summary>
            Gets or sets ProvisioningSyncRuleKey <see cref="P:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule.ProvisioningSyncRuleKey"/> which uniquely identifies sync rule in the system.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule.SystemDestination">
            <summary>
            Gets or sets system destination, e.g., active directory, MSCRM, SAP, Sharepoint etc.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule.Domain">
            <summary>
            Gets or sets domain name, e.g., corp, parttest, partners.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule.Description">
            <summary>
            Gets or sets description.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule.TargetLocation">
            <summary>
            Gets or sets target location, e.g., OU information in case of AD.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule.ExtendedProperty">
            <summary>
            Gets or sets extended property of sync rule.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRuleKey">
            <summary>
            ProvisioningSyncRuleKey is used to uniquely identify sync rule for provisioning in to external systems such as active directory, MSCRM, SAP etc.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRuleKey.SyncRuleId">
            <summary>
            Gets or sets SyncRuleId as defined in FIM system.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRuleKey.DestinationMappingName">
            <summary>
            Gets or sets mapping name corresponding to the role name in external destination system.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectImmutableKey">
            <summary>
            SubjectImmutableKey is to uniquely identify Subject in system by immutableId. Only used for automated systems
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectImmutableKey.ExtractObjectScope(System.String)">
            <summary>
            ExtractObjectScope to extract scope of business object
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectImmutableKey.AuthenticationRealmName">
            <summary>
            Gets and Sets authentication realm name with in the system.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectImmutableKey.ImmutableId">
            <summary>
            Gets and sets immutable Id of the subject.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionRoleConstraintCriteria">
            <summary>
            PermissionRoleConstraintCriteria is used as input parameter for API SearchSubjectsByPermissionAndRoleConstraints
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionRoleConstraintCriteria.ResourceName">
            <summary>
            Resource name
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionRoleConstraintCriteria.ResourceOperation">
            <summary>
            Resource operation
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionRoleConstraintCriteria.AttributeName">
            <summary>
            Attribute name
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionRoleConstraintCriteria.SubjectConstraintValue">
            <summary>
            Subject constraint value
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionRoleConstraintCriteria.ExternalIdentifier">
            <summary>
            ExternalIdentifier
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectPermissionCriteria">
            <summary>
            SubjectPermissionCriteria is used as input parameter of some of the AuthZ APIs
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectPermissionCriteria.ResourceName">
            <summary>
            Resource name
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectPermissionCriteria.ResourceOperation">
            <summary>
            Resource operation
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectPermissionCriteria.SubjectKey">
            <summary>
            SubjectKey
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectPermissionCriteria.AuthenticationRealmName">
            <summary>
            Authentication realm name
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectPermissionCriteria.ExternalIdentifier">
            <summary>
            ExternalIdentifier
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectCriteria">
            <summary>
            SubjectCriteria is used as input parameter of some of the AuthZ APIs
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectCriteria.SubjectKey">
            <summary>
            SubjectKey
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectCriteria.AuthenticationRealmName">
            <summary>
            Authentication realm name
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleCriteriaNormalTree">
            <summary>
            AutoRoleCriteriaNormalTree is used for criteria validation and criteria display in UI
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleCriteriaNormalTree.#ctor">
            <summary>
            AutoRoleCriteriaNormalTree constructor
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleCriteriaNormalTree.OperatorName">
            <summary>
            Get or set OperatorName
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleCriteriaNormalTree.Property">
            <summary>
            Get or set Property
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleCriteriaNormalTree.Value">
            <summary>
            Get or set Value
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleCriteriaNormalTree.LogicalOperator">
            <summary>
            Get or set LogicalOperator
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleCriteriaNormalTree.Conditions">
            <summary>
            Get or set Conditions
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteriaKey">
            <summary>
            AutoRoleAssignmentCriteriaKey is used to uniquely identify AutoRoleAssignmentCriteria in system. Values presented by object of this class should always be unique for AutoRoleAssignmentCriteriaKey in the system.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteriaKey.namedProtectionDomain">
            <summary>
            NamedProtectionDomain of an Auto Role to which AutoRoleAssignmentCriteria belong.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteriaKey.roleName">
            <summary>
            Name of an Auto Role to which AutoRoleAssignmentCriteria belong.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteriaKey.NamedProtectionDomain">
            <summary>
            NameProtectionDomain name that defines scope of an Auto Role.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteriaKey.RoleName">
            <summary>
            Unique Auto Role name within specified NamedProtectionDomain.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria">
            <summary>
            Represents AutoRoleAssignmentCriteria information.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria.ExtractObjectScope(System.String)">
            <summary>
            ExtractObjectScope
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria.Validate(Microsoft.IT.Security.Core.SystemAction,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Validation for AutoRoleAssignmentCriteria.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria.AutoRoleAssignmentCriteriaKey">
            <summary>
            AutoRoleAssignmentCriteriaKey object. Click here to see the details of <see cref="T:Microsoft.IT.Security.AutoRole.AutoRoleAssignmentCriteriaKey"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria.NewAutoRoleAssignmentCriteriaKey">
            <summary>
            NewAutoRoleAssignmentCriteriaKey object which is used to update AutoRoleAssignmentCriteriaKey. Click here to see the details of <see cref="T:Microsoft.IT.Security.AutoRole.AutoRoleAssignmentCriteriaKey"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria.CriteriaName">
            <summary>
            Friendly name to describe an Auto Role criteria
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria.AuthenticationRealm">
            <summary>
            AuthenticationRealm of AM who creates the Auto Role criteria
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria.Criteria">
            <summary>
            Criteria of an Auto Role. Subjects which meet criteria and are not in ExclusionList of the Auto Role will be assigned to the Auto Role.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria.CriteriaTree">
            <summary>
            CriteriaTree of an Auto Role. It is used to display criteria in UI.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria.ExclusionList">
            <summary>
            ExclusionList of an Auto Role. Subjects in ExclusionList will not be assigned to the Auto Role.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria.ExclusionListToBeAdded">
            <summary>
            A list of subjects which will be added to ExclusionList of an Auto Role.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleAssignmentCriteria.ExclusionListToBeRemoved">
            <summary>
            A list of subjects which will be removed from ExclusionList of an Auto Role.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleConstants.LogEventId">
            <summary>
            auto role service event id for logging
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleConstants.CreateAutoRoleAssignmentCriteriaEventId">
            <summary>
            EventId CreateAutoRoleAssignmentCriteria API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleConstants.UpdateAutoRoleAssignmentCriteriaEventId">
            <summary>
            EventId UpdateAutoRoleAssignmentCriteria API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleConstants.DeleteAutoRoleAssignmentCriteriaEventId">
            <summary>
            EventId DeleteAutoRoleAssignmentCriteria API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleConstants.GetAutoRoleAssignmentCriteriaEventId">
            <summary>
            EventId GetAutoRoleAssignmentCriteria API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleConstants.SearchAutoRoleUsersEventId">
            <summary>
            EventId SearchAutoRoleUsers API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleConstants.GetDomainValueListEventId">
            <summary>
            EventId GetDomainValueList API
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.AutoRole.DataEntities.AutoRoleConstants.AutoRolePath">
            <summary>
            Defines path value to get auto role value from CM
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.Provisioning.ITAuthorizeBulkProvisioningRequest">
            <summary>
            This class is to define a provisioning request
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.Provisioning.ITAuthorizeProvisioningRequestSearchCriteria">
            <summary>
             This is the class to define search criteria for Role Administration Entities.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants">
            <summary>
            Access Administration Component Constant definitions.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.StartExecutionLog">
            <summary>
             To log method executed is started
             </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.CompleteExecutionLog">
            <summary>
            To log method is executed successfully
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SGSyncAccountSetting">
            <summary>
            Constant for security group sync account setting
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.CorpRealm">
            <summary>
            Constant for corp authentication realm
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.CreateAttributeEventId">
            <summary>
            Attribute Event Identifier
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.CreateRoleEventId">
            <summary>
            EventId CreateRole API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UpdateRoleEventId">
            <summary>
            EventId UpdateRole API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeleteRoleEventId">
            <summary>
            EventId DeleteRole API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetRoleEventId">
            <summary>
            EventId GetRole API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SearchRoleEventId">
            <summary>
            EventId SearchRole API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetRoleTagsEventId">
            <summary>
            EventId GetRoleTags API
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.AssignRoleToRoleEventId" -->
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UnassignRoleFromRoleEventId">
            <summary>
            EventId UnassignRoleFromRole API
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.AssignPermissionToRoleEventId" -->
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UnassignPermissionFromRoleEventId">
            <summary>
            EventId for UnassignPermissionFromRole API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.AssignSubjectToRoleEventId">
            <summary>
            EventId for AssignSubjectToRole API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UnassignSubjectFromRoleEventId">
            <summary>
            EventId for UnassignSubjectFromRole API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.RoleNotExistErrorCode">
            <summary>
            Role not exist in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.RoleAlreadyExistErrorCode">
            <summary>
            Role already exists in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.RoleForSubjectFailErrorCode">
            <summary>
            role for subject sp call failed
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.RoleForSubjectWithConstraintValueErrorCode">
            <summary>
            role for subject with scope sp call failed
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SubjectToRoleAssignmentExistErrorCode">
            <summary>
            Subject role assignment already exist in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SubjectToRoleAssignmentNotExistErrorCode">
            <summary>
            Subject role assignment not exist in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.PermissionToRoleAssignmentExistErrorCode">
            <summary>
            Permission to role assignment already exist in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.PermissionToRoleAssignmentNotExistErrorCode">
            <summary>
            Permission to role assignment not exist in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetRoleForSubjectFailErrorCode">
            <summary>
            Get roles for permission sp call failed
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.CreateResourceEventId">
            <summary>
            EventId for CreateResource API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UpdateResourceEventId">
            <summary>
            EventId for UpdateResource API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeleteResourceEventId">
            <summary>
            EventId for DeleteResource API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetResourceEventId">
            <summary>
            EventId for GetResource API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SearchResourceEventId">
            <summary>
            EventId for SearchResources API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.CreateSubjectEventId">
            <summary>
            EventId for CreateSubjectEvent API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UpdateSubjectEventId">
            <summary>
            EventId for UpdateSubjectEvent API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeleteSubjectEventId">
            <summary>
            EventId for DeleteSubjectEvent API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetSubjectEventId">
            <summary>
            EventId for GetSubjectEvent API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SearchSubjectEventId">
            <summary>
            EventId for SeracSubjectEvent API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.AssignRoleToSubjectEventId">
            <summary>
            EventId for AssignRoleToSubject API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UnassignRoleFromSubjectEventId">
            <summary>
            EventId for UnassignRoleFromSubject API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetSubjectProvisionStatusEventId">
            <summary>
            EventId for GetSubjectProvisionStatus API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.CreateAuthenticationRealmEventId">
            <summary>
            EventId for CreateAuthenticationRealm API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UpdateAuthenticationRealmEventId">
            <summary>
            EventId for UpdateAuthenticationRealm API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeleteRealmEventId">
            <summary>
            EventId for DeleteRealm API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeleteRealmConfirmedEventId">
            <summary>
            EventId for DeleteRealmConfirmed API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetAuthenticationRealmEventId">
            <summary>
            EventId for GetAuthenticationRealm API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SearchRealmEventId">
            <summary>
            EventId for SearchRealm API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SearchSyncedAccountTypes">
            <summary>
            EventId for SearchRealmAccountType API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.ConstraintExpressionStart">
            <summary>
            Constant to indicate the start block of constraint expression.  Value is defined as "{(}"
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.ConstraintExpressionEnd">
            <summary>
            Constant to indicate the end block of constraint expression.  Value is defined as "{)}";
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.CreateConstraintTemplateEventId">
            <summary>
            EventId for CreateConstraintTemplate API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UpdateConstraintTemplateEventId">
            <summary>
            EventId for UpdateConstraintTemplate API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeleteConstraintTemplateEventId">
            <summary>
            EventId for DeleteConstraintTemplate API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetConstraintTemplateEventId">
            <summary>
            EventId for GetConstraintTemplate API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SearchConstraintTemplateEventId">
            <summary>
            EventId for SearchConstraintTemplate API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.ConstraintTemplateNotExistErrorCode">
            <summary>
            ConstraintTemplate not exist in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.ConstraintTemplateAlreadyExistErrorCode">
            <summary>
            ConstraintTemplate already exists in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.AttributeNotExistErrorCode">
            <summary>
            Attribute not exist in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.ConstraintTemplateFormulaNotExistErrorCode">
            <summary>
            ConstraintTemplateFormula not exist in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.ConstraintTemplateFormulaSequenceNumberErrorCode">
            <summary>
            To check constriant template formula sequence number
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.RoleToConstraintTemplateAssignmentExistErrorCode">
            <summary>
            Role to constraint template assignment exist  in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.RoleToConstraintTemplateAssignmentNotExistErrorCode">
            <summary>
            Role to constraint template assignment not exist  in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.PermissionToConstraintTemplateAssignmentExistErrorCode">
            <summary>
            Permission to constraint template assignment exist  in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.PermissionToConstraintTemplateAssignmentNotExistErrorCode">
            <summary>
            Permission to constraint template assignment not exist  in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.CreatePermissionEventId">
            <summary>
            EventId for CreatePermission API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UpdatePermissionEventId">
            <summary>
            EventId for UpdatePermission API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeletePermissionEventId">
            <summary>
            EventId for DeletePermission API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetPermissionEventId">
            <summary>
            EventId for GetPermission API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SearchPermissionEventId">
            <summary>
            EventId for SearchPermission API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SearchPermissionToRoleAssignmentsEventId">
            <summary>
            EventId for SearchPermission API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetPermissionTagsEventId">
            <summary>
            EventId for GetPermissionTags API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.PermissionNotExistErrorCode">
            <summary>
            Permission not exist in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.PermissionAlreadyExistErrorCode">
            <summary>
            Permission already exists in system
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetSubjectConstraintValueEventId">
            <summary>
            EventId for GetSubjectConstraintValue API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.AssignSubjectConstraintValueEventId">
            <summary>
            Assign SubjectConstraint Value EventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UnassignSubjectConstraintValueEventId">
            <summary>
            Unassign SubjectConstraintValue EventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.PingError">
            <summary>
            Access Administration Ping Error constant
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.CreateNamedProtectionDomainEventId">
            <summary>
            EventId for CreateNamedProtectionDomain API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UpdateNamedProtectionDomainEventId">
            <summary>
            EventId for UpdateNamedProtectionDomainEventId API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeleteNamedProtectionDomainEventId">
            <summary>
            EventId for DeleteNamedProtectionDomainEventId API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetNamedProtectionDomainEventId">
            <summary>
            EventId for GetNamedProtectionDomainEventId API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SearchNamedProtectionDomainEventId">
            <summary>
            EventId for SearchNamedProtectionDomainEventId API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeleteNamedProtectionDomainConfirmedEventId">
            <summary>
            EventId for DeleteNamedProtectionDomainConfirmedEventId API
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.ArgumentNullExceptionNamedProtectionDomain">
            <summary>
            Argument null check validation fail constant for Npd.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.NamedProtectionDomainCreateDatabaseFail">
            <summary>
            Named protection domain create failed at database error constant.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.NamedProtectionDomainFindDatabaseFail">
            <summary>
            Named protection domain find failed at database error constant.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.NamedProtectionDomainUpdateDatabaseFail">
            <summary>
            Named protection domain update failed at database error constant.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.NamedProtectionDomainRemoveDatabaseFail">
            <summary>
            Named protection domain remove failed at database error constant.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.NamedProtectionDomainListDatabaseFail">
            <summary>
            Named protection domain list failed at database error constant.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.NamedProtectionDomainNameIncorrectFormat">
            <summary>
            Named protection domain name format as per pattern is not correct.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.NamedProtectionDomainDoesNotExistInDatabase">
            <summary>
            Named protection domain does exist in database.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.AssignProvisioningSyncRuleToRoleEventId">
            <summary>
            EventId for AssignProvisioningSyncRuleToRole method.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UnassignProvisioningSyncRuleFromRoleEventId">
            <summary>
            EventId for UnassignProvisioningSyncRuleFromRole method.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetProvisioningSyncRulesOfRoleEventId">
            <summary>
            EventId for GetProvisioningSyncRulesOfRole method.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UpdateTargetErrorCode">
            <summary>
            Error code for update target
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.CreatePermissionPolicySetErrorCode">
            <summary>
            Error code for create permission policyset
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UpdatePermissionPolicySetErrorCode">
            <summary>
            Error code for update permission policyset
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.GetPermissionPolicySetErrorCode">
            <summary>
            Error code for get permission policyset
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeletePermissionPolicySetErrorCode">
            <summary>
            Error code for delete permission policyset
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.CreateRuleErrorCode">
            <summary>
            Error code for create rule
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UpdateRuleErrorCode">
            <summary>
            Error code for update rule
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeleteRuleErrorCode">
            <summary>
            Error code for delete rule
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.CreatePolicyErrorCode">
            <summary>
            Error code for create policy
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.UpdatePolicyErrorCode">
            <summary>
            Error code for update policy
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeletePolicyErrorCode">
            <summary>
            Error code for delete policy
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeleteResourceFromPAErrorCode">
            <summary>
            Error code for delete permission policyset
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.DeleteAttributeFromPAErrorCode">
            <summary>
            Error code for delete permission policyset
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.Role">
            <summary>
            Role constant
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.Resource">
            <summary>
            resource  constant
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.Subject">
            <summary>
            Subject constant
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.NamedProtectionDomainKey">
            <summary>
            Named protection domain key
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.Permission">
            <summary>
            Permission constant
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SubjectAssignment">
            <summary>
            AddRoleToSubject
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.AccessAdministrationPath">
            <summary>
            Defines path value to get access administration value from CM
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AccessAdministrationConstants.SGSyncAccount">
            <summary>
            Gets security group account name defined as in configuration
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PolicyAdminPointFaultCodes.NamedProtectionDomainNotFound">
            <summary>
            Fault Code returned by PolicyAdministrationPointService for name protection domain not replicated failed message constant.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.LogicalOperator">
            <summary>
            Logical operators to combine multiple formulas into one template
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.LogicalOperator.None">
            <summary>
            null value
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.LogicalOperator.And">
            <summary>
            Two formula combined by And operation
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.LogicalOperator.Or">
            <summary>
            Two formula combined by Or operation
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AssignmentType">
            <summary>
            Assignment Type enumeration
            
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AssignmentType.None">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AssignmentType.Delegation">
            <summary>
            Delegation
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AssignmentType.OnBehalfOf">
            <summary>
            On behalf of
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AssignmentType.Direct">
            <summary>
            Direct
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthorizationDataServiceConstants">
            <summary>
            Authorization Data Provider Service Component Constant definitions.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ClaimsDataServiceConstants">
            <summary>
            Claim Data Provider Service Component Constant definitions.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ConstraintExpression">
             <summary>
             Represents constraint formula for constraint templates.
             </summary>
            
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ConstraintExpression.ValidationRaisedHandler(System.Object,Microsoft.IT.Security.Core.DataEntities.ValidationEventArgs)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ConstraintExpression.Attributes">
            <summary>
            The list of attributes that are used in the constraint expression
            NOTE: WE DO NOT WANT TO EXPOSE THIS TO THE END CLIENT
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ConstraintExpression.Expression">
            <summary>
            The full expression in the string format
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ConstraintExpression.ExpressionWithIds">
            <summary>
            The constraint expression with names replaced by ids
            NOTE: we will not be exposing this property as a DataMember
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealmAccountType">
            <summary>
            Represents AuthenticationRealmAccountType information.
            </summary>  
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealmAccountType.ExtractObjectScope(System.String)">
            <summary>
            ExtractObjectScope to extract scope of business object
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealmAccountType.RealmKey">
            <summary>
            RealmKey object. Click here to see the details of <see cref="T:Microsoft.IT.Security.Internal.AccessAdministration.RealmKey"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealmAccountType.Source">
            <summary>
            Source XML for an instance of this type. It is mandatory for Create and Update actions.        
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealmAccountType.AccountType">
            <summary>
            Represents the subject account type.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ExclusionOperation">
            <summary>
            Status for Access Administration types used for adding or removing roles from an exclusion list. 
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ExclusionOperation.None">
            <summary>
            This indicates default value
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ExclusionOperation.Add">
            <summary>
            Add means that you want to add the role to the exclusion list.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ExclusionOperation.Remove">
            <summary>
            Remove means that you want to remove the role from the exclusion list.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission">
            <summary>
            Represents permission information.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission.Equals(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission)">
            <summary>
            Implements the Equals method 
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission.GetHashCode">
            <summary>
            Implements the GetHashCode method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission.ExtractObjectScope(System.String)">
            <summary>
            ExtractObjectScope
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission.PermissionKey">
            <summary>
            PermissionKey object.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission.NewPermissionKey">
            <summary>
            PermissionKey object.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission.PolicySetName">
            <summary>
            Permission Id, unique identifier of permission in system.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission.IsDelegable">
            <summary>
            TODO: WRITE APPROPRIATE INFO HERE
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission.ConstraintExpression">
            <summary>
            Represents a constraint expression that is present on this permission
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission.ExternalIdentifier">
            <summary>
            Store the ID which is from tenant system.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission.Tags">
            <summary>
            Tags on permissions
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionKey">
            <summary>
            PermissionKey is used to uniquely identify permission in system. Values presented by object of this class should always be unique for permission in the system.
            </summary>    
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionKey.Equals(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionKey)">
            <summary>
            Compare with other PermissionKey.
            </summary>
            <param name="permissionKey">The permission key to compare.</param>
            <returns>True if equals.</returns>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionKey.ResourceName">
            <summary>
            Unique resource name within specified Operation and NamedProtectionDomain.
            <para><c>MaxLengh:</c> 2000</para>
            <para><c>Valid characters:</c> 0-9a-zA-Z&quot;&amp;'()-.@_space</para>
            </summary>        
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionKey.Operation">
            <summary>
            Unique operation within specified ResourceName and NamedProtectionDomain.
            <para><c>MaxLengh:</c> 250</para>
            <para><c>Valid characters:</c> 0-9a-zA-Z&quot;&amp;'()-.@_space</para>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionKey.NamedProtectionDomain">
            <summary>
             It defines scope of permission.
            <para><c>MaxLengh:</c> 250</para>
            <para><c>Valid characters:</c> 0-9a-zA-Z&quot;&amp;'()-.@_space</para>
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria">
            <summary>
            PermissionSearchCriteria class is used to search permissions within specified Named Protection Domain.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria.AuthenticationRealmName">
            <summary>
            Gets or sets the name of the authentication realm.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria.ResourceName">
            <summary>
            Resource name value should be used as criteria like 'MyPage*'. It means all resources which starts with MyPage.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria.ResourceOperation">
            <summary>
            Operation value should be used as criteria like 'C%'. It means all operations which starts with C.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria.PermissionAssignmentRoleName">
            <summary>
            Gets or sets the name of the role.
            </summary>
            <value>The name of the role.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria.SubjectKey">
            <summary>
            Gets or sets the subject key.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria.SubjectAssignmentRoleName">
            <summary>
            Gets or sets the subject assignment role name.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria.SystemRoleName">
            <summary>
            Gets or sets the name of the system role.
            </summary>
            <value>The name of the system role.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria.IsDelegable">
            <summary>
            Specifies the value of Permission.IsDelegable to search for.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria.PermissionConstraintAttributeName">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
            <value>The name of the attribute.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria.Tag">
            <summary>
            Gets or sets tag.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria.ExternalIdentifier">
            <summary>
             Gets or sets ExternalIdentifier.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionToRoleAssignmentsSearchCriteria">
            <summary>
            PermissionToRoleAssignmentsSearchCriteria class is used to search permission to role assignments.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionToRoleAssignmentsSearchCriteria.ResourceName">
            <summary>
            Resource name value should be used as criteria like 'MyPage*'. It means all resources which starts with MyPage.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionToRoleAssignmentsSearchCriteria.ResourceOperation">
            <summary>
            Operation value should be used as criteria like 'C*'. It means all operations which starts with C.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionToRoleAssignmentsSearchCriteria.RoleName">
            <summary>
            Gets or sets the name of the role.
            </summary>
            <value>The name of the role.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionToRoleAssignmentsSearchCriteria.ReturnIndirectAssignments">
            <summary>
            Flag indicating wheather an indirect assignment should be returned
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionToRoleAssignmentsSearchCriteria.SystemRoleName">
            <summary>
            Gets or sets the name of the system role.
            </summary>
            <value>The name of the system role.</value>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment">
            <summary>
            Represents Privilege Assignment Information.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment.ValidationRaisedHandler(System.Object,Microsoft.IT.Security.Core.DataEntities.ValidationEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment.ExtractObjectScope(System.String)">
            <summary>
            ExtractObjectScope to extract scope of business object
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment.NewPrivilegeAssignmentKey">
            <summary>
            PrivilegeAssignmentKey object. Click here to see the details of <see cref="T:Microsoft.IT.Security.Internal.AccessAdministration.PrivilegeAssignmentKey"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment.PrivilegeAssignmentKey">
            <summary>
            PrivilegeAssignmentKey object. Click here to see the details of <see cref="T:Microsoft.IT.Security.Internal.AccessAdministration.PrivilegeAssignmentKey"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment.UtcStartDateTime">
            <summary>
            Start date time for the privilege assignment
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment.UtcEndDateTime">
            <summary>
            End date time for the privilege assignment
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment.StartDateTime">
            <summary>
            Start date time for internal use only, not exposed as datamember
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment.EndDateTime">
            <summary>
            End date time for internal use only, not exposed as datamember
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment.RolePermissions">
            <summary>
            Collection of RolePermission objects. Click here to see the details of <see cref="T:Microsoft.IT.Security.Internal.AccessAdministration.RolePermission"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment.PrivilegeAssignmentType">
            <summary>
            Assignment type for the privilege assignment
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentKey">
            <summary>
            PrivilegeAssignmentKey is used to uniquely identify PrivilegeAssignment in system. Values presented by object of this class should always be unique for PrivilegeAssignment in the system.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentKey.ValidationRaisedHandler(System.Object,Microsoft.IT.Security.Core.DataEntities.ValidationEventArgs)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentKey.AssignmentTitle">
            <summary>
            Assignment title for the privilege assignment
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentKey.SourceRealm">
            <summary>
            AuthenticationRealm of the source subject for privilege assignment
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentKey.SourceSubjectKey">
            <summary>
            Subject key of the source subject for privilege assignment
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentKey.TargetRealm">
            <summary>
            AuthenticationRealm of the target subject for privilege assignment
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentKey.TargetSubjectKey">
            <summary>
            Subject key of the target subject for privilege assignment
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria">
            <summary>
            PrivilegeAssignmentSearchCriteria class is used to search PrivilegeAssignments for Source subject in Seach criteria.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.NamedProtectionDomainName">
            <summary>
            Named Protection Domain Name
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.PrivilegeAssignmentTitle">
            <summary>
            Privilege Assignment Title
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.PrivilegeAssignmentType">
            <summary>
            Privilege Assignment Type
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.ResourceOperation">
            <summary>
            Gets or sets the resource operation.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.ResourceName">
            <summary>
            Gets or sets the name of the resource.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.RoleName">
            <summary>
            Gets or sets the name of the role.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.SourceAuthenticationRealm">
            <summary>
            Gets or sets the source authentication realm.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.SourceSubjectKey">
            <summary>
            Gets or sets the source subject key.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.TargetAuthenticationRealm">
            <summary>
            Gets or sets the target authentication realm.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.TargetSubjectKey">
            <summary>
            Gets or sets the target subject key.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.UtcStartDateTime_RangeStart">
            <summary>
            Gets or sets the end of the range for the Privilege Assignment UtcStartDateTime.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.UtcStartDateTime_RangeEnd">
            <summary>
            Gets or sets the end of the range for the Privilege Assignment UtcStartDateTime.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.UtcEndDateTime_RangeStart">
            <summary>
            Gets or sets the start of the range for the Privilege Assignment UtcEndDateTime.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.UtcEndDateTime_RangeEnd">
            <summary>
            Gets or sets the end of the range for the Privilege Assignment UtcEndDateTime .
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.SystemRoleName">
            <summary>
            Gets or sets the name of the system role.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria.IsEndUserWithoutSourceAndTarget">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm">
            <summary>
            Represents AuthenticationRealm information.
            </summary>  
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm.ExtractObjectScope(System.String)">
            <summary>
            ExtractObjectScope to extract scope of business object
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm.CanonicalizationRaisedHandler(System.Object,Microsoft.IT.Security.Core.DataEntities.ValidationEventArgs)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm.Id">
            <summary>
            N/A
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm.NewRealmKey">
            <summary>
            RealmKey object. Click here to see the details of <see cref="T:Microsoft.IT.Security.Internal.AccessAdministration.RealmKey"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm.RealmKey">
            <summary>
            RealmKey object. Click here to see the details of <see cref="T:Microsoft.IT.Security.Internal.AccessAdministration.RealmKey"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm.Description">
            <summary>
            Description about AuthenticationRealm. It is mandatory for Create and Update actions.
            <para><c>MaxLengh:</c> 400</para>        
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm.Source">
            <summary>
            Source XML for a AuthenticationRealm. It is mandatory for Create and Update actions.        
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm.TrustLevel">
            <summary>
            Represents the trust level of the Realm. Default is Low.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RealmKey">
            <summary>
            RealmKey is used to uniquely identify AuthenticationRealm in system. Values presented by object of this class should always be unique for AuthenticationRealm in the system.
            </summary>    
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RealmKey.name">
            <summary>
            Name of the RealmKey.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RealmKey.AuthenticationRealmName">
            <summary>
            Unique AuthenticationRealm name within system.
            <para><c>MaxLengh:</c> 250</para>
            <para><c>Valid characters:</c> 0-9a-zA-Z&quot;&amp;'()\-.@_space</para>
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RealmSearchCriteria">
            <summary>
            RoleSearchCriteria class is used to search Realms within system.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RealmSearchCriteria.Name">
            <summary>
            AuthenticationRealm name value to be used as criteria like 'MyRealm%'. It means search for all Realms that starts with MyRealm.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RealmSearchCriteria.SystemRoleName">
            <summary>
            Gets or sets the name of the system role.
            </summary>
            <value>The name of the system role.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RealmSearchCriteria.TrustLevel">
            <summary>
            Gets or sets the Trust Level to be search for.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role">
            <summary>
            Represents Role information.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.newRoleKey">
            <summary>
            Indicates new RoleKey.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.roleKey">
            <summary>
            Indicates the RoleKey.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.description">
            <summary>
            Indicate description of the role.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.roleAssignmentMode">
            <summary>
            Indicate role assignment mode.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.childRoles">
            <summary>
            Children roles
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.parentRoles">
            <summary>
            Parent roles
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.assignmentType">
            <summary>
            Assignment type
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.CanonicalizationRaisedHandler(System.Object,Microsoft.IT.Security.Core.DataEntities.ValidationEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.ExtractObjectScope(System.String)">
            <summary>
            ExtractObjectScope
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.Equals(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <summary>
            Implements the Equals method
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.GetHashCode">
            <summary>
            Implements the GetHashCode method
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.Id">
            <summary>
            N/A
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.SynchronizeRuleIdentifier">
            <summary>
            syn rule id
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.NewRoleKey">
            <summary>
            RoleKey object. Click here to see the details of <see cref="T:Microsoft.IT.Security.Internal.AccessAdministration.RoleKey"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.IsProvisionable">
            <summary>
            IsProvisionable to indicate if subject assignment can be provisioned or not
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.RoleKey">
            <summary>
            RoleKey object. Click here to see the details of <see cref="T:Microsoft.IT.Security.Internal.AccessAdministration.RoleKey"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.Description">
            <summary>
            Description about Role. It is nullable property.
            <para><c>MaxLengh:</c> 400</para>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.RoleAssignmentMode">
            <summary>
            Assignment mode about Role
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.ParentRoles">
            <summary>
            Parent roles of the Role
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.ChildRoles">
            <summary>
            Children roles of the Role.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.Permissions">
            <summary>
            Permissions
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.AssignmentType">
            <summary>
            Assignment type of role
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.AssignmentMethod">
            <summary>
            Assignment method of role
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.ConstraintExpression">
            <summary>
            Represents a constraint expression that is present on this role
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.IsDelegable">
            <summary>
            Represents whether the role can be delegated to other users or not
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.TrustLevel">
            <summary>
            Represents the trust level of the Role. Default is Low.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.TrustLevelOverride">
            <summary>
            Represents whether the trustlevel can be ignored/overridden for subject to role assignments.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role.Tags">
            <summary>
            Represents tags on a permission
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleKey">
            <summary>
            RoleKey is used to uniquely identify Role in system. Values presented by object of this class should always be unique for Role in the system.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleKey.namedProtectionDomain">
            <summary>
            NamedProtectionDomain of the Role.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleKey.roleName">
            <summary>
            Name of the Role.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleKey.Equals(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleKey)">
            <summary>
            Compare with other RoleKey.
            </summary>
            <param name="roleKey">The role key to compare.</param>
            <returns>True if equals.</returns>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleKey.NamedProtectionDomain">
            <summary>
            NameProtectionDomain name that defines scope of the Role.
            <para><c>MaxLengh:</c> 250</para>
            <para><c>Valid characters:</c> 0-9a-zA-Z&quot;&amp;'()\-.@_space</para>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleKey.RoleName">
            <summary>
            Unique Role name within specified NamedProtectionDomain.
            <para><c>MaxLengh:</c> 250</para>
            <para><c>Valid characters:</c> 0-9a-zA-Z&quot;&amp;'()\-.@_space</para>
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleSearchCriteria">
            <summary>
            RoleSearchCriteria class is used to search Roles.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleSearchCriteria.AuthenticationRealmName">
            <summary>
            Gets or sets the name of the authentication realm.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleSearchCriteria.NamedProtectionDomainName">
            <summary>
            Gets or sets the name of the named protection domain.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleSearchCriteria.RoleName">
            <summary>
            Role name value to be used as criteria like 'MyRole%'. It means search for all Roles that starts with MyRole.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleSearchCriteria.SubjectKey">
            <summary>
            Gets or sets the subject key.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleSearchCriteria.SystemRoleName">
            <summary>
            Gets or sets the name of the system role.
            </summary>
            <value>The name of the system role.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleSearchCriteria.RoleConstraintExpressionAttributeName">
            <summary>
            Specifies the name of an attribute to search for within a Role.ConstraintExpression.
            </summary>
            <value>The name of the attribute to be searched for.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleSearchCriteria.TrustLevel">
            <summary>
            Specifies the value of Role.TrustLevel to search for.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleSearchCriteria.IsDelegable">
            <summary>
            Specifies the value of Role.IsDelegable to search for.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleSearchCriteria.Tag">
            <summary>
            Specifies the tag value to search for.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleAssignmentMode">
            <summary>
            Assignment Type enumeration
            
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleAssignmentMode.Manual">
            <summary>
            Automatic
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleAssignmentMode.Automatic">
            <summary>
            Manual
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleAssignmentMode.Hybrid">
            <summary>
            Hybrid
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RolePermission">
            <summary>
            Represents AuthenticationRealm information.
            </summary>  
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RolePermission.ExtractObjectScope(System.String)">
            <summary>
            ExtractObjectScope to extract scope of business object
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RolePermission.Role">
            <summary>
            Role object. Click here to see the details of <see cref="T:Microsoft.IT.Security.Internal.AccessAdministration.Role"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RolePermission.Permissions">
            <summary>
            Collection of Permission objects. Click here to see the details of <see cref="T:Microsoft.IT.Security.Internal.AccessAdministration.Permission"/>
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ScopeEntry">
            <summary>
            Class to store the scope entry values for a given template formula.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ScopeEntry.templateFormula">
            <summary>
            Indicate formula for a given template.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ScopeEntry.scopeEntryValue">
            <summary>
            Indicates the scope entry value for a given formula
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ScopeEntry.ExtractObjectScope(System.String)">
            <summary>
            ExtractObjectScope to extract scope of business object
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ScopeEntry.TemplateFormula">
            <summary>
            Template formula.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ScopeEntry.ScopeEntryValue">
            <summary>
            ScopeEntryValue list.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ScopingLogicalOperator">
            <summary>
            Scoping Logical Operator enumeration
            
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ScopingLogicalOperator.None">
            <summary>
            This indicates default value
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ScopingLogicalOperator.And">
            <summary>
            This indicates AND is logical operator
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ScopingLogicalOperator.Or">
            <summary>
            This indicates OR is logical operator
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject">
            <summary>
            Represents NamedProtectionDomain information.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.ExtractObjectScope(System.String)">
            <summary>
            ExtractObjectScope to extract scope of business object
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.Id">
            <summary>
            N/A
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.SynchronizeRuleIdentifier">
            <summary>
            syn rule id
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.SubjectAssignmentMethod">
            <summary>
            SubjectAssignmentMethod
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.NpdTimeStamp">
            <summary>
            NPDTimeStamp
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.SubjectTimeStamp">
            <summary>
            SubjectTimeStamp
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.DatabaseServerTime">
            <summary>
            Database Server Time
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.NewSubjectKey">
            <summary>
            SubjectKey object. Click here to see the details of <see cref="T:Microsoft.IT.Security.Internal.AccessAdministration.SubjectKey"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.SubjectKey">
            <summary>
            SubjectKey object. Click here to see the details of <see cref="T:Microsoft.IT.Security.Internal.AccessAdministration.SubjectKey"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.ContactName">
            <summary>
            Contact name of the Subject.
            <para><c>MaxLengh:</c> 250</para>
            <para><c>Valid characters:</c> a-zA-Z&quot;&amp;'()-.@_space</para>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.FirstName">
            <summary>
            First name of the Subject.
            <para><c>MaxLengh:</c> 250</para>
            <para><c>Valid characters:</c> a-zA-Z&quot;&amp;'()-.@_space</para>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.LastName">
            <summary>
            Last name of the Subject.
            <para><c>MaxLengh:</c> 250</para>
            <para><c>Valid characters:</c> a-zA-Z&quot;&amp;'()-.@_space</para>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.BusinessStatus">
            <summary>
            Contact name of the Subject.
            <para><c>MaxLengh:</c> 20</para>
            <para><c>Valid characters:</c> 0-9a-zA-Z&quot;&amp;'()-.@_space\r</para>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.ContactPhone">
            <summary>
            Contact phone of the Subject.
            <para><c>MaxLengh:</c> 20</para>
            <para><c>Valid characters:</c> 0-9\-._space{}</para>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.ContactEmail">
            <summary>
            Contact email of the Subject.
            <para><c>MaxLengh:</c> 250</para>
            <para><c>Valid characters:</c> a-zA-Z0-9\-_.@</para>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.Roles">
            <summary>
            List or roles a subject is assigned to.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.SubjectAssignments">
            <summary>
            List or role assignment a subject is assigned to.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.ScopeEntries">
            <summary>
            Scoping entries associated with a subject.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.Constraint">
            <summary>
            Constraint associated with a subject.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.RolesWithHierarchy">
            <summary>
            If it sets to true than role will be load with hierarchy
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.AccountType">
            <summary>
            AccountType (User, System, Machine, Certificate) associated with a subject.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.ImmutableId">
            <summary>
            ImmutableId associated with a subject.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.AlternateId">
            <summary>
            AlternateId associated with a subject, e.g. personnel number for corp users
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.AlternateIdType">
            <summary>
            AlternateIdType associated with a subject.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject.UserPrincipalName">
            <summary>
            UserPrincipalName associated with a subject.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectKey">
            <summary>
            SubjectKey is used to uniquely identify Subject in system. Values presented by object of this class should always be unique for Subject in the system.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectKey.Key">
            <summary>
            Unique Key within specified AuthenticationRealm.
            <para><c>MaxLengh:</c> 250</para>
            <para><c>Valid characters:</c> 0-9a-zA-Z&quot;&amp;'()\-.@_space$</para>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectKey.RealmName">
            <summary>
            AuthenticationRealm name that defines scope of the Subject.
            <para><c>MaxLengh:</c> 250</para>
            <para><c>Valid characters:</c> 0-9a-zA-Z&quot;&amp;'()\-.@_space</para>
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria">
            <summary>
            SubjectSearchCriteria class is used to search Subjects.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.BusinessStatus">
            <summary>
            Status value to be used as criteria like 'Draft%'. It means all subjects having status that starts with Draft.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.ContactEmail">
            <summary>
            Gets or sets the contact email.
            </summary>
            <value>The contact email.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.ContactName">
            <summary>
            Gets or sets the name of the contact.
            </summary>
            <value>The name of the contact.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.ContactFirstName">
            <summary>
            Gets or sets the first name for the contact.
            </summary>
            <value>The first name of the contact.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.ContactLastName">
            <summary>
            Gets or sets the last name for the contact.
            </summary>
            <value>The last name of the contact.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.ContactPhone">
            <summary>
            Gets or sets the contact phone.
            </summary>
            <value>The contact phone.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.Key">
            <summary>
            Key value to be used as criteria like 'MySubject%'. It means search for all Subjects that starts with MySubject.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.RealmName">
            <summary>
            Name of the Authentication Realm within which Subject to be searched.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.RoleName">
            <summary>
            Gets or sets the name of the role.
            </summary>
            <value>The name of the role.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.SystemRoleName">
            <summary>
            Gets or sets the name of the system role.
            </summary>
            <value>The name of the system role.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.NamedProtectionDomainName">
            <summary>
            Gets or sets the name of the named protection domain.
            </summary>
            <value>The name of the named protection domain.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.RoleConstraintAttributeName">
            <summary>
            Gets or sets the name of an attribute that's used in the Role's constraint expression
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.RoleConstraintValue">
            <summary>
            Gets or sets the value that's used in the Role's constraint expression
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.UserPrincipalName">
            <summary>
            Gets or sets the UserPrincipalName. This is normally in the format of "alias@microsoft.com"
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria.ImmutableId">
            <summary>
            Gets or sets the ImmutableId of subject
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment">
            <summary>
            Represents NamedProtectionDomain information.
            </summary>  
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment.ExtractObjectScope(System.String)">
            <summary>
            ExtractObjectScope to extract scope of business object
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment.ValidationRaisedHandler(System.Object,Microsoft.IT.Security.Core.DataEntities.ValidationEventArgs)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment.SubjectAssignmentMethod">
            <summary>
            SubjectAssignmentMethod
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment.Subject">
            <summary>
            SubjectKey object. Click here to see the details of <see cref="T:Microsoft.IT.Security.Internal.AccessAdministration.SubjectKey"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment.UtcStartDateTime">
            <summary>
            Start datetime for SubjectAssignment 
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment.UtcEndDateTime">
            <summary>
            End datetime for SubjectAssignmnet
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment.Roles">
            <summary>
            List of roles a subject is assigned to.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment.ConstraintValues">
            <summary>
            List of constraint values a subject assigned to.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment.ScopeEntries">
            <summary>
            Scoping entries associated with a subject.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria">
            <summary>
            SubjectToRoleAssignment class is used to search SubjectsToRoleAssignments.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria.RealmName">
            <summary>
            Name of the Authentication Realm
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria.SubjectKey">
            <summary>
            Subject Key 
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria.UserPrincipalName">
            <summary>
            User Principal Name 
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria.RoleName">
            <summary>
            Gets or sets the name of the role.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria.ResourceName">
            <summary>
            Resource name
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria.ResourceOperation">
            <summary>
            Resource Operation
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria.IncludeIndirectAssignments">
            <summary>
            Flag indicating wheather an indirect assignment should be returned
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria.SystemRoleName">
            <summary>
            Gets or sets the name of the system role.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria.SubjectAssignmentMethod">
            <summary>
            Gets or sets the SubjectAssignmentMethod of assignment.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria.UtcStartDateTime_RangeStart">
            <summary>
            Gets or sets the start of the range for assignment UtcStartDateTime.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria.UtcStartDateTime_RangeEnd">
            <summary>
            Gets or sets the end of the range for assignment UtcStartDateTime.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria.UtcEndDateTime_RangeStart">
            <summary>
            Gets or sets the start of the range for assignment UtcEndDateTime.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria.UtcEndDateTime_RangeEnd">
            <summary>
            Gets or sets the end of the range for assignment UtcEndDateTime .
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignmentMethod">
            <summary>
            Assignment Type enumeration
            
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignmentMethod.None">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignmentMethod.Manual">
            <summary>
            Automatic
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignmentMethod.Automatic">
            <summary>
            Manual
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintAttributeEntry.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintAttributeEntry.ExtractObjectScope(System.String)">
            <summary>
            ExtractObjectScope to extract scope of business object
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintAttributeEntry.AttributeName">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintAttributeEntry.ConstraintValues">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry.subjectConstraintAttributes">
            <summary>
            List Attributes
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry.ExtractObjectScope(System.String)">
            <summary>
            ExtractObjectScope to extract scope of business object
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry.ResourceName">
            <summary>
            Gets or sets the formula.
            </summary>
            <value>The formula data.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry.ResourceOperation">
            <summary>
            Gets or sets the operation.
            </summary>
            <value>The resource operation data.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry.SubjectConstraintAttributes">
            <summary>
            List Attributes
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry.SubjectKey">
            <summary>
            Gets or sets the Subject Key.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry.ConstraintValueSet">
            <summary>
            Gets or sets the operation.
            </summary>
            <value>The operation data.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry.NamedProtectionDomain">
            <summary>
            Gets or sets the NamedProtectionDomain.
            </summary>
            <value>The NamedProtectionDomain data.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry.RoleName">
            <summary>
            Gets or sets the roleName.
            </summary>
            <value>The roleName data.</value>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnCriteria">
            <summary>
            UpnCriteria is used as input parameter of some of the AuthZ APIs
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnCriteria.UserPrincipalName">
            <summary>
            User principal name
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnPermissionCriteria">
            <summary>
            UpnPermissionCriteria is used as input parameter of some of the AuthZ APIs
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnPermissionCriteria.ResourceName">
            <summary>
            Resource name
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnPermissionCriteria.ResourceOperation">
            <summary>
            Resource operation
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnPermissionCriteria.UserPrincipalName">
            <summary>
            User Principal Name
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnPermissionCriteria.ExternalIdentifier">
            <summary>
            ExternalIdentifier
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager">
            <summary>
            AccessAdministration manager provides abstraction to accessing data for service layer
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.#cctor">
            <summary>
            Create provider list and keep them in memory
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.#ctor(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Set default provider to the application level default provider
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.#ctor(Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Set default provider to the passed provider while creating manager
            </summary>
            <param name="dataProvider">dataprovider object</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.SetProvider(Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider)">
            <summary>
            Sets default provider to the passed provider
            </summary>
            <param name="dataProvider">dataprovider object</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.GetProvider(System.String)">
            <summary>
            returns specific dataprovider
            </summary>
            <param name="provider">provider name</param>
            <returns>dataprovider object</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.GetRoleForSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get the roles for a given subject.
            </summary>
            <param name="subject">Subject entity containing Subject ID</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject with collection of roles</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.GetSubjectInfo(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,System.String,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="subject"></param>
             <param name="namedProtectionDomain"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.GetSubjectAssignment(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get subject assignment for specific subject.
            </summary>
            <param name="subject">Subject entity containing Subject ID</param>
            <param name="role">Role entity containing RoleKey</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject with collection of roles</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.GetRoleForSubjectWithPermission(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get the roles for a given subject and given permission.
            </summary>
            <param name="subject">Subject entity containing Subject ID</param>
            <param name="onBehalfSubject">On behalf of Subject entity</param>
            <param name="permission">Permission entity</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject with collection of roles</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.GetRoleForPermission(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,System.Boolean,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            override this method to get the roles for a given permission
            </summary>
            <param name="permission">Permission for which roles need to be associated</param>
            <param name="includeRoleHierarchy">indicate return parent roles in hierarchy</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject with collection of roles</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.DeleteSubjectByImmutableId(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectImmutableKey},Microsoft.IT.Security.Core.CustomContext)" -->
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.GetPermissionTags(System.String,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            override this method to get all permissionTags for the NamedProtectionDomain
            </summary>
            <param name="namedProtectionDomainName ">name of the NamedProtectionDomain</param>
            <param name="context">context with corelation id etc</param>
            <returns>string list for permissionTags</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.GetRoleTags(System.String,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            override this method to get all RoleTags for the NamedProtectionDomain
            </summary>
            <param name="namedProtectionDomainName">name of the NamedProtectionDomain</param>
            <param name="context">context with corelation id etc</param>
            <returns>string list for RoleTags</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.GetSubjectConstraintValue(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,System.String,System.String,System.String,System.String,System.String,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get the roles for a given subject and scoping values
            </summary>
            <param name="subject">Subject entity containing SubjectIdentifier, RealmName</param>
            <param name="onBehalfSubject">OnBehalf Subject entity containing SubjectIdentifier, RealmName</param>
            <param name="permissionNamedProtectionDomain">permission's NPD</param>
            <param name="permissionAction">Permission Operation</param>
            <param name="permissionResource">Permission ResourceName</param>
            <param name="formula">scope template formula</param>
            <param name="constraintRole">scope role constraint</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject with collection of role and scope entries</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.GetExistingSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get the subject who exists in the system
            </summary>
            <param name="subject">Subject entity containing SubjectIdentifier, RealmName</param>
            <param name="context">context with corelation id etc</param>
            <returns>matched subject key, if not found, return empty string</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.GetSynchronizeRuleId(System.Collections.Generic.IEnumerable{System.String},Microsoft.IT.Security.Core.SystemAction,Microsoft.IT.Security.Core.SystemResource,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get the provisioning synchronize rule id for specified namedprotectiondomain, system action ans system resource
            </summary>
            <param name="namedProtectionDomains">name of namedprotectiondomain</param>
            <param name="action">system action</param>
            <param name="resource">system resource</param>
            <param name="context">context with corelation id etc</param>
            <returns>matched subject key, if not found, return empty string</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.Assign``1(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Assign entities using appropriate provider
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="entities">entity collection</param>
            <param name="context">context with corelation id etc</param>
            <returns>return entities list</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.AssignProvisioningSyncRuleToRole(System.Collections.Generic.List{Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            	<c>AssignProvisioningSyncRuleToRole</c> API is used to assign provisioning sync rule(s) to specific role.
            </summary>
            <param name="syncRules">The provisioning sync rule defines how the role needs to be provisioned in external systems such as AD, MSCRM, SAP etc.
            </param>
            <param name="role">Role to assign sync rule to, for provisioning in to external systems. 
            </param>
            <param name="context">Service context containing caller details, correlationId etc
            </param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.Unassign``1(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Unassign entities using appropriate provider
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="entities">entity collection</param>
            <param name="context">context with corelation id etc</param>
            <returns>return entities list</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.UnassignProvisioningSyncRuleFromRole(System.Collections.Generic.List{Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            	<c>UnassignProvisioningSyncRuleFromRole</c> API is used to unassign provisioning sync rule(s) from specific role.
            </summary>
            <param name="syncRules">The provisioning sync rule defines how the role needs to be provisioned in external systems such as AD, MSCRM, SAP etc.
            </param>
            <param name="role">Role to unassign sync rule from, for deprovisioning in external systems.
            </param>
            <param name="context">Service context containing caller details, correlationId etc
            </param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.Create``1(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Create entities using appropriate provider
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="entities">entity collection</param>
            <param name="context">context with corelation id etc</param>
            <returns>return entities list</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.CreateSubjects(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Creates subjects in the system
            </summary>
            <param name="subjects"> List of subjects to create</param>
            <param name="context"> service context </param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.Update``1(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Update entities using appropriate provider
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="entities">entity collection</param>
            <param name="context">context with corelation id etc</param>
            <returns>return entities list</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.Get``1(``0,Microsoft.IT.Security.Core.CustomContext)" -->
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.GetProvisioningSyncRulesOfRole(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            	<c>GetProvisioningSyncRulesOfRole</c> API is used to get the list of provisioning sync rules assigned to a role.
            </summary>
            <param name="role">Role to get assigned sync rules for. RoleKey member of Role class is required in this operation.
            </param>
            <param name="context">Service context containing caller details, correlationId etc
            </param>
            <returns>Returns list of provisioning sync rules assigned to the specified role in the system. </returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.Get``2(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Get entity object for passed in criteria
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="entity">passed in criteria</param>
            <param name="context">context with corelation id etc</param>
            <returns>return entity object</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.Set``1(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Get entity object for passed in criteria
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="entity">passed in criteria</param>
            <param name="context">context with corelation id etc</param>
            <returns>return entity object</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.AssignSubjectToRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            AssignSubjectToRole assigns specified role to a large List of subjects.
            if the subject has already assigned with the role, it will be  overwritten with new assigning info.
            </summary>
            <param name="subjects">Subjects to which the role is to be assigned.</param>
            <param name="role">Role to be assigned to the subject</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.UnassignSubjectFromRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            UnassignSubjectFromRole unassigns specified subjects from specified role.
            if the subject has not been assigned with the role, it will ignore the unassigning info.
            </summary>
            <param name="subjects">subjects from which the role is to be unassigned.</param>
            <param name="role">Role to be removed from the subject.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.DeleteSubjectPrivilegeAssignment(System.String,System.String,System.Boolean,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Delete the subject's PrivilegeAssignment, where the subject is the target
            </summary>
            <param name="authenticationRealmName">Assignment Realm Name</param>
            <param name="subjectKey">Subject Key</param>
            <param name="isSource">Is Source or Target</param>
            <param name="context">Custom Context</param>
            <returns>No Of Records</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.Ping(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Ping method to check the database connectivity.
            </summary>
            <param name="context">Custom context instance.</param>
            <returns>Database name.</returns>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.AccessAdministrationDefaultProvider">
            <summary>
            Get default dataprovider
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationManager.ProviderList">
            <summary>
            get list of all the configured dataprovider
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider">
            <summary>
            Base class for AccessAdministration Data Providers
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Create(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to create new NamedProtectionDomain.
            </summary>
            <param name="namedProtectionDomain">Named protection domain object to be created in source.</param>
            <param name="context">Custom context.</param>
            <returns>Created named protection domain object which might be changed due to create operation.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Update(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to update existing NamedProtectionDomain.
            </summary>
            <param name="namedProtectionDomain">Named protection domain object to be created in source.</param>
            <param name="context">Custom context.</param>
            <returns>Updated named protection domain object which might be changed due to update operation.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Delete(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to delete existing NamedProtectionDomain.
            </summary>
            <param name="namedProtectionDomain">Named protection domain object contains data which is required to delete object from source.</param>
            <param name="context">Custom context.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Get(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to get existing NamedProtectionDomain.
            </summary>
            <param name="namedProtectionDomain">Named protection domain object to be found.</param>
            <param name="context">Custom context.</param>
            <returns>Found named protection domain object.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Search(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomainSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,System.String,System.Boolean,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to delete existing NamedProtectionDomain.
            </summary>
            <param name="namedProtectionDomain">Named protection domain object contains data which is required to delete object from source.</param>
            <param name="context">Custom context.</param>
            <summary>
            Search named protection domains.
            </summary>
            <param name="criteria">Search criteria.</param>
            <param name="page">Page</param>
            <param name="namedProtectionDomain">Named protection domain object to search for.</param>
            <param name="includeChildNamedProtectionDomain">Flag to include child named protection domains.</param>
            <param name="context">Custom context.</param>
            <returns>Search result having found named protection domains.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Create(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to add new roles.
            </summary>
            <param name="role">Role to be created.</param>
            <param name="context">Custom context instance.</param>
            <returns>Added role which might be changed due to add operation.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Delete(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to delete existing Role
            </summary>
            <param name="role">Role object contains data which is required to delete object from source</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Update(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to update exisitng roles.
            </summary>
            <param name="role">Role to be updated.</param>
            <param name="context">Custom context instance.</param>
            <returns>Updated role which might be changed due to update operation.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Get(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to find existing Role
            </summary>
            <param name="searchXml">Search criteria XML contains data which is required to find object from source</param>
            <returns>returns Role object based on search criteria</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.ListDescendant(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,System.Collections.Generic.List{Microsoft.IT.Security.Core.DataEntities.SearchFilter},System.Boolean,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to list descendant roles.
            </summary>
            <param name="role">The role whose decendants needs to be fetched.</param>
            <param name="context">Custom context instance.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.ListAscendant(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,System.Collections.Generic.List{Microsoft.IT.Security.Core.DataEntities.SearchFilter},System.Boolean,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to list ascendant roles
            </summary>
            <param name="role">The role whose ascendants need to be fetched</param>
            <param name="context">Custom context instance</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Create(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
             override this method to create a new permission
             </summary>
             <param name="permission"></param>
            <param name="context">custom context with caller info etc</param>
             <returns>Created Permission object which might be changed due to create operation.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Update(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
             Override this method to update existing Permission
             </summary>
             <param name="permission">Permission object contains data which is required to update object from source</param>
            <param name="context">custom context with caller info etc</param>
            <returns>Updated Permission object which might be changed due to update operation.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Delete(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
             override this method to remove an existing permission
             </summary>
             <param name="permission"></param>
            <param name="context">custom context with caller info etc</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Get(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            override this method to find a particular permssion
            </summary>
            <param name="permission">permission to be found if exists or not</param>
            <param name="context">custom context with caller info etc.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Assign(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to assign permission to role
            </summary>
            <param name="role">role to which the permission is to be assigned</param>
            <param name="permission">permission to be assigned to the role</param>
            <param name="transaction"></param>
            <param name="context">custom context with caller info etc.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Unassign(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
             Override this method to deassign permission from role
             </summary>
             <param name="role">role from which permission is to be deassigned</param>
             <param name="permission">permission to be deassigned from the role</param>
             <param name="transaction"></param>
            <param name="context">custom context with caller info etc</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Create(Microsoft.IT.Security.Core.DataEntities.Resource,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
             Override this method to create resources in database
            </summary>
            <param name="resource">IList&lt;Resource&gt; collection will be created in source</param>
            <param name="context">context with corelation id etc</param>
            <returns>Created Resource object which might be changed due to create operation.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Delete(Microsoft.IT.Security.Core.DataEntities.Resource,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to delete existing resources
            </summary>
            <param name="resource">Resource object will be created in source</param>
            <param name="context">context with corelation id etc</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Update(Microsoft.IT.Security.Core.DataEntities.Resource,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
             Override this method to update existing resources
            </summary>
            <param name="entities">IList&lt;Resource&gt; collection will be created in source</param>
            <param name="context">context with corelation id etc</param>
            <returns>Updated Resource object which might be changed due to update operation.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Get(Microsoft.IT.Security.Core.DataEntities.Resource,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Overriding Get method to get existing Resource
            </summary>
            <param name="entity">resource object contains data which is required to find object from source</param>
            <param name="context">context with corelation id etc</param>
            <returns>returns Resource object</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Search(Microsoft.IT.Security.Core.DataEntities.ResourceSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,System.String,System.Boolean,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Result list of result for specified criteria
            </summary>
            <param name="criteria">Resource search criteria</param>
            <param name="page">page information</param>
            <param name="namedProtectionDomain">namedprotectiondomain</param>
            <param name="includeChildNamedProtectionDomain">include child namedprotectiondomain</param>
            <param name="context">context with corelation id etc</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Assign(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to assign role to subject
            </summary>
            <param name="roleToAssign">subject to which the role is to be assigned</param>
            <param name="subjectToAssign">role to be assigned to the subject</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Create(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to assign role to subject with UtcStartDateTime and UtcEndDateTime specified.
            </summary>
            <param name="subjectAssignment">subject to which the role is to be assigned</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Update(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to update UtcStartDateTime and UtcEndDateTime specified of a SubjectAssignment.
            </summary>
            <param name="subjectAssignment">SubjectAssignments to be updated</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Unassign(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to deassign role from subject
            </summary>
            <param name="role">subject from which role is to be deassigned</param>
            <param name="subject">role to be deassigned from the subject</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.AssignSubjectToRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            AssignSubjectToRole assigns specified role to a large List of subjects.
            If the subject has already assigned with the role, it will be  overwritten with new assigning info.
            </summary>
            <param name="subjects">Subjects to which the role is to be assigned.</param>
            <param name="role">Role to be assigned to the subject</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.UnassignSubjectFromRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            UnassignSubjectFromRole unassigns specified subjects from specified role.
            if the subject has not been assigned with the role, it will ignore the unassigning info.
            </summary>
            <param name="subjects">subjects from which the role is to be unassigned.</param>
            <param name="role">Role to be removed from the subject.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.DeleteSubjectPrivilegeAssignment(System.String,System.String,System.Boolean,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Delete the subject's PrivilegeAssignment, where the subject is the target
            </summary>
            <param name="targetAuthenticationRealmName">subject realm name</param>
            <param name="targetSubjectKey">subject key</param>
            <returns>No of rows affected</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Search(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,System.String,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Override this method to search for subject to role assignments
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.GetRoleForPermission(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,System.Boolean,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            override this method to get the roles for a given permission
            </summary>
            <param name="permission">Permission for which roles need to be associated</param>
            <param name="includeRoleHierarchy">indicate return parent roles in hierarchy</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject with collection of roles</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.GetRoleForSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            override this method to get the roles for a given subject id
            </summary>
            <param name="subject">Subject for which roles need to be fetched</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject with collection of roles</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.GetSubjectAssignment(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get subject assignment for specific subject.
            </summary>
            <param name="subject">Subject entity containing Subject ID</param>
            <param name="role">Role entity containing RoleKey</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject assignment</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.GetSubjectInfo(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,System.String,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="subject"></param>
             <param name="namedProtectionDomain"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.GetRoleForSubjectWithPermission(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            override this method to get the roles for a given subject and given permission.
            </summary>
            <param name="subject">Subject entity containing Subject ID</param>
            <param name="onBehalfSubject">On behalf of Subject entity</param>
            <param name="permission">Permission entity</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject with collection of roles</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.GetSubjectConstraintValue(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,System.String,System.String,System.String,System.String,System.String,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get the roles for a given subject and scoping values
            </summary>
            <param name="subject">Subject entity containing SubjectIdentifier, RealmName</param>
            <param name="onBehalfSubject">OnBehalf Subject entity containing SubjectIdentifier, RealmName</param>
            <param name="permissionNamedProtectionDomain">permission's NPD</param>
            <param name="permissionAction">Permission Operation</param>
            <param name="permissionResource">Permission ResourceName</param>
            <param name="formula">scope template formula</param>
            <param name="constraintRole">scope role constraint</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject with collection of role and scope entries</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.GetExistingSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get the subject who exists in the system
            </summary>
            <param name="subject">Subject entity containing SubjectIdentifier, RealmName</param>
            <param name="context">context with corelation id etc</param>
            <returns>matched subject key, if not found, return empty string</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.GetSynchronizeRuleId(System.Collections.Generic.IEnumerable{System.String},Microsoft.IT.Security.Core.SystemAction,Microsoft.IT.Security.Core.SystemResource,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get the provisioning synchronize rule id for specified namedprotectiondomain, system action ans system resource
            </summary>
            <param name="namedProtectionDomains">npd object</param>
            <param name="action">system action</param>
            <param name="resource">system resource</param>
            <param name="context">context with corelation id etc</param>
            <returns>matched subject key, if not found, return empty string</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Ping(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Ping method to check the database connectivity.
            </summary>
            <param name="context">Custom context instance.</param>
            <returns>Database name.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.Get(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,System.Collections.Generic.List{Microsoft.IT.Security.Core.DataEntities.SearchFilter},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to Get Search Filter List.
            </summary>
            <param name="subjectScopeEntry">Subject Scope Entry to be Created</param>
            <param name="caller">Caller object.</param>
            <param name="oboUser">Obo user object.</param>
            <param name="filterList">Filter list containt data against whihc constraint values to be found.</param>
            <returns>List having SearchFiter objects.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.AccessAdministrationProvider.GetConstraintValuesOfSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.DataEntities.AttributeEntity,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="subject"></param>
             <param name="role"></param>
             <param name="permission"></param>
             <param name="attribute"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider">
            <summary>
            SqlProvider is used to connect to the Sql Server database
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Assign(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method Assigns a Role to a single permission
            </summary>
            <param name="role">Role to which Permission has to be assigned</param>
            <param name="permission">Permission to be assigned to a role</param>
            <param name="context">custom context with caller info etc.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Unassign(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
             This method Unassign a Permission from a Role
             </summary>
             <param name="role">Role from which a Permission has to be deassigned</param>
             <param name="permission">Permission to be deassigned from a Role</param>
            <param name="context">custom context with caller info etc</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.AssignSubjectToRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            AssignSubjectToRole assigns specified role to a large List of subjects. if the subject has already assigned with 
            the role, it will be  overwritten with new assigning info.
            </summary>
            <param name="subjects">Subjects to which the role is to be assigned.</param>
            <param name="role">Role to be assigned to the subject</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.UnassignSubjectFromRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            UnassignSubjectFromRole unassigns specified subjects from specified role.
            if the subject has not been assigned with the role, it will ignore the unassigning info.
            </summary>
            <param name="subjects">subjects from which the role is to be unassigned.</param>
            <param name="role">Role to be removed from the subject.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.DeleteSubjectPrivilegeAssignment(System.String,System.String,System.Boolean,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Delete the subject's PrivilegeAssignment, where the subject is the target
            </summary>
            <param name="authenticationRealmName">Assignment Realm Name</param>
            <param name="subjectKey">Subject Key</param>
            <param name="isSource">Is Source or Target</param>
            <param name="context">Custom Context</param>
            <returns>No Of Records</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.GetRoleForPermission(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,System.Boolean,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get the roles for a given permission
            </summary>
            <param name="permission">Permission for which roles need to be associated</param>
            <param name="includeRoleHierarchy">indicate return parent roles in hierarchy</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject with collection of roles</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.GetRoleForSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get the roles for a given subject id
            </summary>
            <param name="subject">Subject for which roles need to be fetched</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject with collection of roles</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.GetSubjectAssignment(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get subject assignment for specific subject.
            </summary>
            <param name="subject">Subject entity containing Subject ID</param>
            <param name="role">Role entity containing RoleKey</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject assignment</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.GetRoleForSubjectWithPermission(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get the roles for a given subject and given permission.
            </summary>
            <param name="subject">Subject entity containing Subject ID</param>
            <param name="onBehalfSubject">On behalf of Subject entity</param>
            <param name="permission">Permission entity</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject with collection of roles</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.GetConstraintValuesOfSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.DataEntities.AttributeEntity,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="subject"></param>
             <param name="onBehalfSubject"></param>
             <param name="permissinNamedProtectionDomain"></param>
             <param name="permissionAction"></param>
             <param name="permissionResource"></param>
             <param name="constraintRole"></param>
             <param name="formula"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.GetSubjectConstraintValue(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,System.String,System.String,System.String,System.String,System.String,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get the roles for a given subject and scoping values
            </summary>
            <param name="subject">Subject entity containing SubjectIdentifier, RealmName</param>
            <param name="onBehalfSubject">OnBehalf Subject entity containing SubjectIdentifier, RealmName</param>
            <param name="permissinNamedProtectionDomain">permission's NPD</param>
            <param name="permissionAction">Permission Operation</param>
            <param name="permissionResource">Permission ResourceName</param>
            <param name="formula">scope template formula</param>
            <param name="constraintRole">scope role constraint</param>
            <param name="context">context with corelation id etc</param>
            <returns>Subject with collection of role and scope entries</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.AssignProvisioningSyncRuleToRole(System.Collections.Generic.List{Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            	<c>AssignProvisioningSyncRuleToRole</c> API is used to assign provisioning sync rule(s) to specific role.
            </summary>
            <param name="syncRules">The provisioning sync rule defines how the role needs to be provisioned in external systems such as AD, MSCRM, SAP etc.
            </param>
            <param name="role">Role to assign sync rule to, for provisioning in to external systems. 
            </param>
            <param name="context">Service context containing caller details, correlationId etc
            </param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.UnassignProvisioningSyncRuleFromRole(System.Collections.Generic.List{Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            	<c>UnassignProvisioningSyncRuleFromRole</c> API is used to unassign provisioning sync rule(s) from specific role.
            </summary>
            <param name="syncRules">The provisioning sync rule defines how the role needs to be provisioned in external systems such as AD, MSCRM, SAP etc.
            </param>
            <param name="role">Role to unassign sync rule from, for deprovisioning in external systems.
            </param>
            <param name="context">Service context containing caller details, correlationId etc
            </param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.GetProvisioningSyncRulesOfRole(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            	<c>GetProvisioningSyncRulesOfRole</c> API is used to get the list of provisioning sync rules assigned to a role.
            </summary>
            <param name="role">Role to get assigned sync rules for. RoleKey member of Role class is required in this operation.
            </param>
            <param name="context">Service context containing caller details, correlationId etc
            </param>
            <returns>Returns list of provisioning sync rules assigned to the specified role in the system. </returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.ConstructSubjectAssignTable(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Core.DataEntities.OperationType)">
            <summary>
            ConstructSubjectAssignTable is the method to construct DataTable of SubjectAssignment
            </summary>
            <param name="subjects">list of Subjects</param>
            <param name="operationType">type of Operation</param>
            <returns>constructed datatable of SubjectAssignment information for the Subject List </returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Get(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,System.Collections.Generic.List{Microsoft.IT.Security.Core.DataEntities.SearchFilter},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to Get Search Filter List.
            </summary>
            <param name="subjectScopeEntry">Subject Scope Entry to be Created</param>
            <param name="caller">Caller object.</param>
            <param name="oboUser">Obo user object.</param>
            <param name="filterList">Filter list containt data against whihc constraint values to be found.</param>
            <returns>List having SearchFiter objects.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Set(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
             This method is used to Add/Create a Subject Scope Entry
             </summary>
             <param name="subjectScopeEntry">Subject Scope Entry to be Created</param>
            <param name="context">custom context with caller info etc</param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Assign(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
             This method is used to Assign  a Constraints Entries to Subject
             </summary>
             <param name="subjectScopeEntry">Subject Scope Entry to be Created</param>
            <param name="context">custom context with caller info etc</param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Unassign(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
             This method is used to delete a Subject Scope Entry
             </summary>
             <param name="subjectScopeEntry">Subject Scope Entry to be deleted</param>
            <param name="context">custom context with caller info etc</param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.GetExistingSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get the subject who exists in the system
            </summary>
            <param name="subject">Subject entity containing SubjectIdentifier, RealmName</param>
            <param name="context">context with corelation id etc</param>
            <returns>matched subject key, if not found, return empty string</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Create(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
             This method is used to Add/Create a Permission
             </summary>
             <param name="permission">Permission to be Created</param>        
            <param name="context">custom context with caller info etc</param>
             <returns>Permission object which might be changed due to Create operation</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Update(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used Update an existing Permission
            </summary>
            <param name="permission">New Permission</param>
            <param name="context">custom context with caller info</param>
            <returns>>Permission object which might be changed due to Update operation</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Get(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to Find a Permission
            </summary>
            <param name="permission">Permission to Find</param>
            <param name="context">custom context with caller info etc.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Delete(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to Remove a Permission
            </summary>
            <param name="permission">Permission to be Removed</param>
            <param name="context">custom context with caller info etc</param>        
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Search(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,System.Collections.Generic.List{System.String},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to search privilege Assignments
            </summary>
            <param name="criteria">PrivilegeAssignmentSearchCriteria</param>
            <param name="page">The page.</param>
            <param name="npdName">Name of the NPD.</param>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Create(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Method to add new roles.
            </summary>
            <param name="role">Role to be created.</param>
            <param name="context">Custom context instance.</param>
            <returns>Added roles which might be changed due to add operation.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Update(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.CustomContext)" -->
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.GetConstraintExpression(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.ConstraintExpression)">
            <summary>
            Helper method for Create/Update of Role/Permission methods
            </summary>
            <param name="constraintExpression">Constraint Expression</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initialize provider
            </summary>
            <param name="providerName">provider name</param>
            <param name="config">configurable parameters</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Ping(Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             Ping method to check the database connectivity.
             </summary>
             <param name="context">Custom context instance.</param>
             <returns>Database name.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Create(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to Create/Add a Subject
            </summary>
            <param name="subject">Subject to be Created</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.CreateSubjects(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Method to create subject(s)
            </summary>
            <param name="subjects">Subject(s) to be created</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Delete(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to Remove a Subject
            </summary>
            <param name="subject">Subject to be Removed</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.DeleteSubjectByImmutableId(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectImmutableKey},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to delete subject using immutableId
            </summary>
            <param name="subjectImmutableKeys">List of immutable keys containing realm and immutableId representing subject</param>
            <param name="context">Service context</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Get(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get a Subject
            </summary>
            <param name="entity">Subject to get</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.GetSubjectInfo(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,System.String,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to get a Subject
            </summary>
            <param name="entity">Subject to get</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Update(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to Update a Subject
            </summary>
            <param name="subject">New Subject to Update</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Create(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to Create/Add a Subject
            </summary>
            <param name="realm">Subject to be Created</param>
            <returns>AuthenticationRealm object which might be changed due to Create operation</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Delete(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to Remove a Subject
            </summary>
            <param name="realm">AuthenticationRealm to be Removed</param>
            <param name="context">context object</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Get(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to Find a Subject
            </summary>
            <param name="realm">AuthenticationRealm to Find</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.Update(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This method is used to Update a Subject
            </summary>
            <param name="realm">New Subject to Update</param>
            <returns>AuthenticationRealm object which might be changed due to Update opearation</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.ConstructSubjectsTable(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject})">
            <summary>
            Constructs the data table containing subject collection for bulk operation
            </summary>
            <param name="subjects"> List of subjects</param>
            <returns> data table with subject collection populated</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SqlProvider.ConstructImmutableIdTable(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectImmutableKey})">
            <summary>
            Constructs the data table containing collection of subjectImmutableKeys for bulk operation
            </summary>
            <param name="subjectImmutableKeys"> List of subjectImmutableKeys representing the subjects</param>
            <returns> data table with immutable Ids collection populated</returns>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SubjectServerTime.Permissions">
            <summary>
            Permissions hash table contains Key as permissionkey and value as subject with roles associated with permission.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.SubjectServerTime.LastAccessedTime">
            <summary>
            LastAccessedTime of database
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.VelocityProvider">
            <summary>
            VelocityProvider is used to connect to cache
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.VelocityProvider.cacheCallsPerSecond">
            <summary>
            PIP cache calls per second performance counter
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.VelocityProvider.hitToMissRatio">
            <summary>
            PIP cache hit to miss ratio performance counter
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.VelocityProvider.hitToMissRatioBase">
            <summary>
             Base performance counter for PIP cache hit to miss ratio counter defined above
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.VelocityProvider.avgCacheCallTime">
            <summary>
            Avg. PIP cache call time performance counter
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.VelocityProvider.cacheName">
            <summary>
            App Fabric Cache Store name PIP 
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.VelocityProvider.GetRoleForSubjectWithPermission(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            override this method to get the roles for a given subject and given permission.
            </summary>
            <param name="subject">Subject entity containing Subject ID</param>
            <param name="onBehalfSubject">On behalf of Subject entity</param>
            <param name="permission">Permission entity</param>
            <param name="context">context with correlation id etc</param>
            <returns>Subject with collection of roles</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.VelocityProvider.Ping(Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             Ping method to check the Cache connectivity.
             </summary>
             <param name="context">Custom context instance.</param>
             <returns>State of Cache Service</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.DataProviders.VelocityProvider.GetPIPCacheInterval(System.String)">
            <summary>
            returns the CacheInterval setting for NPD
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService">
            <summary>
            RoleAdministration interface defines APIs which are exposed to work with RoleAdministration data
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.CreateRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role})">
             <summary>
             	<c>CreateRole</c> API is used to create Roles in specified NamedProtectionDomain. Multiple Roles
             	can be created in a single call as API signature supports bulk operation.
             </summary>
            <param name="roles">Role collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the limit is 20. </para>
             	<para><c>Policy Administration Point Integration: </c>When role is created in RoleAdministration, rule needs to create in PolicyAdministrationPoint. It will have one target for this role. CreateRule is called to perform this operation.</para>
             	<para>RoleKey member of Role class is required in Create operation. NewRoleKey object will be ignored in this operation. Description and Status are optional to specify.
             	TrustLevel property of Role class should not be used as it will be deprecated in the future.</para>
             </remarks>
             <example>
             <para>Use below code to create a new Role in NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
               using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
               {
                   Role role = new Role();
                   role.RoleKey = new RoleKey();
                   role.RoleKey.RoleName = "Owner";
                   role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                   Role[] roles = new Role[] { role };
                   role.IsProvisionable = false;
                   // set role constraint expression
                   role.ConstraintExpression = new ConstraintExpression();
                   //constraint expression uses {} as special escape characters for
                   //sub group indicator (), logical operator &amp;,|, operation operator =,!=,&lt;,&gt;,&lt;=,&gt;=,contains,any
                   //literal value will be escaped as {'literal'}, attribute name will be escaped as {"attributename"}
                   //below is example using two attributes, SubjectRegion and ResourceRegion, attributes need to be created before used in constraint expression
                   role.ConstraintExpression.Expression = "{(}{\"SubjectRegion\"}{=}{\"ResourceRegion\"}{)}";
                   client.CreateRole(roles);
               }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UpdateRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role})">
             <summary>
             	<c>UpdateRole</c> API is used to update existing Roles in specified NamedProtectionDomain. Multiple Roles
             	can be updated in a single call as API signature supports bulk operation.
             </summary>
            <param name="roles">Role collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para><c>Policy Administration Point Integration: </c>When Role is updated, Target attribute value of Policy, Rule object of Permission PolicySet needs to update. Target attribute value is updated to new value of role. UpdateTargetAttributes of PolicyAdministrationPoint API is used to perform this update operation.</para>
             	<para>RoleKey member of Role is mandatory for Update operation. NewRoleKey can be used with Update operation if you want to update RoleName. Only RoleName can be updated using NewRoleKey. You cannot update NamedProtectionDomain using NewRoleKey
             		and even if new value specified for NamedProtectionDomain, it will be ignored.</para>
             </remarks>
             <example>
             <para>Use below code to update Role which already exists in NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
                using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                {
                   Role role = new Role();
                   role.RoleKey = new RoleKey();
                   role.RoleKey.RoleName = "Owner";
                   role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                   role.NewRoleKey = new RoleKey();
                   role.NewRoleKey.RoleName = "Administrator";
                   role.IsProvisionable = false;
                   // set role constraint expression
                   role.ConstraintExpression = new ConstraintExpression();
                   //constraint expression uses {} as special escape characters for
                   //sub group indicator (), logical operator &amp;,|, operation operator =,!=,&lt;,&gt;,&lt;=,&gt;=,contains,any
                   //literal value will be escaped as {'literal'}, attribute name will be escaped as {"attributename"}
                   //below is example, literal value is US, attribute name is Region, attribute need to be created before used in constraint expression
                   role.ConstraintExpression.Expression = "{(}{'US'}{=}{\"Region\"}{)}";
            
                   Role[] roles = new Role[] { role };
                   client.UpdateRole(roles);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.DeleteRole(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
             <summary>
             	<c>DeleteRole</c> API is used to delete existing Roles in specified NamedProtectionDomain.
             </summary>
            <param name="role"> <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para><c>Cacade Delete:</c> It should also remove all the associated objects.</para>
             	<para>Only RoleKey object of Role class is required for this operation. All other members of Role class are ignored.</para>
             </remarks>
             <example>
             <para>Use below code to delete existing Role from NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
              using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
              {
                  Role role = new Role();
                  role.RoleKey = new RoleKey();
                  role.RoleKey.RoleName = "Owner";
                  role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                  client.DeleteRole(role);
              }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetRole(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
             <summary>
             	<c>GetRole</c> API is used to fetch existing Role in specified NamedProtectionDomain. It populates the immediate Children Role Key in the ChildRoles Property and the Parent roles in the ParentRoles Property.
             	RoleKey information is required to fetch Role object.
             </summary>
            <param name="role">Role object only containing RoleKey information. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.RoleKey"/> class.</param>
            <returns>Role object populated with RoleKey and Description members. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</returns>
             <remarks>
                 <para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             <para>Use below code to get existing Role in NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     Role role = new Role();
                     role.RoleKey = new RoleKey();
                     role.RoleKey.RoleName = "Owner";
                     role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
            
                     role = client.GetRole(role);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.SearchRoles(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
             <summary>
             	<c>SearchRoles</c> API is used to search Roles that match specified search criteria.
             </summary>
             <param name="criteria">Search criteria object. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.RoleSearchCriteria"/> class.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <returns>Returns SearchResult&lt;Role&gt; matching specified search criteria Details of <see cref="T:Microsoft.IT.Security.Common.SearchResult"/> class.</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para>RoleSearchCriteria is an optional parameters.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
                 <para>Page Size must be between 1 and 1000.</para>
             </remarks>
             <example>
             <para>Use below code to search roles with name beginning with RXD.</para>
             <code>
              using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
              {
                  RoleSearchCriteria criteria = new RoleSearchCriteria();
                  criteria.RoleName = "RXD*";
                  Page page = new Page { Number=1, Size=50 };
                  SearchResultOfRole searchResult = client.SearchRoles(criteria, page);
                  //Get total matching count
                  int matchingCount = searchResult.Total;
            
                  //Get all roles that matched search criteria
                  Role[] matchingResults = searchResult.Results;
              }
             </code>
             <para>Use below code to search roles assigned to a subject.</para>
             <code>
              using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
              {
                  RoleSearchCriteria criteria = new RoleSearchCriteria();
                  criteria.SubjectKey = "redmond\\myalias";
                  criteria.AuthenticationRealmName = "corp.microsoft.com";
                  Page page = new Page { Number=1, Size=50 };
                  SearchResultOfRole searchResult = client.SearchRoles(criteria, page);
              }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.AssignRoleToRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
             <summary>
             	<c>AssignRoleToRole</c> API is used to assign one or more than one roles as junior roles to a specific role.
             	It can also be used for external role linking.
             </summary>
            <param name="seniorRole">The role which will be a senior role in the hierarchical relation to be created. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
            <param name="juniorRoles">A list of (one or more) roles that will be junior roles(s) in the hierarchical relation to be created. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>RoleKey member of Role class is required in this operation. NewRoleKey and other objects will be ignored in this operation.
             	    All roles specified in the operation are expected to be existing.
             	    In the case of external role linking the business domain of the senior role should be in some ancestry of the business domain of the specified junior roles.
             	</para>
             </remarks>
             <example>
             <para>Use below code to create a hierarchical relation between a ProjectLead and DevLead, TestLead roles in MyBusinessDomain business domain.</para>
             <code>
               using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
               {
                   Role seniorRole = new Role();
                   seniorRole.RoleKey = new RoleKey();
                   seniorRole.RoleKey.RoleName = "ProjectLead";
                   seniorRole.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                   Role juniorRole0 = new Role();
                   juniorRole0.RoleKey = new RoleKey();
                   juniorRole0.RoleKey.RoleName = "DevLead";
                   juniorRole0.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                   Role juniorRole1 = new Role();
                   juniorRole1.RoleKey = new RoleKey();
                   juniorRole1.RoleKey.RoleName = "TestLead";
                   juniorRole1.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                   Role[] juniorRoles = new Role[] { juniorRole0, juniorRole1 };
                   client.AssignRoleToRole(juniorRoles, seniorRole);
               }
             </code>
             <para>Use below code to create an external role link between the Auditor role in a parent business domain
             with the Auditor role in a child business domain, where MyBusinessDomain is the parent business domain of the MyChildBusinessDomain business domain.</para>
             <code>
                  using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                  {
                      Role seniorRole = new Role();
                      seniorRole.RoleKey = new RoleKey();
                      seniorRole.RoleKey.RoleName = "Auditor";
                      seniorRole.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                      Role juniorRole0 = new Role();
                      juniorRole0.RoleKey = new RoleKey();
                      juniorRole0.RoleKey.RoleName = "Auditor";
                      juniorRole0.RoleKey.NamedProtectionDomain = "MyChildBusinessDomain";
            
                      Role[] juniorRoles = new Role[] { juniorRole0 };
                      client.AssignRoleToRole(juniorRoles, seniorRole);
                  }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UnassignRoleFromRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
             <summary>
             	<c>UnassignRoleFromRole</c> API is used to unassign one or more junior roles from the specificed senior role.
             	It can also be used for de-linking externally linked roles.
             </summary>
            <param name="seniorRole">The role which is a senior role in the role hierarchy w.r.t. the specified junior roles. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
            <param name="juniorRoles">A list of (one or more than one) roles that are junior role(s) in the hierarchy and are to be unassigned from the specified senior role. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>RoleKey member of Role class is required in this operation. NewRoleKey and other objects will be ignored in this operation.
             	    All roles specified in the operation are expected to be existing.
             	    Also each junior role should be some descendant of the specified senior role.</para>
             </remarks>
             <example>
             <para>Use below code to remove the hierarchical relation between a ProjectLead and DevLead, TestLead roles in a business domain.</para>
             <code>
                using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                {
                    Role seniorRole = new Role();
                    seniorRole.RoleKey = new RoleKey();
                    seniorRole.RoleKey.RoleName = "ProjectLead";
                    seniorRole.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
            
                    Role juniorRole0 = new Role();
                    juniorRole0.RoleKey = new RoleKey();
                    juniorRole0.RoleKey.RoleName = "DevLead";
                    juniorRole0.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                    Role juniorRole1 = new Role();
                    juniorRole1.RoleKey = new RoleKey();
                    juniorRole1.RoleKey.RoleName = "TestLead";
                    juniorRole1.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                    Role[] juniorRoles = new Role[] { juniorRole0, juniorRole1 };
                    client.UnassignRoleFromRole(juniorRoles, seniorRole);
                }
             </code>
             <para>Use below code to remove an external role link between the Auditor role in MyBusinessDomain business domain
             with the Auditor role in child business domain, where MyBusinessDomain is the parent business domain of the MyChildBusinessDomain business domain.</para>
             <code>
                using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                {
                    Role seniorRole = new Role();
                    seniorRole.RoleKey = new RoleKey();
                    seniorRole.RoleKey.RoleName = "Auditor";
                    seniorRole.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                    Role juniorRole0 = new Role();
                    juniorRole0.RoleKey = new RoleKey();
                    juniorRole0.RoleKey.RoleName = "Auditor";
                    juniorRole0.RoleKey.NamedProtectionDomain = "MyChildBusinessDomain";
            
                    Role[] juniorRoles = new Role[] { juniorRole0 };
                    client.UnassignRoleFromRole( juniorRoles, seniorRole);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetRoleTags(System.String)">
             <summary>
             	<c>GetRoleTags</c> API is used to get RoleTags for specified NamedProtectionDomain.
             	if NamedProtectionDomain is null,empty,or whitespace, it will get all RoleTags
             </summary>
             <param name="namedProtectionDomainName">name of the NamedProtectionDomain.</param>
             <returns>
             returns list of tags matching specified NamedProtectionDomain </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             	<para>Use below code to search all RoleTags in NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
                using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                {
                    string[] searchResultOfRoleTags = client.GetRoleTags("MyBusinessDomain");
            
                }
             </code>
             </example>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.AssignProvisioningSyncRuleToRole(System.Collections.Generic.List{Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UnassignProvisioningSyncRuleFromRole(System.Collections.Generic.List{Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetProvisioningSyncRulesOfRole(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)" -->
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.CreateFirstLevelNamedProtectionDomain(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
             <summary>
             Creates the first-level named protection domain
             </summary>
             <param name="namedProtectionDomain">The new NPD to be created</param>
             <param name="businessDomainManager">The business domain manager user to be associated with this new NPD</param>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             	<para> This API can only be called by Support Engineers.</para>
             </remarks>
             <example>
             <para>Use below code to create new NamedProtectionDomains in system.</para>
             <code>
               using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
               {
                   NamedProtectionDomain namedProtectionDomain1 = new NamedProtectionDomain();
                   namedProtectionDomain1.NamedProtectionDomainKey = new NamedProtectionDomainKey();
                   namedProtectionDomain1.NamedProtectionDomainKey.NamedProtectionDomainName = "MyFirstLevelBusinessDomain";
            
                    SystemUser systemUser = new SystemUser();
                    systemUser.Email = "myalias@microsoft.com";
                    systemUser.SystemUserKey = new SystemUserKey();
                    systemUser.SystemUserKey.Key = "redmond\\myalias";
                    systemUser.SystemUserKey.SystemAuthenticationRealmKey = new SystemAuthenticationRealmKey();
                    systemUser.SystemUserKey.SystemAuthenticationRealmKey.Name = "corp.microsoft.com";
            
                   client.CreateFirstLevelNamedProtectionDomain(namedProtectionDomain1,systemUser);
               }
             </code>
             </example>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.CreateNamedProtectionDomain(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain})">
             <summary>
             	<c>CreateNamedProtectionDomain</c> API is used to create NamedProtectionDomains in system.
             </summary>
            <param name="namedProtectionDomains">NamedProtectionDomain collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.Common.NamedProtectionDomain"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>NamedProtectionDomainKey and CombiningAlgorithmDefault member of NamedProtectionDomain class are required for this operation. </para>
             </remarks>
             <example>
             <para>Use below code to create new NamedProtectionDomains in system.</para>
             <code>
              using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
              {
                  NamedProtectionDomain namedProtectionDomain1 = new NamedProtectionDomain();
                  namedProtectionDomain1.NamedProtectionDomainKey = new NamedProtectionDomainKey();
                  namedProtectionDomain1.NamedProtectionDomainKey.NamedProtectionDomainName = "MyBusinessDomain";
                  namedProtectionDomain1.CombiningAlgorithmDefault = PolicyCombiningAlgorithm.PermitOverrides;
            
                  NamedProtectionDomain namedProtectionDomain2 = new NamedProtectionDomain();
                  namedProtectionDomain2.NamedProtectionDomainKey = new NamedProtectionDomainKey();
                  namedProtectionDomain2.NamedProtectionDomainKey.NamedProtectionDomainName = "MyOtherBusinessDomain";
                  namedProtectionDomain2.CombiningAlgorithmDefault = PolicyCombiningAlgorithm.PermitOverrides;
            
                  NamedProtectionDomain[] namedProtectionDomains = new NamedProtectionDomain[] { namedProtectionDomain1, namedProtectionDomain2 };
                  client.CreateNamedProtectionDomain(namedProtectionDomains);
              }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UpdateNamedProtectionDomain(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain})">
             <summary>
             	<c>UpdateNamedProtectionDomain</c> API is used to update existing NamedProtectionDomains in the system. Multiple NamedProtectionDomains
             	can be updated in a single call as API signature supports bulk operation.
             </summary>
            <param name="namedProtectionDomains">NamedProtectionDomain collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>NamedProtectionDomainKey member of NamedProtectionDomain is mandatory for Update operation. NewNamedProtectionDomainKey can be used with Update operation if you want to update Name.</para>
             </remarks>
             <example>
             <para>Use below code to update the name of a NamedProtectionDomain which already exists in the system.</para>
             <code>
               using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
               {
                   NamedProtectionDomain namedProtectionDomain1 = new NamedProtectionDomain();
                   namedProtectionDomain1.NamedProtectionDomainKey = new NamedProtectionDomainKey();
                   namedProtectionDomain1.NamedProtectionDomainKey.NamedProtectionDomainName = "MyBusinessDomain";
                   namedProtectionDomain1.NewNamedProtectionDomainKey = new NamedProtectionDomainKey();
                   namedProtectionDomain1.NewNamedProtectionDomainKey.NamedProtectionDomainName = "MyBusinessDomainUpdated";
            
            
                   NamedProtectionDomain[] namedProtectionDomains = new NamedProtectionDomain[] { namedProtectionDomain1 };
                   client.UpdateNamedProtectionDomain(namedProtectionDomains);
               }
             </code>
             <para> Use below code to update the CombiningAlgorithm of a NamedProtectionDomain which already exists in the system</para>
             <code>
              using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
              {
                  NamedProtectionDomain namedProtectionDomain1 = new NamedProtectionDomain();
                  namedProtectionDomain1.NamedProtectionDomainKey = new NamedProtectionDomainKey();
                  namedProtectionDomain1.NamedProtectionDomainKey.NamedProtectionDomainName = "MyBusinessDomain";
                  namedProtectionDomain1.CombiningAlgorithmDefault = PolicyCombiningAlgorithm.AllPermit;
            
            
                  NamedProtectionDomain[] namedProtectionDomains = new NamedProtectionDomain[] { namedProtectionDomain1 };
                  client.UpdateNamedProtectionDomain(namedProtectionDomains);
              }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.RequestDeleteNamedProtectionDomain(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain)">
            <summary>
            	<c>RequestDeleteNamedProtectionDomain</c> API is used to generate a key that is required to delete the Named Protection Domain from the system. This key must be
            	passed to the DeleteNamedProtectionDomainConfirmed API in order to actually delete the Named Protection Domain from the system.
            </summary>
            <param name="namedProtectionDomain">Details of <see cref="T:Microsoft.IT.Security.Common.NamedProtectionDomain"/> class.</param>
            <returns> A key that is required to be sent to the DeleteNamedProtectionDomainConfirmed API in order to actually delete the Named Protection Domaian</returns>
            <remarks>
                <para><c>Audit:</c> This API call is audited.</para>
            	<para>Only NamedProtectionDomainKey object of NamedProtectionDomain class is required for this operation. All other members of NamedProtectionDomain class are ignored.</para>
            </remarks>
            <example>
            	<para>Use below code to request the key to delete an existing NamedProtectionDomain from the system.</para>
            	<code>
            using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
            {
                NamedProtectionDomain namedProtectionDomain1 = new NamedProtectionDomain();
                namedProtectionDomain1.NamedProtectionDomainKey = new NamedProtectionDomainKey();
                namedProtectionDomain1.NamedProtectionDomainKey.NamedProtectionDomainName = "MyBusinessDomain";
                string requestKey = client.RequestDeleteNamedProtectionDomain(namedProtectionDomain1);
            }
            </code>
            </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.DeleteNamedProtectionDomain(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain,System.String)">
             <summary>
             Deletes the named protection domain from the system.
             </summary>
             <param name="namedProtectionDomain">The named protection domain to delete.</param>
             <param name="deleteRequestKey">The delete request key generated using the RequestDeleteNamedProtectionDomain API.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This API performs a cascade delete and removes all data associated with the NPD.</para>
             </remarks>
             <example>
             	<para>Use below code to delete existing NamedProtectionDomain from the system.</para>
             <code>
             using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
             {
                 NamedProtectionDomain namedProtectionDomain1 = new NamedProtectionDomain();
                 namedProtectionDomain1.NamedProtectionDomainKey = new NamedProtectionDomainKey();
                 namedProtectionDomain1.NamedProtectionDomainKey.NamedProtectionDomainName = "MyBusinessDomain";
                 string requestKey = client.RequestDeleteNamedProtectionDomain(namedProtectionDomain1);
            
                 NamedProtectionDomain namedProtectionDomain2 = new NamedProtectionDomain();
                 namedProtectionDomain2.NamedProtectionDomainKey = new NamedProtectionDomainKey();
                 namedProtectionDomain2.NamedProtectionDomainKey.NamedProtectionDomainName = "MyBusinessDomain";
                 client.DeleteNamedProtectionDomain(namedProtectionDomain2, requestKey);
             }
             </code>
             </example>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetNamedProtectionDomain(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain)">
            <summary>
            	<c>GetNamedProtectionDomain</c> API is used to fetch existing NamedProtectionDomain in.
            </summary>
            <param name="namedProtectionDomain">NamedProtectionDomain object only containing NamedProtectionDomainKey information. Details of <see cref="T:Microsoft.IT.Security.Common.NamedProtectionDomainKey"/> class.</param>
            <returns>
            NamedProtectionDomain object populated with NamedProtectionDomainKey, Description, ParentName, CombiningAlgorithmDefault and Status members. Details of <see cref="T:Microsoft.IT.Security.Common.NamedProtectionDomain"/> class.
            </returns>
            <remarks>
                <para><c>Audit:</c> This API call is not audited.</para>
            </remarks>
            <example>
            	<para>Use below code to get existing NamedProtectionDomain.</para>
            	<code>
            using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
            {
                NamedProtectionDomain namedProtectionDomain = new NamedProtectionDomain();
                namedProtectionDomain.NamedProtectionDomainKey = new NamedProtectionDomainKey();
                namedProtectionDomain.NamedProtectionDomainKey.NamedProtectionDomainName = "MyBusinessDomain";
                namedProtectionDomain = client.GetNamedProtectionDomain(namedProtectionDomain);
            }
            </code>
            </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.SearchNamedProtectionDomains(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomainSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
             <summary>
             Searches the named protection domains.
             </summary>
             <param name="criteria">The search criteria.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <returns>
             Returns SearchResult&lt;NamedProtectionDomain&gt; matching specified search criteria Details of <see cref="T:Microsoft.IT.Security.Common.SearchResult"/> class.
             </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
             	<para>NamedProtectionDomainSearchCriteria is optional parameter to pass. If ParentName is passed in the search criteria then this API will return result under specified parent NamedProtectionDomain only if caller is having access on the specified parent NamedProtectionDomain.</para>
             	<para>If ParentName passed as null, then this API will return all the NamedProtectionDomains that caller has access to and that match other search criterias.</para>
             </remarks>
             <example>
             	<para>Use below code to search upto 50 NamedProtectionDomains (sorted by name) in Parent domain called MyParentBusinessDomain that begins with My. </para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     NamedProtectionDomainSearchCriteria criteria = new NamedProtectionDomainSearchCriteria();
                     criteria.Name = "MyBusinessDomain";
                     criteria.ParentName = "MyParentBusinessDomain";
            
                     Page page = new Page { Number=1, Size=50 };
                     SearchResultOfNamedProtectionDomain searchResult = client.SearchNamedProtectionDomains(criteria, page);
            
                     //Get total matching count
                     int matchingCount = searchResult.Total;
            
                     //Get all business domains that matched search criteria
                     NamedProtectionDomain[] matchingNpds = searchResult.Results;
                 }
             </code>
             	<para>Use below code to search upto 50 NamedProtectionDomains (sorted by name) that you have access to.</para>
             <code>
                using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                {
                    Page page = new Page { Number=1, Size=50};
                    SearchResultOfNamedProtectionDomain searchResult = client.SearchNamedProtectionDomains(null, page);
                }
             </code>
             </example>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetConstraintValuesOfSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.DataEntities.AttributeEntity)">
             <summary>
             	<c>GetConstraintValuesOfSubject</c> API returns a list of subject constraint entries for an existing subject, where each entry contrains attributes and constraint values for given subject, role and/or permission combination.
             </summary>
             <param name="subject">Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <param name="role">The role.</param>
             <param name="permission">The permission.</param>
             <param name="attribute">The attribute.</param>
             <returns>
             SubjectConstraintEntry collection. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectConstraintEntry"/> class.
             </returns>
             <remarks>
             <para><c>Audit:</c> This API call is not audited.</para>
             <para>Specified subject should already exist in the system. Note that only those constraint template attributes will return which are either associated to role or to permission. If they are associated to permission then permisison to role and role to subject link will also be considered while returning attributes. This API returns attribute with values if they are already set earlier otherwise values will be empty.</para>
             </remarks>
             <example>
             	<para>Use below code to get subject constraint attributes</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                    Subject subject = new Subject();
                    subject.SubjectKey = new SubjectKey();
                    subject.SubjectKey.RealmName = "corp.microsoft.com";
                    subject.SubjectKey.Key = @"redmond\\alias";
                    subject.BusinessStatus = "Active";
                    subject.ContactEmail = "alias@microsoft.com";
                    subject.ContactName = "full name";
                    subject.ContactPhone = "123 456 7890";
            
                    Permission permission = new Permission();
                    permission.PermissionKey = new PermissionKey();
                    permission.PermissionKey.ResourceName = "WebPage";
                    permission.PermissionKey.Operation = "Access";
                    permission.PermissionKey.NamedProtectionDomain = "MyBusinessDomain";
            
                    Role role = new Role();
                    role.RoleKey = new RoleKey();
                    role.RoleKey.RoleName = "Owner";
                    role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                    AttributeEntity attribute = new AttributeEntity();
                    AttributeKey.Urn = "Expiration Date New" + System.Guid.NewGuid();
                    attributeKey.AttributeType = AttributeType.Subject;
                    attributeKey.NamedProtectionDomain = "MyBusinessDomain";
                    attribute.NewAttributeKey = attributeKey;
                    attribute.Scope = AttributeScopeType.WithinSameNpd;
                    attribute.DataType = AttributeDataType.DateTime;
            
                    client.GetConstraintValuesOfSubject(subject, role, permission, AttributeEntity attribute);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.AssignConstraintValueToSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
             <summary>
             Assigns the constraint value to subject.
             </summary>
             <param name="subjectConstraintEntries">The subject constraint entries.</param>
             <param name="subject">The subject.</param>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
                 <para>Concurrency safety: it is recommended not to call this method on the same subject with too many constraint attributes at the same time from multiple threads/processes. Version counter of the subject in DB table being updated has potential locking based on the tenure of the transaction and will cause performance issue</para>
             </remarks>
             <example>
             	<para>Use below code to get subject constraint attributes</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     Subject subject = new Subject();
                     subject.SubjectKey = new SubjectKey();
                     subject.SubjectKey.RealmName = "corp.microsoft.com";
                     subject.SubjectKey.Key = @"redmond\\abc";
                     subject.BusinessStatus = "Active";
                     subject.ContactEmail = "abc@microsoft.com";
                     subject.ContactName = "abc";
                     subject.ContactPhone = "123 456 7890";
            
                     SubjectConstraintEntry subjectConstraintEntry = new SubjectConstraintEntry();
                     subjectConstraintEntry.NamedProtectionDomain = "MyBusinessDomain";
                     subjectConstraintEntry.RoleName = "abd";
            
                     SubjectConstraintAttributeEntry subjectConstraintValueEntry = new SubjectConstraintAttributeEntry();
                     subjectConstraintValueEntry.AttributeName = "MyAttribute";
                     subjectConstraintValueEntry.ConstraintValues = new string[1]{"MyAttributeValue"};
            
                     subjectConstraintEntry.SubjectConstraintAttributes = new SubjectConstraintAttributeEntry[] {subjectConstraintValueEntry};
            
                     SubjectConstraintEntry[] subjectConstraintEntries = new SubjectConstraintEntry[] { subjectConstraintEntry };
            
                     client.AssignConstraintValueToSubject(subjectConstraintEntries, subject);
                 }
            
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UnassignConstraintValueFromSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
             <summary>
             Unassigns the constraint value from subject.
             </summary>
             <param name="subjectConstraintEntries">The subject constraint entries.</param>
             <param name="subject">The subject.</param>
             <returns></returns>
             <remarks>
                 <para>Concurrency safety: it is recommended not to call this method on the same subject with too many constraint attributes at the same time from multiple threads/processes. Version counter of the subject in DB table being updated has potential locking based on the tenure of the transaction and will cause performance issue</para>
             </remarks>
              <example>
             	<para>Use below code to get subject constraint attributes</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                    Subject subject = new Subject();
                    subject.SubjectKey = new SubjectKey();
                    subject.SubjectKey.RealmName = "corp.microsoft.com";
                    subject.SubjectKey.Key = @"redmond\\abc";
                    subject.BusinessStatus = "Active";
                    subject.ContactEmail = "abc@microsoft.com";
                    subject.ContactName = "abc";
                    subject.ContactPhone = "123 456 7890";
            
                    SubjectConstraintEntry subjectConstraintEntry = new SubjectConstraintEntry();
                    subjectConstraintEntry.NamedProtectionDomain = "MyBusinessDomain";
                    subjectConstraintEntry.RoleName = "abd";
                    SubjectConstraintEntry[] subjectConstraintEntries = new SubjectConstraintEntry[]{subjectConstraintEntry};
            
                    client.UnassignConstraintValueFromSubject(subjectConstraintEntries,subject);
                 }
             </code>
             </example>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.AssignPermissionToRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <summary>
            	<c>AssignPermissionToRole</c> API is used to assign permissions to role and then these permissions can be granted to subject via Subject to Role assignment APIs
            	e.g. <c>AssignSubjectToRole</c> or <c>AssignRoleToSubject</c>
            </summary>
            <param name="permissions">Permissions collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Permission"/> class.</param>
            <param name="role">Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
            <remarks>
                <para> <c>Audit:</c> This API call is audited.</para>
                <para>This method supports bulk operations and the bulk limit is 20.</para>
            	<para><c>Policy Administration Point Integration:</c> When Permission is assigned to Role, Permission PolicySet needs to update.
                    If Permission PolicySet already contains Policy and Rule then Rule Target Value is updated and assigned role value is appended to the Target attribute value separated by comma.
                    Like Target[0].AttributeValue = “Reader,Owner,Contributor”;<para>
                    If Permission PolicySet doesn’t contain Policy and Rule then new rule is created with one Target. Target attribute value is set to assigned role value.
                    New policy is created and assign newly created rule to policy.
                    Policy in turn assign to Permission PolicySet. </para><para>
                    Below PolicyAdministrationPoint APIs are called to perform these operations</para>
            		<list type="bullet">
            			<item>GetPolicySetByPermission</item>
            			<item>GetRuleVersion</item>
            			<item>UpdateTargetAttributes</item>
            		</list>
            		<c>Or</c>
            		<list type="bullet">
            			<item>GetPolicySetByPermission</item>
            			<item>CreateRule</item>
            			<item>CreatePolicy</item>
            			<item>AssignRulesToPolicy</item>
            			<item>AssignPoliciesToPolicySet</item>
            		</list>
            	</para>
            	<para></para>
            	<para>All specified permissions and role should exist in the system before you can perform assignment operation.</para>
            </remarks>
            <example>
            	<para>Use below code to assign permissions to role.</para>
            	<code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     //Create Permission object with PermissionKey object
                     Permission permission = new Permission();
                     permission.PermissionKey = new PermissionKey();
                     permission.PermissionKey.ResourceName = "WebPage";
                     permission.PermissionKey.Operation = "Edit";
                     permission.PermissionKey.NamedProtectionDomain = "MyBusinessDomain";
                     //Create Role object with RoleKey object
                     Role role = new Role();
                     role.RoleKey = new RoleKey();
                     role.RoleKey.RoleName = "Owner";
                     role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                     //Assign Permissions to Role
                     client.AssignPermissionToRole(new Permission[] { permission }, role);
                 }
            </code>
            </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UnassignPermissionFromRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <summary>
            	<c>UnassignPermissionFromRole</c> API is used to unassign permissions from role and hence these permissions can be revoked from all subjects which are associated with this role.
            </summary>
            <param name="permissions">Permissions collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Permission"/> class.</param>
            <param name="role">Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
            <returns></returns>
            <remarks>
                <para> <c>Audit:</c> This API call is audited.</para>
                <para>This method supports bulk operations and the bulk limit is 20.</para>
            	<para><c>Policy Administration Point Integration:</c> When Permission is unassigned from Role then Rule Target of Permission PolicySet needs to update.
                    Rule Target Value is updated and unassigned role value is removed from comma separated attribute values.
                    Below PolicyAdministrationPoint APIs are called to perform these operations
            <list type="bullet">
            			<item>GetPolicySetByPermission</item>
            			<item>GetRuleVersion</item>
            			<item>UpdateTargetAttributes</item>
            		</list>
            	</para>
            	<para></para>
            	<para>All specified permissions and role should exist in the system and permissions are already assign to role before you can perform unassignment operation.</para>
            </remarks>
            <example>
            	<para>Use below code to unassign permissions from role.</para>
            	<code>
            using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
            {
                //Create Permission object with PermissionKey object
                Permission permission = new Permission();
                permission.PermissionKey = new PermissionKey();
                permission.PermissionKey.ResourceName = "WebPage";
                permission.PermissionKey.Operation = "Edit";
                permission.PermissionKey.NamedProtectionDomain = "MyBusinessDomain";
                //Create Role object with RoleKey object
                Role role = new Role();
                role.RoleKey = new RoleKey();
                role.RoleKey.RoleName = "Owner";
                role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                //Unassign Permissions from Role
                client.UnassignPermissionFromRole(new Permission[] { permission }, role);
            }
            </code>
            </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.CreatePermission(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission})">
             <summary>
             	<c>CreatePermission</c> API is used to create permissions in specified NamedProtectionDomain. Multiple permissions
             	can be created in a single call as API signature supports bulk operation.
             </summary>
            <param name="permissions">Permission collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Permission"/> class.</param>
             <remarks>
                 <para> <c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para><c>PolicyAdministrationPoint Integration:</c> When permission is created in RoleAdministration, permission policyset needs to create in PolicyAdministrationPoint.
             	This permission policyset will be evaluated against authorization request of this permission</para>
             	<para></para>
             	<para>PermissionKey member of Permission class is mandatory in Create operation. NewPermissionKey object will be ignored in this operation.</para>
             </remarks>
             <example>
             <para>Use below code to create a new permission in NamedProtectionDomain called RXD.</para>
             <code>
               using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
               {
                   Permission newPermission = new Permission();
                   newPermission.PermissionKey = new PermissionKey();
                   newPermission.PermissionKey.ResourceName = "WebPage";
                   newPermission.PermissionKey.Operation = "Access";
                   newPermission.PermissionKey.NamedProtectionDomain = "MyBusinessDomain";
                   Permission[] permissions = new Permission[] { newPermission };
                   client.CreatePermission(permissions);
               }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UpdatePermission(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission})">
             <summary>
             	<c>UpdatePermission</c> API is used to update permissions in specified NamedProtectionDomain.
             </summary>
            <param name="permissions">Permission collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Permission"/> class.</param>
             <remarks>
                 <para> <c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para><c>PolicyAdministrationPoint Integration:</c> When permission is updated in RoleAdministration, permission policyset needs to update in PolicyAdministrationPoint.
             	GetPolicySetByPermission and UpdatePolicySet APIs of PolicySetAdministrationPoint are called to perform this operation.</para>
             	<para></para>
             	<para>PermissionKey object of Permission is mandatory for Update operation.
             	    NewPermissionKey can be used with Update operation if you want to update Operation.
             	    Only Operation can be updated using NewPermissionKey object. You cannot update ResourceName and NamedProtectionDomain;
             	    if new values are specified for ResourceName and NamedProtectionDomain, they will be ignored.</para>
             </remarks>
             <example>
             <para>Use below code to update existing permission in NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     Permission permission = new Permission();
                     permission.PermissionKey = new PermissionKey();
                     permission.PermissionKey.ResourceName = "WebPage";
                     permission.PermissionKey.Operation = "Access";
                     permission.PermissionKey.NamedProtectionDomain = "MyBusinessDomain";
                     permission.NewPermissionKey = new PermissionKey();
                     permission.NewPermissionKey.Operation = "View";
                     Permission[] permissions = new Permission[] { permission };
                     client.UpdatePermission(permissions);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.DeletePermission(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission)">
             <summary>
             	<c>DeletePermission</c> API is used to delete permissions in specified NamedProtectionDomain.
             </summary>
             <param name="permission">The permission to be deleted.</param>
             <remarks>
                 <para> <c>Audit:</c> This API call is audited.</para>
             	<para><c>PolicyAdministrationPoint Integration:</c> When permission is Deleted in RoleAdministration, permission policyset needs to delete in PolicyAdministrationPoint.
                             DeletePolicySet API of PolicyAdministrationPoint is called to perform this operation.</para>
             	<para></para>
             	<para>Only PermissionKey object of Permission class is required for this operation. All other members of Permission class are ignored.</para>
             </remarks>
             <example>
             	<para>Use below code to delete existing permission in NamedProtectionDomain called MyBusinessDomain.</para>
             	<code>
               using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
               {
                   Permission permission = new Permission();
                   permission.PermissionKey = new PermissionKey();
                   permission.PermissionKey.ResourceName = "WebPage";
                   permission.PermissionKey.Operation = "Access";
                   permission.PermissionKey.NamedProtectionDomain = "MyBusinessDomain";
                   client.DeletePermission(permission );
               }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetPermission(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission)">
             <summary>
             	<c>GetPermission</c> API is used to fetch existing Permission in specified NamedProtectionDomain.
             </summary>
            <param name="permission">Only PermissionKey information is specified to get Permission object. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Permission"/> class.</param>
            <returns>It populates all the memebers of Permission object and returns it. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Permission"/> class.</returns>
             <remarks>
             <para> <c>Audit:</c> This API call is not audited.</para>
             <para>Only PermissionKey object of Permission class is used for this operation. All other members of Permission class are ignored.</para>
             </remarks>
             <example>
             <para>Use below code to Get existing permission in NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     Permission permission = new Permission();
                     permission.PermissionKey = new PermissionKey();
                     permission.PermissionKey.ResourceName = "WebPage";
                     permission.PermissionKey.Operation = "Access";
                     permission.PermissionKey.NamedProtectionDomain = "MyBusinessDomain";
                     permission = client.GetPermission(permission);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.SearchPermissions(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,System.String)">
             <summary>
             	<c>SearchPermissions</c> API is used to search permissions for specified NamedProtectionDomain and search criteria.
             </summary>
             <param name="criteria">Search criteria object. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.PermissionSearchCriteria"/> class.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <param name="namedProtectionDomain">NamedProtectionDomain of the Permission.</param>
             <returns>
             returns SearchResultOfPermission matching specified search criteria Details of <see cref="T:Microsoft.IT.Security.Common.SearchResult"/> class.
             </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para> PermissionSearchCriteria is optional parameter.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
                 <para>Page Size must be between 1 and 1000.</para>
             </remarks>
             <example>
             	<para>Use below code to search top 50 permissions (sorted by ResourceName) in NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
                using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                {
                    PermissionSearchCriteria permissionSearchCriteria = new PermissionSearchCriteria();
                    permissionSearchCriteria.ResourceName = "Home";
                    permissionSearchCriteria.ResourceOperation = "Edit";
            
                    Page page = new Page { Number = 1, Size = 50 };
                    SearchResultOfPermission searchResultOfPermission = client.SearchPermissions(permissionSearchCriteria, page, "MyBusinessDomain");
            
                     //Get total matching count
                     int matchingCount = searchResultOfPermission.Total;
            
                     //Get all permissions that matched search criteria
                     Permission[] matchingPermissions = searchResultOfPermission.Results;
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetPermissionTags(System.String)">
             <summary>
             	<c>GetPermissionTags</c> API is used to get permissionTags for specified NamedProtectionDomain.
             	if NamedProtectionDomain is null,empty,or whitespace, it will get all permissionTags
             </summary>
             <param name="namedProtectionDomainName">name of the NamedProtectionDomain</param>
             <returns>
             returns list of string matching specified NamedProtectionDomain </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             	<para>Use below code to get all permissionTags (sorted by ResourceName) in NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
                using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                {
                    string[] searchResultOfPermissionTags = client.GetPermissionTags("MyBusinessDomain");
            
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.SearchPermissionToRoleAssignments(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionToRoleAssignmentsSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,System.String)">
             <summary>
             	<c>SearchPermissionToRoleAssignments</c> API is used to search permissions to role assignments for specified NamedProtectionDomain and search criteria.
             </summary>
             <param name="criteria">Search criteria object. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.PermissionToRoleAssignmentsSearchCriteria"/> class.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <param name="namedProtectionDomain">NamedProtectionDomain of the Permission.</param>
             <returns>
             returns SearchResultOfPermissionToRoleAssignments matching specified search criteria Details of <see cref="T:Microsoft.IT.Security.Common.SearchResult"/> class.
             </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para> PermissionToRoleAssignmentsSearchCriteria is optional parameter.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
                 <para>Page Size must be between 1 and 1000.</para>
             </remarks>
             <example>
             	<para>Use below code to search top 50 permissions (sorted by ResourceName) in NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
                using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                {
                    PermissionToRoleAssignmentsSearchCriteria permissionToRoleAssignmentsSearchCriteria = new PermissionToRoleAssignmentsSearchCriteria();
                    permissionToRoleAssignmentsSearchCriteria.ResourceName = "Home";
                    permissionToRoleAssignmentsSearchCriteria.ResourceOperation = "Edit";
            
                    Page page = new Page { Number = 1, Size = 50 };
                    SearchResultOfPermissionToRoleAssignments searchResultOfPermissionToRoleAssignments = client.SearchPermissionToRoleAssignments(permissionToRoleAssignmentsSearchCriteria, page, "MyBusinessDomain");
            
                     //Get total matching count
                     int matchingCount = searchResultOfPermissionToRoleAssignments.Total;
            
                     //Get all permissions that matched search criteria
                     RolePermission[] matchingRolePermissions = searchResultOfPermissionToRoleAssignments.Results;
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.CreateResource(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.Resource})">
             <summary>
             	<c>CreateResource</c> API is used to create resources in specified NamedProtectionDomain.
             </summary>
            <param name="resources">Resource collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Resource"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>ResourceKey member of Resource class is required in Create operation. NewResourceKey object will be ignored in this operation. </para>
             </remarks>
             <example>
             <para>Use below code to create a new resource in NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     Resource newResource = new Resource();
                     newResource.ResourceKey = new ResourceKey();
                     newResource.ResourceKey.ResourceName = "DefaultPage";
                     newResource.ResourceKey.NamedProtectionDomain = "MyBusinessDomain";
                     newResource.BusinessStatus = "Active";
            
                     Resource[] resources = new Resource[] { newResource };
                     client.CreateResource(resources);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UpdateResource(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.Resource})">
             <summary>
             	<c>UpdateResource</c> API is used to update existing resources in specified NamedProtectionDomain. Multiple resources
             	can be updated in a single call as API signature supports bulk operation.
             </summary>
            <param name="resources">Resource collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Resource"/> class.</param>
             <remarks>
             	<para> <c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para><c>Policy Administration Point Integration:</c> If permission is already created using this resource then permission policyset would exist in PolicyAdministrationPoint.
             	Permission policyset have two Target Attributes (ResourceName and ActionName) and two SearchTargets (ResourceName and ActionName).
             	ResouceName is referenced in both Target and SearchTarget.
             	Both these references need to update when resource is updated hence this call in turn calls PolicyAdministrationPoint.  UpdateTargetAttributes and UpdateSearchTarget API of PolicyAdministrationPoint will be used for this purpose. </para>
             	<para></para>
             	<para>ResourceKey object of Resource is mandatory for Update operation. NewResourceKey can be used with Update operation if you want to update ResourceName. Only ResourceName can be updated using NewResourceKey object.
             	You cannot update NamedProtectionDomain; if new value specified for NamedProtectionDomain, it will be ignored.</para>
             </remarks>
             <example>
             <para>Use below code to update resource which is already exist in NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     Resource resource = new Resource();
                     resource.ResourceKey = new ResourceKey();
                     resource.ResourceKey.ResourceName = "Defaultpage";
                     resource.ResourceKey.NamedProtectionDomain = "MyBusinessDomain";
            
                     resource.NewResourceKey = new ResourceKey();
                     resource.NewResourceKey.ResourceName = "HomePage";
                     resource.BusinessStatus = "Active";
            
                     Resource[] resources = new Resource[] { resource };
                     client.UpdateResource(resources);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.DeleteResource(Microsoft.IT.Security.Core.DataEntities.Resource)">
             <summary>
             	<c>DeleteResource</c> API is used to delete an existing resource in specified NamedProtectionDomain.
             </summary>
             <param name="resource">The resource to be deleted.</param>
             <remarks>
             	<para>Only ResourceKey object of Resource class is required for this operation. All other members of Resource class are ignored.</para>
             </remarks>
             <example>
             	<para>Use below code to delete existing resource from NamedProtectionDomain called MyBusinessDomain.</para>
             	<code>
                  using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                  {
                      Resource resource = new Resource();
                      resource.ResourceKey = new ResourceKey();
                      resource.ResourceKey.ResourceName = "WebPage";
                      resource.ResourceKey.NamedProtectionDomain = "MyBusinessDomain";
            
                      client.DeleteResource(resource);
                  }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetResource(Microsoft.IT.Security.Core.DataEntities.Resource)">
             <summary>
             	<c>GetResource</c> API is used to fetch existing resource in specified NamedProtectionDomain.
             	ResourceKey information is required to fetch resource object.
             </summary>
            <param name="resource">Resource object only containing ResourceKey information. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Resource"/> class.</param>
            <returns>It populates ResourceKey, Description and PolicySource memebers of Resource object and returns it. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Resource"/> class.</returns>
             <remarks>
             	<para> <c>Audit:</c> This API call is not audited.</para>
             	<para>Only ResourceKey object of Resource class is used for this operation. All other members of Resource class are ignored. All details of return resource object are populated except NewResourceKey object.</para>
             </remarks>
             <example>
             <para>Use below code to get existing resource in NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     Resource resource = new Resource();
                     resource.ResourceKey = new ResourceKey();
                     resource.ResourceKey.ResourceName = "WebPage";
                     resource.ResourceKey.NamedProtectionDomain = "MyBusinessDomain";
                     resource = client.GetResource(resource);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.SearchResources(Microsoft.IT.Security.Core.DataEntities.ResourceSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,System.String)">
             <summary>
             	<c>SearchResources</c> API is used to search resources for specified NamedProtectionDomain and search criteria.
             </summary>
             <param name="criteria">Search criteria object. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.ResourceSearchCriteria"/> class.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <param name="namedProtectionDomain">Search resources will happen within specified NamedProtectionDomain.</param>
             <returns>
             returns SearchResultOfResource matching specified search criteria Details of <see cref="T:Microsoft.IT.Security.Common.SearchResult"/> class.
             </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para>ResourceSearchCriteria is optional parameters.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
                 <para>Page Size must be between 1 and 1000.</para>
             </remarks>
             <example>
             	<para>Use below code to search upto 50 resources in NamedProtectionDomain called MyBusinessDomain.</para>
             <code>
             	 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                  {
                      ResourceSearchCriteria resourceCriteria = new ResourceSearchCriteria();
                      Page page = new Page { Number = 1, Size = 50 };
                      SearchResultOfResource searchResult = client.SearchResources(null, page, "MyBusinessDomain");
            
                      //Get total matching count
                      int matchingCount = searchResult.Total;
            
                      //Get all realms that matched search criteria
                      Resource[] matchingResults = searchResult.Results;
                  }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.CreateSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject})">
             <summary>
             	<c>CreateSubject</c> API is used to create Subjects in specified AuthenticationRealm.
             </summary>
            <param name="subjects">Subject collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>SubjectKey member of Subject class is required in Create operation. NewSubjectKey object will be ignored in this operation. </para>
             </remarks>
             <example>
             <para>Use below code to create a new Subject in corp AuthenticationRealm.</para>
             <code>
                using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                {
                    Subject subject = new Subject();
                    subject.SubjectKey = new SubjectKey();
                    subject.SubjectKey.RealmName = "corp.microsoft.com";
                    subject.SubjectKey.Key = @"redmond\\abc";
                    subject.BusinessStatus = "Active";
                    subject.ContactEmail = "abc@microsoft.com";
                    subject.ContactName = "abc";
                    subject.ContactPhone = "123 456 7890";
            
                    Subject[] subjects = new Subject[] { subject };
                    client.CreateSubject(subjects);
            
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UpdateSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject})">
             <summary>
             	<c>UpdateSubject</c> API is used to update existing Subjects in specified AuthenticationRealm.
             </summary>
            <param name="subjects">Subject collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>SubjectKey member of Subject is mandatory for Update operation. NewSubjectKey can be used with Update operation if you want to update Key of the Subject. Only Key can be updated using NewSubjectKey.
             	You cannot update RealmName using NewSubjectKey; if new value specified for RealmName, it will be ignored.</para>
             </remarks>
             <example>
             <para>Use below code to update Subject which already exists in AuthenticationRealm called redmond.</para>
             <code>
                using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                {
                    Subject subject = new Subject();
                    subject.SubjectKey = new SubjectKey();
                    subject.SubjectKey.RealmName = "corp.microsoft.com";
                    subject.SubjectKey.Key = "redmond\\myalias";
                    subject.ContactName = "my full name";
            
                    Subject[] subjects = new Subject[] { subject };
                    client.UpdateSubject(subjects);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.DeleteSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
             <summary>
             	<c>DeleteSubject</c> API is used to delete an existing Subjects in specified AuthenticationRealm.
             </summary>
            <param name="subject"> Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>Only SubjectKey object of Subject class is required for this operation. All other members of Subject class are ignored.</para>
             </remarks>
             <example>
             <para>Use below code to delete existing Subject from corp AuthenticationRealm.</para>
             <code>
               using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
               {
                   Subject subject = new Subject();
                   subject.SubjectKey = new SubjectKey();
                   subject.SubjectKey.Key = "redmond\abc";
                   subject.SubjectKey.RealmName = "corp.microsoft.com";
                   int key = client.DeleteSubject(subject);
               }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.DeleteSubjectByImmutableId(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectImmutableKey})" -->
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
             <summary>
             	<c>GetSubject</c> API is used to fetch existing Subject in specified AuthenticationRealm.
             	SubjectKey information is required to fetch Subject object.
             </summary>
             <param name="subject">Subject object only containing SubjectKey information. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectKey"/> class.</param>
             <returns>Subject object populated with SubjectKey, ContactName, ContactPhone and ContactEmail members etc. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             	<para>Only SubjectKey object of Subject class is used for this operation. All other members of Subject class are ignored.
             	All details of Subject object will be populated except NewSubjectKey object.</para>
             </remarks>
             <example>
             <para>Use below code to get existing Subject in AuthenticationRealm called redmond.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     Subject subject = new Subject();
                     subject.SubjectKey = new SubjectKey();
                     subject.SubjectKey.Key = "redmond\\abc";
                     subject.SubjectKey.RealmName = "corp.microsoft.com";
            
                     subject = client.GetSubject(subject);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.SearchSubjects(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
             <summary>
             	<c>SearchSubjects</c> API is used to search Subjects as per specified search criteria.
             </summary>
             <param name="criteria">Search criteria object. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectSearchCriteria"/> class.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <returns>Returns SearchResult&lt;Subject&gt; matching specified search criteria Details of <see cref="T:Microsoft.IT.Security.Common.SearchResult"/> class.</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para>SearchSearchCriteria is optional parameter to pass.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
                 <para>Page Size must be between 1 and 1000.</para>
                 <para>When using RoleName and/or NamedProtectionDomainName criteria, this API doesn't return results if the subject's assignment to a role has expired. 
                 For more information see bug # 488165</para>
             </remarks>
             <example>
             <para>Use below code to search Subjects in corp AuthenticationRealm.</para>
             <code>
              using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
              {
                  SubjectSearchCriteria criteria = new SubjectSearchCriteria();
                  criteria.RealmName = "redmond";
                  Page page = new Page { Number = 1, Size = 10 };
                  SearchResultOfSubject searchResult = client.SearchSubjects(criteria, page);
              }
             </code>
             <para>
             Use below code to search all users assigned to the admin role in corp authentical realm.
             </para>
             <code>
              using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
              {
                  SubjectSearchCriteria criteria = new SubjectSearchCriteria();
                  criteria.RoleName = "Admin";
                  Page page = new Page { Number = 1, Size = 100 };
                  SearchResultOfSubject searchResult = client.SearchSubjects(criteria, page);
                  //Get total matching count
                  int matchingCount = searchResult.Total;
            
                  //Get all subjects that matched search criteria
                  Subject[] matchingResults = searchResult.Results;
              }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.CreateAuthenticationRealm(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm})">
             <summary>
             	<c>CreateAuthenticationRealm</c> API is used to create Realms in the system. Multiple Realms
             	can be created in a single call as API signature supports bulk operation.
             </summary>
            <param name="realms">AuthenticationRealm collection to support bulk operation.
            Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.AuthenticationRealm"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>RealmKey member of AuthenticationRealm class is required in Create operation.
             	TrustLevel property of AuthenticationRealm class should not be used as it will be deprecated in the future.</para>
             	<para>This API can only be called by Support Engineers.</para>
             </remarks>
             <example>
             <para>Use below code to create a new AuthenticationRealm in system.</para>
             <code>
                   using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                   {
                       AuthenticationRealm realm = new AuthenticationRealm();
                       realm.RealmKey = new RealmKey();
                       realm.RealmKey.AuthenticationRealmName = "corp.microsoft.com";
                       realm.Description = "corp domain";
                       realm.Source = "microsoft";
                       AuthenticationRealm[] realms = new AuthenticationRealm[] { realm };
                       client.CreateAuthenticationRealm(realms);
                   }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UpdateAuthenticationRealm(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm})">
             <summary>
             	<c>UpdateAuthenticationRealm</c> API is used to update existing Realms in the system. Multiple Realms
             	can be updated in a single call as API signature supports bulk operation.
             </summary>
            <param name="realms">AuthenticationRealm collection to support bulk operation.
            Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.AuthenticationRealm"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>RealmKey member of AuthenticationRealm is mandatory for Update operation. NewRealmKey can be used with Update operation if you want to update Name of the AuthenticationRealm.</para>
             </remarks>
             <example>
             <para>Use below code to update AuthenticationRealm which already exists in system.</para>
             <code>
               using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
               {
                   AuthenticationRealm realm = new AuthenticationRealm();
                   realm.RealmKey = new RealmKey();
                   realm.RealmKey.AuthenticationRealmName = "corp.microsoft.com";
                   realm.Description = "corp domain";
                   realm.Source = "microsoft";
                   realm.NewRealmKey = new RealmKey();
                   realm.NewRealmKey.AuthenticationRealmName = "corp.microsoft.com";
                   AuthenticationRealm[] realms = new AuthenticationRealm[] { realm };
                   client.UpdateAuthenticationRealm(realms);
               }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.RequestDeleteAuthenticationRealm(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm)">
             <summary>
             <c>RequestDeleteAuthenticationRealm</c> method is used to get the deleteRequestKey which is used in DeleteAuthenticationRealm API to delete the realm from the system.
             </summary>
             <param name="realm">The realm to be deleted</param>
             <returns>Returns the delete request key for the realm to be deleted.</returns>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <code>
                  using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                  {
                      AuthenticationRealm realm = new AuthenticationRealm();
                      realm.RealmKey = new RealmKey();
                      realm.RealmKey.AuthenticationRealmName = "corp.microsoft.com";
                      string deleteRequestKey = client.RequestDeleteAuthenticationRealm(realm);
                  }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.DeleteAuthenticationRealm(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm,System.String)">
             <summary>
             	<c>DeleteAuthenticationRealm</c> API is used to delete existing Realms from the system.
             </summary>
             <param name="realm">The realm to be deleted.</param>
             <param name="deleteRequestKey">The delete request key generated by calling the DeleteAuthenticationRealm api.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>Only RealmKey object of AuthenticationRealm class is required for this operation. All other members of AuthenticationRealm class are ignored.</para>
             </remarks>
             <example>
             	<para>Use below code to delete existing AuthenticationRealm from the system.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     AuthenticationRealm realm = new AuthenticationRealm();
                     realm.RealmKey = new RealmKey();
                     realm.RealmKey.AuthenticationRealmName = "corp.microsoft.com";
                     string deleteRequestKey = client.RequestDeleteAuthenticationRealm(realm);
                     client.DeleteAuthenticationRealm(realm, deleteRequestKey);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetAuthenticationRealm(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm)">
             <summary>
             	<c>GetAuthenticationRealm</c> API is used to fetch existing AuthenticationRealm.
             	RealmKey information is required to fetch AuthenticationRealm object.
             </summary>
            <param name="realm">AuthenticationRealm object only containing RealmKey information. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.RealmKey"/> class.</param>
            <returns>AuthenticationRealm object populated with RealmKey, Description and Source members. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.AuthenticationRealm"/> class.</returns>
             <remarks>
                 <para><c>Audit:</c> This API call is not audited.</para>
             	<para>Only RealmKey object of AuthenticationRealm class is used for this operation. All other members of AuthenticationRealm class are ignored. All details of returned AuthenticationRealm object will be populated except NewRealmKey object.</para>
             </remarks>
             <example>
             <para>Use below code to get details for an existing AuthenticationRealm.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     AuthenticationRealm realm = new AuthenticationRealm();
                     realm.RealmKey = new RealmKey();
                     realm.RealmKey.AuthenticationRealmName = "corp.microsoft.com";
                     realm = client.GetAuthenticationRealm(realm);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.SearchAuthenticationRealms(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RealmSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
             <summary>
             	<c>SearchAuthenticationRealms</c> API is used to search Realms as per specified search criteria.
             </summary>
             <param name="criteria">Search criteria object. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.RealmSearchCriteria"/> class.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <returns>Returns SearchResult&lt;AuthenticationRealm&gt; matching specified search criteria Details of <see cref="T:Microsoft.IT.Security.Common.SearchResult"/> class.</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para>RealmSearchCriteria is optional parameter to pass.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
                 <para>Page Size must be between 1 and 1000.</para>
             </remarks>
             <example>
             <para>Use below code to search all realms in the system that begin with corp.</para>
             <code>
             using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
             {
                 RealmSearchCriteria criteria = new RealmSearchCriteria();
                 Page page = new Page();
                 page.Number = 1;
                 page.Size = 10;
                 criteria.Name = "corp*";
                 SearchResultOfAuthenticationRealm searchResult = client.SearchAuthenticationRealms(criteria, page);
            
                 //Get total matching count
                 int matchingCount = searchResult.Total;
            
                 //Get all realms that matched search criteria
                 AuthenticationRealm[] matchingResults = searchResult.Results;
             }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.SearchSyncedAccountTypes(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RealmSearchCriteria)">
             <summary>
             	<c>SearchSyncedAccountTypes</c> API is used to return a list of Realm, AccountType and their IsSynced property per specified search criteria.
             </summary>
             <param name="criteria">Search criteria object. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.RealmSearchCriteria"/> class.</param>
             <returns>Returns List of synced &lt;AuthenticationRealmAccountType&gt; matching specified search criteria.</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para>RealmSearchCriteria is optional parameter to pass.</para>
             </remarks>
             <example>
             <para>Use below code to search all synced realm, account type in the system that begin with corp.</para>
             <code>
             using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
             {
                 RealmSearchCriteria criteria = new RealmSearchCriteria();
                 criteria.Name = "corp*";
                 List searchResult = client.SearchSyncedAccountTypes(criteria);
            
             }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.AssignSubjectToRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
             <summary>
             <c>AssignSubjectToRole</c> API is used to assign subjects to role and hence all subjects get permissions associated with role.
             If the subject has already assigned with the role, it will be  overwritten with new assigning info.
             </summary>
             <param name="subjects">Subject collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <param name="role">Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>All specified subjects and role should exist in the system before you can perform assignment operation.</para>
             </remarks>
             <example>
             <para>Use below code to assign subjects to role.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     //Create Subject object 1 with SubjectKey object
                     Subject subject1 = new Subject();
                     subject1.SubjectKey = new SubjectKey();
                     subject1.SubjectKey.RealmName = "corp.microsoft.com";
                     subject1.SubjectKey.Key = @"redmond\abc1";
                     
                     //Create Subject object 2 with SubjectKey object
                     Subject subject2 = new Subject();
                     subject2.SubjectKey = new SubjectKey();
                     subject2.SubjectKey.RealmName = "corp.microsoft.com";
                     subject2.SubjectKey.Key = @"redmond\abc2";
            
                     //Create Role object with RoleKey object
                     Role role = new Role();
                     role.RoleKey = new RoleKey();
                     role.RoleKey.RoleName = "Owner";
                     role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                     //Assign Subjects To Role
                     client.AssignSubjectToRole(new Subject[] { subject1, subject2 }, role);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.CreateSubjectToRoleAssignment(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment})">
             <summary>
             <c>CreateSubjectToRoleAssignment</c> API is used to create a subject assignment that requires start and end dates.
             </summary>
             <param name="subjectAssignments">SubjectAssignment collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectAssignment"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para></para>
             	<para>All specified subjects and role should exist in the system before you can perform assignment operation.</para>
             </remarks>
             <example>
             <para>Use below code to assign subject to role assignment.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     Subject subject = new Subject();
                     subject.SubjectKey.Key = @"fareast\abc";
                     subject.SubjectKey.RealmName = "copr.microsoft.com";
            
                     SubjectAssignmentMethod sam = SubjectAssignmentMethod.Manual;
                     //Create Role object with RoleKey object
                     Role role = new Role();
                     role.RoleKey = new RoleKey();
                     role.RoleKey.RoleName = "Owner";
                     role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                     SubjectAssignment subjectAssignment1 = new SubjectAssignment(subject, sam);
                     subjectAssignment1.Roles.Add(role);
                     subjectAssignment1.UtcStartDateTime = DateTime.Now;
                     SubjectAssignments.UtcEndDateTime = DateTime.MaxValue;
                     client.CreateSubjectToRoleAssignment(new SubjectAssignment[] { subjectAssignment1 });
                  }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UpdateSubjectToRoleAssignment(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment})">
             <summary>
             <c>UpdateSubjectToRoleAssignment</c> API is used to update start and end dates of SubjectAssignments.
             </summary>
             <param name="subjectAssignments">Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectAssignment"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
                 <para></para>
             	<para>All specified subject/roles and SubjectAssignments should exist in the system before you can perform update operation.</para>
             </remarks>
             <example>
             <para>Use below code to update UTCStartDateTime and UTCEndDateTime of SubjectAssignments.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     Subject subject = new Subject();
                     subject.SubjectKey.Key = @"fareast\abc";
                     subject.SubjectKey.RealmName = "copr.microsoft.com";
            
                     SubjectAssignmentMethod sam = SubjectAssignmentMethod.Manual;
                     //Create Role object with RoleKey object
                     Role role = new Role();
                     role.RoleKey = new RoleKey();
                     role.RoleKey.RoleName = "Owner";
                     role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                     SubjectAssignment subjectAssignment1 = new SubjectAssignment(subject, sam);
                     subjectAssignment1.Roles.Add(role);
                     subjectAssignment1.UtcStartDateTime = DateTime.Now;
                     SubjectAssignments.UtcEndDateTime = DateTime.MaxValue;
                     client.UpdateSubjectToRoleAssignment(new SubjectAssignment[] { subjectAssignment1 });
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.AssignRoleToSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
             <summary>
             <c>AssignRoleToSubject</c> API is used to assign roles to subject and hence subject gets permissions associated with all roles.
             </summary>
             <param name="roles">Roles collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <param name="subject">Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <remarks>
                 <para> <c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>All specified roles and subject should exist in the system before you can perform assignment operation.</para>
             </remarks>
             <example>
             <para>Use below code to assign subjects to owner and admin roles.</para>
             <code>
              using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
              {
                  //Create Role object with RoleKey object
                  Role role = new Role();
                  role.RoleKey = new RoleKey();
                  role.RoleKey.RoleName = "Owner";
                  role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                  Role role2 = new Role();
                  role2.RoleKey = new RoleKey();
                  role2.RoleKey.RoleName = "Admin";
                  role2.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                  //Create Subject object with SubjectKey object
                  Subject subject = new Subject();
                  subject.SubjectKey = new SubjectKey();
                  subject.SubjectKey.RealmName = "corp.microsoft.com";
                  subject.SubjectKey.Key = @"redmond\abc";
                  //Assign Roles To Subject
                  client.AssignRoleToSubject(new Role[] { role }, subject);
              }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UnassignSubjectFromRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
             <summary>
             <c>UnassignSubjectFromRole</c> API is used to unassign subjects from role and hence permissions associated with role are revoked from subjects.
             </summary>
             <param name="subjects">Subject collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <param name="role">Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <remarks>
                 <para> <c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>All specified subjects and role should exist in the system before you can perform unassignment operation.</para>
             </remarks>
             <example>
             <para>Use below code to unassign subjects from role.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     //Create Subject object 1 with SubjectKey object
                     Subject subject1 = new Subject();
                     subject1.SubjectKey = new SubjectKey();
                     subject1.SubjectKey.RealmName = "corp.microsoft.com";
                     subject1.SubjectKey.Key = @"redmond\abc1";
                     
                     //Create Subject object 2 with SubjectKey object
                     Subject subject2 = new Subject();
                     subject2.SubjectKey = new SubjectKey();
                     subject2.SubjectKey.RealmName = "corp.microsoft.com";
                     subject2.SubjectKey.Key = @"redmond\abc2";
            
                     //Create Role object with RoleKey object
                     Role role = new Role();
                     role.RoleKey = new RoleKey();
                     role.RoleKey.RoleName = "Owner";
                     role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                     //Unassign Subjects from Role
                     client.UnassignSubjectFromRole(new Subject[] { subject1, subject2 }, role);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UnassignRoleFromSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
             <summary>
             <c>UnassignRoleFromSubject</c> API is used to unassign roles from subject and hence all permissions associated with all roles are revoked from subject.
             </summary>
             <param name="roles">Roles collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Role"/> class.</param>
             <param name="subject">Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.Subject"/> class.</param>
             <returns></returns>
             <remarks>
                 <para> <c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             	<para>All specified roles and subject should exist in the system and roles should already be assigned to subject before you can perform unassignment operation.</para>
             </remarks>
             <example>
             <para>Use below code to assign subjects to role.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     //Create Role object with RoleKey object
                     Role role = new Role();
                     role.RoleKey = new RoleKey();
                     role.RoleKey.RoleName = "Owner";
                     role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                     //Create Subject object with SubjectKey object
                     Subject subject = new Subject();
                     subject.SubjectKey = new SubjectKey();
                     subject.SubjectKey.RealmName = "corp.microsoft.com";
                     subject.SubjectKey.Key = @"redmond\abc";
                     //Unassign Roles from Subject
                     client.UnassignRoleFromSubject(new Role[] { role }, subject);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.SearchSubjectToRoleAssignments(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,System.String)">
             <summary>
             	<c>SearchSubjectToRoleAssignments</c> API is used to search SubjectsToRoleAssignments as per specified search criteria.
             </summary>
             <param name="criteria">Search criteria object. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectToRoleAssignmentSearchCriteria"/> class.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <param name="NamedProtectionDomainName"> The Named protection domain name</param>
             <returns>Returns SearchResult&lt;SubjectAssignment&gt; matching specified search criteria Details of <see cref="T:Microsoft.IT.Security.Common.SearchResult"/> class.</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para>SearchSearchCriteria is optional parameter to pass.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
                 <para>Page Size must be between 1 and 1000.</para>
             </remarks>
             <example>
             <para>Use below code to search SubjectAssignments in corp AuthenticationRealm .</para>
             <code>
              using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
              {
                  SubjectToRoleAssignmentSearchCriteria criteria = new SubjectToRoleAssignmentSearchCriteria();
                  criteria.RoleName = "admin";
                  criteria.RealmName = "corp.microsoft.com";
            
                  Page page = new Page { Number = 1, Size = 100 };
                  SearchResultOfSubjectAssignment searchResult = client.SearchSubjectToRoleAssignments(criteria, page, "MyBusinessDomain");
            
                  //Get total matching count
                  int matchingCount = searchResult.Total;
            
                  //Get all assignments that matched search criteria
                  SubjectAssignment[] matchingResults = searchResult.Results;
              }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetSubjectAssignments(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.DataEntities.Page,System.Boolean)">
             <summary>
             	<c>SearchSubjectToRoleAssignments</c> API is used to search SubjectsToRoleAssignments as per specified search criteria.
             </summary>
             <param name="criteria">Search criteria object. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectToRoleAssignmentSearchCriteria"/> class.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <param name="NamedProtectionDomainName"> The Named protection domain name</param>
             <returns>Returns SearchResult&lt;SubjectAssignment&gt; matching specified search criteria Details of <see cref="T:Microsoft.IT.Security.Common.SearchResult"/> class.</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para>SearchSearchCriteria is optional parameter to pass.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
                 <para>Page Size must be between 1 and 1000.</para>
             </remarks>
             <example>
             <para>Use below code to search SubjectAssignments in corp AuthenticationRealm .</para>
             <code>
              using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
              {
                 Role role = new Role();
                 role.RoleKey = new RoleKey();
                 role.RoleKey.RoleName = "Owner";
                 role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
            
                 Page page = new Page { Number = 1, Size = 100 };
                 SearchResultOfSubjectAssignment searchResult = client.GetSubjectAssignments(role, page, true);
            
                 //Get total matching count
                 int matchingCount = searchResult.Total;
            
                 //Get all assignments that matched search criteria
                 SubjectAssignment[] matchingResults = searchResult.Results;
              }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.CreateAttribute(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.AttributeEntity})">
             <summary>
             	<c>CreateAttribute</c> API is used to create Attributes in specified NamedProtectionDomain. Multiple Attributes
             	can be created in a single call as API signature supports bulk operation.
             </summary>
            <param name="attributes">Attribute entity collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.Common.AttributeEntity"/> class.</param>
             <remarks>
                 <para>NOTE: This method supports bulk operations and the bulk limit is 20.</para>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to create a attribute.</para>
             <code>
            using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
            {
                AttributeIssuer issuer = new AttributeIssuer();
                AttributeIssuerKey issuerKey = new AttributeIssuerKey();
                issuerKey.IssuerName = "TestIssuer";
                issuer.AttributeIssuerKey = issuerKey;
                NamedProtectionDomainKey npdKey = new NamedProtectionDomainKey();
                npdKey.NamedProtectionDomainName = "ITAuthorizeInternal";
                NamedProtectionDomain npd = new NamedProtectionDomain();
                npd.NamedProtectionDomainKey = npdKey;
                NamedProtectionDomain[] npds = new NamedProtectionDomain[] { npd };
                AttributeEntity attribute = new AttributeEntity();
                AttributeEntity[] attributeList = new AttributeEntity[] { attribute };
                AttributeKey attributeKey = new AttributeKey();
                attributeKey.AttributeName = "TestAttribute11";
                attribute.AttributeKey = attributeKey;
                attribute.AttributeType = AttributeType.Subject;
                attribute.DataType = AttributeDataType.String;
                attribute.Issuer = issuer;
                attribute.IsGlobal = true;
                attribute.OwnerNamedProtectionDomains = npds;
                client.CreateAttribute(attributeList);
            }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UpdateAttribute(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.AttributeEntity})">
             <summary>
             	<c>UpdateAttribute</c> API is used to update existing Attribute entities in the system. Multiple Attribute entities
             	can be updated in a single call as API signature supports bulk operation.
             </summary>
            <param name="attributes">Attribute  collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.Common.AttributeEntity"/> class.</param>
             <remarks>
                 <para>NOTE: This method supports bulk operations and the bulk limit is 20.</para>
             	<para><c>Audit:</c> This API call is audited.</para>
             	<para>AttributeKey member of Attribute is mandatory for Update operation. NewAttributeKey can be used with Update operation if you want to update Name of the Attribute entity.</para>
             	<para>In return Attribute collection, NewAttributeKey member of Attribute entity class will be null and Name of AttributeKey will be updated with NewAttributeKey's Name only if it is not null or empty.</para>
             </remarks>
             <example>
             <para>Use below code to update the attribute.</para>
             <code>
            using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
            {
                AttributeIssuer issuer = new AttributeIssuer();
                AttributeIssuerKey issuerKey = new AttributeIssuerKey();
                issuerKey.IssuerName = "TestIssuer";
                issuer.AttributeIssuerKey = issuerKey;
                NamedProtectionDomainKey npdKey = new NamedProtectionDomainKey();
                npdKey.NamedProtectionDomainName = "ITAuthorizeInternal";
                NamedProtectionDomain npd = new NamedProtectionDomain();
                npd.NamedProtectionDomainKey = npdKey;
                NamedProtectionDomain[] npds = new NamedProtectionDomain[] { npd };
                AttributeEntity attribute = new AttributeEntity();
                AttributeEntity[] attributeList = new AttributeEntity[] { attribute };
                AttributeKey attributeKey = new AttributeKey();
                attributeKey.AttributeName = "TestAttribute11";
                attribute.AttributeKey = attributeKey;
                attribute.AttributeType = AttributeType.Subject;
                attribute.DataType = AttributeDataType.String;
                attribute.Issuer = issuer;
                attribute.IsGlobal = true;
                attribute.OwnerNamedProtectionDomains = npds;
                AttributeKey newKey = new AttributeKey();
                newKey.AttributeName = "TestAttribute12";
                attribute.NewAttributeKey = newKey;
                client.UpdateAttribute(attributeList);
            }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.RequestDeleteAttribute(Microsoft.IT.Security.Core.DataEntities.AttributeEntity)">
             <summary>
             <c>RequestDeleteAttribute</c> API is used to get the confirmation token.
             </summary>
             <param name="attribute">attribute to be deleted </param>
             <returns>String</returns>
             <example>
             <para></para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                   AttributeEntity attribute = new AttributeEntity();
                   AttributeKey attributeKey = new AttributeKey();
                   attributeKey.AttributeName =  "TestAttribute12";
                   attribute.AttributeKey = attributeKey;
                   string deleteRequestKey = client.RequestDeleteAttribute(attribute);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.DeleteAttribute(Microsoft.IT.Security.Core.DataEntities.AttributeEntity,System.String)">
             <summary>
             	<c>DeleteAttribute</c> API is used to delete existing Attributes in specified NamedProtectionDomain.
             </summary>
            <param name="attribute">Attribute to be deleted. Details of <see cref="T:Microsoft.IT.Security.Common.AttributeEntity"/> class.</param>
            <param name="deleteRequestKey">Confirmation key </param>
             <returns>int</returns>
             <remarks>
             	<para><c>Audit: </c>This API call is audited.</para>
             	<para><c>Cacade Delete:</c> It should also remove all the associated objects. [Out of scope in current release].</para>
             	<para></para>
             	<para>Only AttributeKey object of Attribute class is required for this operation. All other members of Attribute class are ignored.</para>
             </remarks>
             <example>
             <para>Use below code to delete existing Attribute. </para>
             <code>
            using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
            {
                AttributeEntity attribute = new AttributeEntity();
                AttributeKey attributeKey = new AttributeKey();
                attributeKey.AttributeName =  "TestAttribute12";
                attribute.AttributeKey = attributeKey;
                string deleteRequestKey = client.RequestDeleteAttribute(attribute);
                client.DeleteAttribute(attribute, deleteRequestKey);
            }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetAttribute(Microsoft.IT.Security.Core.DataEntities.AttributeEntity)">
             <summary>
             	<c>GetAttribute</c> API is used to fetch existing Attribute specified in NamedProtectionDomain from database. It populates the Attribute Issuers and Attribute sources .
             	AttributeKey information is required to fetch Attribute object.
             </summary>
            <param name="attribute">Attribute entity object only containing Key information. Details of <see cref="T:Microsoft.IT.Security.Common.AttributeEntity.AttributeKey"/> class.</param>
            <returns>Attribute object populated with AttributeKey and Description members. Details of <see cref="T:Microsoft.IT.Security.Common.AttributeEntity.Attribute"/> class.</returns>
             <remarks>
                 <para><c>Audit:</c> This API call is not audited.</para>
                 <para>Only AttributeKey object of Attribute class is used for this operation. All other members of Attribute class are ignored. All details of returned Attribute object will be populated except NewAttributeKey object.</para>
             </remarks>
             <example>
             <para>Use below code to get existing Attribute. </para>
             <code>
            using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
            {
                AttributeEntity attributeEntity = new AttributeEntity();
                AttributeKey attributeKey = new AttributeKey();
                attributeKey.AttributeName = "TestAttribute12";
                attributeEntity.AttributeKey = attributeKey;
                AttributeEntity resultAttribute = client.GetAttribute(attributeEntity);
            }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.RequestDeleteAttributeValue(Microsoft.IT.Security.Core.DataEntities.AttributeEntity,System.String,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission)">
             <summary>
             Request Delete attribute value is used to get confirmation key  to send it to DeleteAttributeValue
             </summary>
             <param name="attribute">attribute name</param>
             <param name="attributeValue">value to be deleted </param>
             <param name="role">role associated with the value</param>
             <param name="permission">permission associated with the vaue</param>
             <returns>string</returns>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.DeleteAttributeValue(Microsoft.IT.Security.Core.DataEntities.AttributeEntity,System.String,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,System.String)">
             <summary>
             Delete Attribute values is used to delete attribute values for given attribute .
             </summary>
             <param name="attribute">attribute name</param>
             <param name="deleteRequestKey">confirmation key </param>
             <param name="attributeValue">Value of the attribute </param>
             <param name="permission">Permission associated with the value </param>
             <param name="role">Role associated with the value</param>
             <returns>int</returns>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.SearchAttributes(Microsoft.IT.Security.Core.DataEntities.AttributeSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
             <summary>
             	<c>SearchAttributes</c> API is used to search Attributes as per specified search criteria.
             </summary>
             <param name="criteria">Search criteria object. Details of <see cref="T:Microsoft.IT.Security.Common.AttributeSearchCriteria"/> class.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para> AttributeSearchCriteria is optional parameters to pass.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
                 <para>Page Size must be between 1 and 1000.</para>
             </remarks>
             <example>
             <para>Use below code to search global Attributes in the system.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     AttributeSearchCriteria criteria = new AttributeSearchCriteria();
                     criteria.IsGlobal = true;
            
                     Page page = new Page { Number = 1, Size = 50 };
            
                     SearchResultOfAttributeEntity result = client.SearchAttributes(criteria, page);
            
                     //Get total matching count
                     int matchingCount = result.Total;
            
                     //Get all attributes that matched search criteria
                     AttributeEntity[] matchingResults = result.Results;
                 }
             </code>
             </example>
             <returns>All attributes matching the specified criteria.</returns>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.CreateAttributeIssuer(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.AttributeIssuer})">
             <summary>
             	<c>CreateAttributeIssuer</c> API is used to create AttributeIssuers  .Multiple AttributeIssuers
             	can be created in a single call as API signature to supports bulk operation.
             </summary>
            <param name="attributeIssuers">AttributeIssuers entity collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.Common.Server.AttributeIssuer"/> class.</param>
             <remarks>
                 <para>NOTE: This method supports bulk operations and the bulk limit is 20.</para>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to create a Attribute Issuer</para>
             <code>
              using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                {
                    NamedProtectionDomainKey npdKey=new NamedProtectionDomainKey();
                    npdKey.NamedProtectionDomainName="ITAuthorizeInternal";
                    NamedProtectionDomain npd=new NamedProtectionDomain();
                    npd.NamedProtectionDomainKey=npdKey;
                    NamedProtectionDomain[] npds=new NamedProtectionDomain[]{npd};
                    AttributeIssuerKey attributeIssuerKey = new AttributeIssuerKey();
                    attributeIssuerKey.IssuerName = "issuer";
                    AttributeIssuer attributeIssuer = new AttributeIssuer();
                    attributeIssuer.AttributeIssuerKey = attributeIssuerKey;
                    attributeIssuer.OwnerNamedProtectionDomains=npds;
                    AttributeIssuer[] attributeIssuers=new AttributeIssuer[]{attributeIssuer} ;
                    client.CreateAttributeIssuer(attributeIssuers);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UpdateAttributeIssuer(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.AttributeIssuer})">
             <summary>
             	<c>UpdateAttributeIssuer</c> API is used to Update AttributeIssuers details.Multiple AttributeIssuers
             	can be updated in a single call as API signature supports bulk operation.
             </summary>
            <param name="attributeIssuers">AttributeIssuers entity collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.Common.Server.AttributeIssuer"/> class.</param>
             <remarks>
                 <para>NOTE: This method supports bulk operations and the bulk limit is 20.</para>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to Update  Attribute Issuer details.</para>
             <code>
                using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                    {
                        AttributeIssuerKey attributeIssuerKey = new AttributeIssuerKey();
                        attributeIssuerKey.IssuerName = "issuer";
                        AttributeIssuerKey newAttributeIssuerKey = new AttributeIssuerKey();
                        newAttributeIssuerKey.IssuerName = "issuerNEW";
                        AttributeIssuer attributeIssuer = new AttributeIssuer();
                        attributeIssuer.AttributeIssuerKey = attributeIssuerKey;
                        attributeIssuer.NewAttributeIssuerKey=newAttributeIssuerKey;
                        AttributeIssuer[] attributeIssuers=new AttributeIssuer[]{attributeIssuer} ;
                       client.UpdateAttributeIssuer(attributeIssuers);
                    }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.RequestDeleteAttributeIssuer(Microsoft.IT.Security.Core.DataEntities.AttributeIssuer)">
             <summary>
             	<c>RequestDeleteAttributeIssuer</c> API is used to generate a key that is required to delete the Attribute Issuer from the system. This key must be
             	passed to the DeleteAttributeIssuer API in order to actually delete the Attribute Issuer from the system.
             </summary>
            <param name="attributeIssuer">AttributeIssuer to be deleted. Details of <see cref="T:Microsoft.IT.Security.Common.Server.AttributeIssuer"/> class.</param>
             <remarks>
             	<para><c>Audit: </c>This API call is audited.</para>
             	<para></para>
             	<para>Only AttributeIssuerKey object of AttributeIssuer class is required for this operation. All other members of Attribute class are ignored.</para>
             </remarks>
             <example>
             <para>Use below code to delete existing AttributeIssuer with issuer name "abc".</para>
             <code>
                   using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                         AttributeIssuer attributeIssuer = new AttributeIssuer();
                         AttributeIssuerKey attributeIssuerKey = new AttributeIssuerKey();
                         attributeIssuerKey.IssuerName = "abc";
                         attributeIssuer.AttributeIssuerKey = attributeIssuerKey;
                         client.RequestDeleteAttributeIssuer(attributeIssuer);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.DeleteAttributeIssuer(Microsoft.IT.Security.Core.DataEntities.AttributeIssuer,System.String)">
             <summary>
             	<c>DeleteAttributeIssue</c> API is used to delete existing AttributeIssuer.
             </summary>
            <param name="attributeIssuer">AttributeIssuer to be deleted. Details of <see cref="T:Microsoft.IT.Security.Common.Server.AttributeIssuer"/> class.</param>
            <param name="deleteRequestKey">confirmation key </param>
            <returns>int</returns>
             <remarks>
             	<para><c>Audit: </c>This API call is audited.</para>
             	<para><c>Cacade Delete:</c> It should also remove all the associated objects. </para>
             	<para></para>
             	<para>Only AttributeIssuerKey object of AttributeIssuer class is required for this operation. All other members of Attribute class are ignored.</para>
             </remarks>
             <example>
             <para>Use below code to delete existing AttributeIssuer named 'issuer123'</para>
             <code>
               using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                    {
                        string requestDeleteKey = String.Empty;
                        AttributeIssuer attributeIssuer = new AttributeIssuer();
                        AttributeIssuerKey attributeIssuerKey = new AttributeIssuerKey();
                        attributeIssuerKey.IssuerName = "abc";
                        attributeIssuer.AttributeIssuerKey = attributeIssuerKey;
                        requestDeleteKey = client.RequestDeleteAttributeIssuer(attributeIssuer);
                        client.DeleteAttributeIssuer(attributeIssuer,requestDeleteKey);
            
                    }
            
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetAttributeIssuer(Microsoft.IT.Security.Core.DataEntities.AttributeIssuer)">
             <summary>
             	<c>GetAttributeIssuer</c> API is used to fetch existing AttributeIssuer from database. It populates the Issuer details  and Attribute sources .
             	AttributeIssuerKey information is required to fetch AttributeIssuer object.
             </summary>
            <param name="attributeIssuer">AttributeIssuer entity object only containing Key information. Details of <see cref="T:Microsoft.IT.Security.Common.Server.AttributeIssuer.AttributeIssuerKey"/> class.</param>
            <returns>AttributeIssuer object populated with AttributeIssuerKey and Description members. Details of <see cref="T:Microsoft.IT.Security.Common.Server.AttributeIssuer.AttributeIssuerKey"/> class.</returns>
             <remarks>
                 <para><c>Audit:</c> This API call is not audited.</para>
             	<para>Only AttributeIssuerKey object of AttributeIssuer class is used for this operation. All other members of AttributeIssuer class are ignored. All details of returned AttributeIssuer object will be populated except NewAttributeIssuerKey object.</para>
             </remarks>
             <example>
             <para>Use below code to get existing AttributeIssuer .</para>
             <code>
               using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                    {
                        AttributeIssuerKey attributeIssuerKey = new AttributeIssuerKey();
                        attributeIssuerKey.IssuerName = "issuer123";
                        AttributeIssuer attributeIssuer = new AttributeIssuer();
                        attributeIssuer.AttributeIssuerKey = attributeIssuerKey;
                        AttributeIssuer result = client.GetAttributeIssuer(attributeIssuer);
                    }
            
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.SearchAttributeIssuers(Microsoft.IT.Security.Core.DataEntities.AttributeIssuerSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
             <summary>
             	<c>SearchAttributeIssuers</c> API is used to search Attribute Issuers as per specified search criteria.
             </summary>
             <param name="criteria">Search criteria object. Details of <see cref="T:Microsoft.IT.Security.Common.AttributeIssuerSearchCriteria"/> class.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <returns> All attributes issuers matching search criteria</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
                 <para> AttributeIssuerSearchCriteria is optional parameters to pass.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
                 <para>Page Size must be between 1 and 1000.</para>
             </remarks>
             <example>
             <para>Use below code to search global Attribute Issuers in the system.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     AttributeIssuerSearchCriteria criteria = new AttributeIssuerSearchCriteria();
                     criteria.IsGlobal = true;
            
                     Page page = new Page { Number = 1, Size = 50 };
                     SearchResultOfAttributeIssuer result = client.SearchAttributeIssuers(criteria, page);
            
                     //Get total matching count
                     int matchingCount = result.Total;
            
                     //Get all attribute issuers that matched search criteria
                     AttributeIssuer[] matchingResults = result.Results;
                 }
             </code>
             </example>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
             <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.CreatePrivilegeAssignment(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment})">
             <summary>
             	<c>CreatePrivilegeAssignment</c> API is used to create Privilege Assignments. Multiple privilege assignments can be created in a single call as API supports bulk operation.
             </summary>
            <param name="privilegeAssignments">PrivilegeAssignment collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.PrivilegeAssignment"/> class.</param>
             <remarks>
                 <para> <c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             </remarks>
             <remarks>
             <para>
                 The dates passed as part of the PrivilegeAssignment objects in the privilegeAssginment collection should be converted to Coordinated Universal Time (UTC).
             </para>
             <para>
                 To start the privilege assignment immediately, set the UtcStartDateTime to null.
             </para>
             <para>
                 To setup the privilege assignment forever or indefinitely, set the UtcEndDateTime to null.
             </para>
             <para>
                 <c>Validations:</c>
             	<list type="bullet">
                 <item>
                 <description>UtcStartDateTime should always be in future with respect to current time.</description>
                 </item>
                 <item>
                 <description>UtcEndDateTime should always be in future with respect to current time.</description>
                 </item>
                 <item>
                 <description>UtcEndDateTime should always be future with respect to the UtcStartDateTime.</description>
                 </item>
                 <item>
                 <description>The source subject should have the roles and permissions being granted to the target subject thru the privilege assignment. If the source subject has any of the roles thru delegation, the API would throw a fault.</description>
                 </item>
                 <item>
                 <description>In case of OBO privilege assignment, the target subject should have the roles and permissions being granted by the source subject. If the target subject has any of the roles thru delegation, the API would throw a fault. </description>
                 </item>
                 <item>
                 <description>All the permission being assigned thru privilege assignments should be associated to the corresponding roles. If any of the permission is not assigned to the corresponding role, the API would throw a fault.</description>
                 </item>
                 </list>
             </para>
             </remarks>
             <example>
             <para>Use below code to create a new privilege assignment.</para>
             <code>
                using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                {
                    // Provide source user, target user and the title for privilege assignment
                    PrivilegeAssignment privilegeAssignment = new PrivilegeAssignment();
                    PrivilegeAssignmentKey privAssignmentKey = new PrivilegeAssignmentKey();
                    privAssignmentKey.AssignmentTitle = "Delegation to user2";
                    privAssignmentKey.SourceRealm = "corp.microsoft.com";
                    privAssignmentKey.SourceSubjectKey = @"redmond\user1";
                    privAssignmentKey.TargetRealm = "corp.microsoft.com";
                    privAssignmentKey.TargetSubjectKey = @"redmond\user2";
            
                    // Add list of roles or role and permissions to the privilege assignment
                    RolePermission rolePermission = new RolePermission();
                    rolePermission.Role = new Role();
                    rolePermission.Role.RoleKey = new RoleKey();
                    rolePermission.Role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                    rolePermission.Role.RoleKey.RoleName = "MyRole";
            
                    RolePermission[] rolePermissions = new RolePermission[] { rolePermission };
                    privilegeAssignment.RolePermissions = rolePermissions;
                    privilegeAssignment.PrivilegeAssignmentKey = privAssignmentKey;
            
                    // Set the type of privilege assignment i.e., Delegation or OnBehalfOf and start, end dates for the privilege assignment
                    privilegeAssignment.PrivilegeAssignmentType = AssignmentType.Delegation;
                    privilegeAssignment.UtcStartDateTime = DateTime.Now.ToUniversalTime();
                    privilegeAssignment.UtcEndDateTime = DateTime.Now.AddMonths(6).ToUniversalTime();
            
                    PrivilegeAssignment[] privilegeAssignments = new PrivilegeAssignment[] { privilegeAssignment };
            
                    // Call the service to create the privilege assignment
                    client.CreatePrivilegeAssignment(privilegeAssignments);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UpdatePrivilegeAssignment(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment})">
             <summary>
             	<c>UpdatePrivilegeAssignment</c> API is used to update Privilege Assignments. Multiple privilege assignments can be updated in a single call as API supports bulk operation.
             </summary>
            <param name="privilegeAssignments">PrivilegeAssignment collection to support bulk operation. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.PrivilegeAssignment"/> class.</param>
             <remarks>
                 <para> <c>Audit:</c> This API call is audited.</para>
                 <para>This method supports bulk operations and the bulk limit is 20.</para>
             </remarks>
             <remarks>
             <para>
                 The dates passed as part of the PrivilegeAssignment objects in the privilegeAssginment collection should be converted to Coordinated Universal Time (UTC).
             </para>
             <para>
                 To start the privilege assignment immediately, set the UtcStartDateTime to null.
             </para>
             <para>
                 To setup the privilege assignment forever or indefinitely, set the UtcEndDateTime to null.
             </para>
             <para>
                 <c>Validations:</c>
             	<list type="bullet">
                 <item>
                 <description>UtcStartDateTime should always be in future with respect to current time.</description>
                 </item>
                 <item>
                 <description>UtcEndDateTime should always be in future with respect to current time.</description>
                 </item>
                 <item>
                 <description>UtcEndDateTime should always be future with respect to the UtcStartDateTime.</description>
                 </item>
                 <item>
                 <description>The source subject should have the roles and permissions being granted to the target subject thru the privilege assignment. If the source subject has any of the roles thru delegation, the API would throw a fault.</description>
                 </item>
                 <item>
                 <description>In case of OBO privilege assignment, the target subject should have the roles and permissions being granted by the source subject. If the target subject has any of the roles thru delegation, the API would throw a fault. </description>
                 </item>
                 <item>
                 <description>All the permission being assigned thru privilege assignments should be associated to the corresponding roles. If any of the permission is not assigned to the corresponding role, the API would throw a fault.</description>
                 </item>
                 </list>
             </para>
             </remarks>
             <example>
             <para>Use below code to update an existing privilege assignment.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     PrivilegeAssignment[] privilegeAssignments = new PrivilegeAssignment[1];
                     PrivilegeAssignment privilegeAssignment = new PrivilegeAssignment();
            
                     privilegeAssignment.PrivilegeAssignmentKey = new PrivilegeAssignmentKey();
                     privilegeAssignment.PrivilegeAssignmentKey.SourceRealm = "corp.microsoft.com";
                     privilegeAssignment.PrivilegeAssignmentKey.SourceSubjectKey = "abc";
                     privilegeAssignment.PrivilegeAssignmentKey.TargetRealm = "corp.microsoft.com";
                     privilegeAssignment.PrivilegeAssignmentKey.TargetSubjectKey = "xyz";
                     privilegeAssignment.PrivilegeAssignmentKey.AssignmentTitle = "PrivilegeAssignment1";
            
                     privilegeAssignment.NewPrivilegeAssignmentKey = new PrivilegeAssignmentKey();
                     privilegeAssignment.NewPrivilegeAssignmentKey.TargetRealm = "corp.microsoft.com";
                     privilegeAssignment.NewPrivilegeAssignmentKey.TargetSubjectKey = "abc";
                     privilegeAssignment.NewPrivilegeAssignmentKey.AssignmentTitle = "PrivilegeAssignment2";
                     privilegeAssignment.UtcStartDateTime = Convert.ToDateTime("12/12/2010 8:00:00 AM").ToUniversalTime();
                     privilegeAssignment.UtcEndDateTime = Convert.ToDateTime("02/01/2020 6:00:00 PM").ToUniversalTime();
                     privilegeAssignment.PrivilegeAssignmentType = AssignmentType.Delegation;
            
                     privilegeAssignment.RolePermissions = new RolePermission[1];
                     RolePermission rolePermission = new RolePermission();
                     rolePermission.Role = new Role();
                     rolePermission.Role.RoleKey = new RoleKey();
                     rolePermission.Role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                     rolePermission.Role.RoleKey.RoleName = "MyRole";
                     rolePermission.Permissions = new Permission[1];
                     rolePermission.Permissions[0].PermissionKey = new PermissionKey();
                     rolePermission.Permissions[0].PermissionKey.NamedProtectionDomain = "MyBusinessDomain";
                     rolePermission.Permissions[0].PermissionKey.ResourceName = "MyResource";
                     rolePermission.Permissions[0].PermissionKey.Operation = "Action2";
            
                     privilegeAssignments[1] = privilegeAssignment;
            
                     client.Open();
                     client.UpdatePrivilegeAssignment(privilegeAssignments);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.DeletePrivilegeAssignment(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment)">
             <summary>
             	<c>DeletePrivilegeAssignment</c> API is used to delete Privilege Assignments.
             </summary>
            <param name="privilegeAssignment"> Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.PrivilegeAssignment"/> class.</param>
             <remarks>
                 <para> <c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to delete an existing privilege assignment.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     PrivilegeAssignment privilegeAssignment = new PrivilegeAssignment();
            
                     privilegeAssignment.PrivilegeAssignmentKey = new PrivilegeAssignmentKey();
                     privilegeAssignment.PrivilegeAssignmentKey.SourceRealm = "corp.microsoft.com";
                     privilegeAssignment.PrivilegeAssignmentKey.SourceSubjectKey = "redmond\\sourceSubjectAlias";
                     privilegeAssignment.PrivilegeAssignmentKey.TargetRealm = "corp.microsoft.com";
                     privilegeAssignment.PrivilegeAssignmentKey.TargetSubjectKey = "redmond\\targetSubjectAlias";
                     privilegeAssignment.PrivilegeAssignmentKey.AssignmentTitle = "PrivilegeAssignment1";
            
            
                     client.Open();
                     client.DeletePrivilegeAssignment(privilegeAssignment);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.GetPrivilegeAssignment(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment)">
             <summary>
             	<c>GetPrivilegeAssignment</c> API is used to fetch full details of a given Privilege Assignments.
             </summary>
            <param name="privilegeAssignment">PrivilegeAssignment type object which contains the key properties for which the full details need to be fetched.Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.PrivilegeAssignment"/> class.</param>
            <returns> All the properties of the Privilege Assignment</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             <para>Use below code to get details of an existing privilege assignment.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                      PrivilegeAssignment privilegeAssignment = new PrivilegeAssignment();
            
                      privilegeAssignment.PrivilegeAssignmentKey = new PrivilegeAssignmentKey();
                      privilegeAssignment.PrivilegeAssignmentKey.SourceRealm = "corp.microsoft.com";
                      privilegeAssignment.PrivilegeAssignmentKey.SourceSubjectKey = "redmond\\sourceSubjectAlias";
                      privilegeAssignment.PrivilegeAssignmentKey.TargetRealm = "corp.microsoft.com";
                      privilegeAssignment.PrivilegeAssignmentKey.TargetSubjectKey = "redmond\\targetSubjectAlias";
                      privilegeAssignment.PrivilegeAssignmentKey.AssignmentTitle = "PrivilegeAssignment1";
            
            
                      client.Open();
                      PrivilegeAssignment privilegeAssignmentWithDetails = client.GetPrivilegeAssignment(privilegeAssignment);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.SearchPrivilegeAssignments(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
             <summary>
             	<c>SearchPrivilegeAssignments</c> API is used to search privilege assignments.
             </summary>
             <param name="criteria">Search criteria to search the privilege assignments.</param>
             <param name="page">It contains a number and size property. <see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class. </param>
             <returns>returns SearchResultOfPrivilegeAssignment. Details of <see cref="T:Microsoft.IT.Security.Common.SearchResult"/> class.</returns>
             <remarks>
                 <para> <c>Audit:</c> This API call is not audited.</para>
                 <para> * and ? wildcards are supported for all criteria of type string.</para>
                 <para>Page Size must be between 1 and 1000.</para>
             </remarks>
             <example>
             <para>Use below code to search privilege assignment where you are either a source or target and privilege assignment title is PrivilegeAssignment1.</para>
             <code>
                  using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                  {
                      PrivilegeAssignmentSearchCriteria privilegeAssignmentSearchcriteria = new PrivilegeAssignmentSearchCriteria();
                      privilegeAssignmentSearchcriteria.PrivilegeAssignmentTitle = "PrivilegeAssignment1";
            
                      Page page = new Page();
                      page.Number = 1;
                      page.Size = 100;
            
                      client.SearchPrivilegeAssignments(privilegeAssignmentSearchcriteria, page);
                  }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.AssignRolePermissionToPrivilegeAssignment(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment)">
             <summary>
             	<c>AssignRolePermissionToPrivilegeAssignment</c> API is used to assign more roles and/or permissions to already existing Privilege Assignments.
             </summary>
            <param name="privilegeAssignment">PrivilegeAssignment object which contains the key of existing privilege assignment and new roles and permissions. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.PrivilegeAssignment"/> class.</param>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
                 <para>
                     <c>Validations:</c>
             	    <list type="bullet">
                     <item>
                         <description>The source subject should have the roles and permissions being granted to the target subject thru the privilege assignment. If the source subject has any of the roles thru delegation, the API would throw a fault.</description>
                     </item>
                     <item>
                         <description>In case of OBO privilege assignment, the target subject should have the roles and permissions being granted by the source subject. If the target subject has any of the roles thru delegation, the API would throw a fault. </description>
                     </item>
                     <item>
                         <description>All the permission being assigned thru privilege assignments should be associated to the corresponding roles. If any of the permission is not assigned to the corresponding role, the API would throw a fault.</description>
                     </item>
                     </list>
                 </para>
             </remarks>
             <example>
             <para>Use below code to assign more roles/permissions to an already existing privilege assignment.</para>
             <code>
                 using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                 {
                     PrivilegeAssignment privilegeAssignment = new PrivilegeAssignment();
            
                     privilegeAssignment.PrivilegeAssignmentKey = new PrivilegeAssignmentKey();
                     privilegeAssignment.PrivilegeAssignmentKey.SourceRealm = "corp.microsoft.com";
                     privilegeAssignment.PrivilegeAssignmentKey.SourceSubjectKey = "redmond\\sourceSubjectAlias";
                     privilegeAssignment.PrivilegeAssignmentKey.TargetRealm = "corp.microsoft.com";
                     privilegeAssignment.PrivilegeAssignmentKey.TargetSubjectKey = "redmond\\targetSubjectAlias";
                     privilegeAssignment.PrivilegeAssignmentKey.AssignmentTitle = "PrivilegeAssignment1";
            
                     privilegeAssignment.RolePermissions = new RolePermission[1];
                     RolePermission rolePermission = new RolePermission();
                     rolePermission.Role = new Role();
                     rolePermission.Role.RoleKey = new RoleKey();
                     rolePermission.Role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                     rolePermission.Role.RoleKey.RoleName = "MyRole";
                     rolePermission.Permissions = new Permission[1];
                     rolePermission.Permissions[0].PermissionKey = new PermissionKey();
                     rolePermission.Permissions[0].PermissionKey.NamedProtectionDomain = "MyBusinessDomain";
                     rolePermission.Permissions[0].PermissionKey.ResourceName = "MyResource";
                     rolePermission.Permissions[0].PermissionKey.Operation = "Action1";
            
                     client.Open();
                     client.AssignRolePermissionToPrivilegeAssignment(privilegeAssignment);
                 }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.IRoleAdministrationService.UnassignRolePermissionFromPrivilegeAssignment(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment)">
             <summary>
             	<c>UnassignRolePermissionFromPrivilegeAssignment</c> API is used to unassign roles and/or permissions from an already existing Privilege Assignments.
             </summary>
            <param name="privilegeAssignment">PrivilegeAssignment object which contains the key of existing privilege assignment and new roles and permissions. Details of <see cref="T:Microsoft.IT.Security.AccessAdministration.PrivilegeAssignment"/> class.</param>
             <remarks>
             	<para> <c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to unassign roles/permissions from an existing privilege assignment.</para>
             <code>
                  using (RoleAdministrationServiceClient client = new RoleAdministrationServiceClient())
                  {
                      PrivilegeAssignment privilegeAssignment = new PrivilegeAssignment();
            
                      privilegeAssignment.PrivilegeAssignmentKey = new PrivilegeAssignmentKey();
                      privilegeAssignment.PrivilegeAssignmentKey.SourceRealm = "corp.microsoft.com";
                      privilegeAssignment.PrivilegeAssignmentKey.SourceSubjectKey = "redmond\\sourceSubjectAlias";
                      privilegeAssignment.PrivilegeAssignmentKey.TargetRealm = "corp.microsoft.com";
                      privilegeAssignment.PrivilegeAssignmentKey.TargetSubjectKey = "redmond\\targetSubjectAlias";
                      privilegeAssignment.PrivilegeAssignmentKey.AssignmentTitle = "PrivilegeAssignment1";
            
                      privilegeAssignment.RolePermissions = new RolePermission[1];
                      RolePermission rolePermission = new RolePermission();
                      rolePermission.Role = new Role();
                      rolePermission.Role.RoleKey = new RoleKey();
                      rolePermission.Role.RoleKey.NamedProtectionDomain = "MyBusinessDomain";
                      rolePermission.Role.RoleKey.RoleName = "MyRole";
                      rolePermission.Permissions = new Permission[1];
                      rolePermission.Permissions[0].PermissionKey = new PermissionKey();
                      rolePermission.Permissions[0].PermissionKey.NamedProtectionDomain = "MyBusinessDomain";
                      rolePermission.Permissions[0].PermissionKey.ResourceName = "MyResource";
                      rolePermission.Permissions[0].PermissionKey.Operation = "Action1";
            
                      client.Open();
                      client.UnassignRolePermissionFromPrivilegeAssignment(privilegeAssignment);
                  }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient">
            <summary>
            Class that provides the implementation used to create Windows Communication Foundation (WCF) client objects that can call the RoleAdministration Service.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient"/> class that is used to communicate with the RoleAdministration Service..
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient"/> class.
            </summary>
            <param name="endpointConfigurationName">Name of the endpoint in the application configuration file.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient"/> class.
            </summary>
            <param name="endpointConfigurationName">Name of the endpoint in the application configuration file.</param>
            <param name="remoteAddress">The address of the service endpoint.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient"/> class.
            </summary>
            <param name="endpointConfigurationName">Name of the endpoint in the application configuration file.</param>
            <param name="remoteAddress">The address of the service endpoint.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient"/> class.
            </summary>
            <param name="binding">The binding with which to call the service.</param>
            <param name="remoteAddress">The address of the service endpoint.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.AssignConstraintValueToSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.AssignPermissionToRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.AssignProvisioningSyncRuleToRole(System.Collections.Generic.List{Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.AssignRolePermissionToPrivilegeAssignment(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.AssignRoleToRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.AssignRoleToSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.AssignSubjectToRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.CreateAttribute(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.AttributeEntity})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.CreateAttributeIssuer(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.AttributeIssuer})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.CreateAuthenticationRealm(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.CreateFirstLevelNamedProtectionDomain(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.CreateNamedProtectionDomain(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.CreatePermission(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.CreatePrivilegeAssignment(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.CreateResource(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.Resource})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.CreateRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.CreateSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.CreateSubjectToRoleAssignment(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.DeleteAttribute(Microsoft.IT.Security.Core.DataEntities.AttributeEntity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.DeleteAttributeIssuer(Microsoft.IT.Security.Core.DataEntities.AttributeIssuer,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.DeleteAttributeValue(Microsoft.IT.Security.Core.DataEntities.AttributeEntity,System.String,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.DeleteAuthenticationRealm(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.DeleteNamedProtectionDomain(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.DeletePermission(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.DeletePrivilegeAssignment(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.DeleteResource(Microsoft.IT.Security.Core.DataEntities.Resource)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.DeleteRole(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.DeleteSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.DeleteSubjectByImmutableId(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectImmutableKey})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetAttribute(Microsoft.IT.Security.Core.DataEntities.AttributeEntity)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetAttributeIssuer(Microsoft.IT.Security.Core.DataEntities.AttributeIssuer)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetAuthenticationRealm(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetConstraintValuesOfSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission,Microsoft.IT.Security.Core.DataEntities.AttributeEntity)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetNamedProtectionDomain(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetPermission(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetPrivilegeAssignment(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetProvisioningSyncRulesOfRole(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetResource(Microsoft.IT.Security.Core.DataEntities.Resource)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetRole(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetSubject(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.RequestDeleteAttribute(Microsoft.IT.Security.Core.DataEntities.AttributeEntity)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.RequestDeleteAttributeIssuer(Microsoft.IT.Security.Core.DataEntities.AttributeIssuer)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.RequestDeleteAttributeValue(Microsoft.IT.Security.Core.DataEntities.AttributeEntity,System.String,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.RequestDeleteAuthenticationRealm(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.RequestDeleteNamedProtectionDomain(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.SearchAttributeIssuers(Microsoft.IT.Security.Core.DataEntities.AttributeIssuerSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.SearchAttributes(Microsoft.IT.Security.Core.DataEntities.AttributeSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.SearchAuthenticationRealms(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RealmSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.SearchNamedProtectionDomains(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomainSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.SearchPermissionToRoleAssignments(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionToRoleAssignmentsSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.SearchPermissions(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetPermissionTags(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetRoleTags(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.SearchPrivilegeAssignments(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignmentSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.SearchResources(Microsoft.IT.Security.Core.DataEntities.ResourceSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.SearchRoles(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.SearchSubjectToRoleAssignments(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectToRoleAssignmentSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.SearchSubjects(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.SearchSyncedAccountTypes(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RealmSearchCriteria)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UnassignConstraintValueFromSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectConstraintEntry},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UnassignPermissionFromRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UnassignProvisioningSyncRuleFromRole(System.Collections.Generic.List{Microsoft.IT.Security.Administration.Provisioning.DataEntities.ProvisioningSyncRule},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UnassignRoleFromRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UnassignRoleFromSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UnassignRolePermissionFromPrivilegeAssignment(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UnassignSubjectFromRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject},Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UpdateAttribute(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.AttributeEntity})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UpdateAttributeIssuer(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.AttributeIssuer})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UpdateAuthenticationRealm(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.AuthenticationRealm})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UpdateNamedProtectionDomain(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UpdatePermission(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Permission})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UpdatePrivilegeAssignment(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PrivilegeAssignment})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UpdateResource(System.Collections.Generic.IList{Microsoft.IT.Security.Core.DataEntities.Resource})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UpdateRole(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UpdateSubject(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Subject})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.UpdateSubjectToRoleAssignment(System.Collections.Generic.IList{Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectAssignment})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.Ping(Microsoft.IT.Security.Core.Diagnostics.MonitorLevel)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.RoleAdministration.RoleAdministrationServiceClient.GetSubjectAssignments(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.Role,Microsoft.IT.Security.Core.DataEntities.Page,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.IT.Security.AccessAdministration.AuthorizationDataService">
            <summary>
            AuthorizationDataService class
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.AccessAdministration.IAuthorizationDataService">
            <summary>
            IAuthorizationDataService interface defines APIs and entity classes which are exposed to tenants.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.IAuthorizationDataService.SearchSubjectAuthorizationData(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectCriteria,System.Boolean)">
             <summary>
             <c>SearchSubjectAuthorizationData</c> API is used to get authorization data for the given SubjectCriteria.
             </summary>
            <param name="subjectCriteria"> <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectCriteria"/> class.</param>
            <param name="returnIndirectAssignments">indicates if indirectAssignments (delegation) are included in result set.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>subjectCriteria is required, Role and RoleTag properties on this class are optional, all the rest are mandatory.</para>
             </remarks>
             <example>
             <para>Use below code to search authorization data with given SubjectCriteria.</para>
             <code>
            using (AuthorizationDataServiceClient client = new AuthorizationDataServiceClient())
            {
                SubjectCriteria subjectCriteria = new SubjectCriteria();
                subjectCriteria.SubjectKey = "fareast\testuser";
                subjectCriteria.AuthenticationRealmName = "corp.microsoft.com";
                subjectCriteria.NamedProtectionDomain = "TestNPD";
                subjectCriteria.RoleName = "TestRoleName";
                subjectCriteria.RoleTag = "TestRoleTag";
                bool returnIndirectAssignments = true;
                string result = client.SearchSubjectAuthorizationData(subjectCriteria, returnIndirectAssignments);
            }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.IAuthorizationDataService.SearchSubjectAuthorizationDataByUpn(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnCriteria,System.Boolean)">
             <summary>
             <c>SearchSubjectAuthorizationDataByUpn</c> API is used to get authorization data for the given UpnCriteria.
             </summary>
            <param name="upnCriteria"> <see cref="T:Microsoft.IT.Security.AccessAdministration.UpnCriteria"/> class.</param>
            <param name="returnIndirectAssignments">indicates if indirectAssignments (delegation) are included in result set.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>upnCriteria is required, Role and RoleTag properties on this class are optional, all the rest are mandatory.</para>
             </remarks>
             <example>
             <para>Use below code to search authorization data with given UpnCriteria.</para>
             <code>
            using (AuthorizationDataServiceClient client = new AuthorizationDataServiceClient())
            {
                UpnCriteria upnCriteria = new UpnCriteria();
                upnCriteria.UserPrincipalName = "testuser@microsoft.com";
                upnCriteria.NamedProtectionDomain = "TestNPD";
                upnCriteria.RoleName = "TestRoleName";
                upnCriteria.RoleTag = "TestRoleTag";
                bool returnIndirectAssignments = true;
                string result = client.SearchSubjectAuthorizationDataByUpn(upnCriteria, returnIndirectAssignments);
            }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.IAuthorizationDataService.SearchSubjectsByPermissionAndRoleConstraints(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionRoleConstraintCriteria)">
             <summary>
             	<c>SearchSubjectsByPermissionAndRoleConstraints</c> API is used to search subjects with given PermissionRoleConstraintCriteria.
             </summary>
            <param name="permissionRoleConstraintCriteria"> <see cref="T:Microsoft.IT.Security.AccessAdministration.PermissionRoleConstraintCriteria"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>PermissionRoleConstraintCriteria is required, Role and RoleTag properties on this class are optional, uses should provide either AttributeName-SubjectConstraintValue pair or ResourceName-ResourceOperation pair or both, all the rest are mandatory.</para>
             </remarks>
             <example>
             <para>Use below code to search subjects with given PermissionRoleConstraintCriteria.</para>
             <code>
             using (AuthorizationDataServiceClient client = new AuthorizationDataServiceClient())
            {
                PermissionRoleConstraintCriteria permissionRoleConstraintCriteria = new PermissionRoleConstraintCriteria();
                permissionRoleConstraintCriteria.AttributeName = "TestAttributeName";
                permissionRoleConstraintCriteria.SubjectConstraintValue = "TestConstraintValue";
                permissionRoleConstraintCriteria.NamedProtectionDomain = "TestNPD";
                permissionRoleConstraintCriteria.RoleName = "TestRoleName";
                permissionRoleConstraintCriteria.RoleTag = "TestRoleTag";
                permissionRoleConstraintCriteria.ExternalIdentifier = "TestExternalIdentifier";
                permissionRoleConstraintCriteria.ResourceName = "TestResourceName";
                permissionRoleConstraintCriteria.ResourceOperation = "TestResourceOperation";
            
                string result = client.SearchSubjectsByPermissionAndRoleConstraints(permissionRoleConstraintCriteria);
            }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.IAuthorizationDataService.SearchDelegatedSubjectsByPermission(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectPermissionCriteria)">
             <summary>
             	<c>SearchDelegatedSubjectsByPermission</c> API is used to search delegated subjects with given SubjectPermissionCriteria.
             </summary>
            <param name="subjectPermissionCriteria"> <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectPermissionCriteria"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>subjectPermissionCriteria is required, RoleName and RoleTag properties on this class are optional, all the rest are mandatory.</para>
             </remarks>
             <example>
             <para>Use below code to search delegated subjects with given PermissionCriteria.</para>
             <code>
                using (AuthorizationDataServiceClient client = new AuthorizationDataServiceClient())
                {
                    SubjectPermissionCriteria subjectPermissionCriteria = new SubjectPermissionCriteria();
                    subjectPermissionCriteria.NamedProtectionDomain = "TestNPD";
                    subjectPermissionCriteria.RoleName = "TestRoleName";
                    subjectPermissionCriteria.RoleTag = "TestRoleTag";
                    subjectPermissionCriteria.ResourceName = "TestResourceName";
                    subjectPermissionCriteria.ResourceOperation = "TestResourceOperation";
                    subjectPermissionCriteria.SubjectKey = "TestUser";
                    subjectPermissionCriteria.AuthenticationRealmName = "TestRealm";
            
                    string result = client.SearchDelegatedSubjectsByPermission(subjectPermissionCriteria);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.IAuthorizationDataService.SearchDelegatedSubjectsByPermissionByUpn(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnPermissionCriteria)">
             <summary>
             	<c>SearchDelegatedSubjectsByPermissionByUpn</c> API is used to search delegated subjects with given UpnPermissionCriteria.
             </summary>
            <param name="upnPermissionCriteria"> <see cref="T:Microsoft.IT.Security.AccessAdministration.UpnPermissionCriteria"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>upnPermissionCriteria is required, RoleName and RoleTag properties on this class are optional, all the rest are mandatory.</para>
             </remarks>
             <example>
             <para>Use below code to search delegated subjects with given UpnPermissionCriteria.</para>
             <code>
                using (AuthorizationDataServiceClient client = new AuthorizationDataServiceClient())
                {
                    UpnPermissionCriteria upnPermissionCriteria = new UpnPermissionCriteria();
                    upnPermissionCriteria.NamedProtectionDomain = "TestNPD";
                    upnPermissionCriteria.RoleName = "TestRoleName";
                    upnPermissionCriteria.RoleTag = "TestRoleTag";
                    upnPermissionCriteria.ResourceName = "TestResourceName";
                    upnPermissionCriteria.ResourceOperation = "TestResourceOperation";
                    upnPermissionCriteria.UserPrincipalName = "testuser@microsoft.com";
            
                    string result = client.SearchDelegatedSubjectsByPermissionByUpn(upnPermissionCriteria);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.IAuthorizationDataService.SearchDelegatedPermissionsReceived(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectCriteria)">
             <summary>
             	<c>SearchDelegatedPermissionsReceived</c> API is used to search delegated permission the current subject has received with given SubjectCriteria.
             </summary>
            <param name="subjectCriteria"> <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectCriteria"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>subjectCriteria is required, Role and RoleTag properties on this class are optional, all the rest are mandatory.</para>
             </remarks>
             <example>
             <para>Use below code to search delegated permission the current subject has received with given SubjectCriteria.</para>
             <code>
                using (AuthorizationDataServiceClient client = new AuthorizationDataServiceClient())
                {
                    SubjectCriteria subjectCriteria = new SubjectCriteria();
                    subjectCriteria.NamedProtectionDomain = "TestNPD";
                    subjectCriteria.RoleName = "TestRoleName";
                    subjectCriteria.RoleTag = "TestRoleTag";
                    subjectCriteria.SubjectKey = "fareast\testUser";
                    subjectCriteria.ReturnIndirectAssignments = true;
            
                    string result = client.SearchDelegatedPermissionsReceived(subjectCriteria);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.IAuthorizationDataService.SearchDelegatedPermissionsReceivedByUpn(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnCriteria)">
             <summary>
             	<c>SearchDelegatedPermissionsReceivedByUpn</c> API is used to search delegated permission the current subject has received with given UpnCriteria.
             </summary>
            <param name="upnCriteria"> <see cref="T:Microsoft.IT.Security.AccessAdministration.UpnCriteria"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>upnCriteria is required, Role and RoleTag properties on this class are optional, all the rest are mandatory.</para>
             </remarks>
             <example>
             <para>Use below code to search delegated permission the current subject has received with given UpnCriteria.</para>
             <code>
                using (AuthorizationDataServiceClient client = new AuthorizationDataServiceClient())
                {
                    UpnCriteria upnCriteria = new UpnCriteria();
                    upnCriteria.NamedProtectionDomain = "TestNPD";
                    upnCriteria.RoleName = "TestRoleName";
                    upnCriteria.RoleTag = "TestRoleTag";
                    upnCriteria.UserPrincipalName = "testuser@microsoft.com";
                    upnCriteria.ReturnIndirectAssignments = true;
            
                    string result = client.SearchDelegatedPermissionsReceivedByUpn(upnCriteria);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.IAuthorizationDataService.SearchDelegatedPermissionsGranted(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectCriteria)">
             <summary>
             	<c>SearchDelegatedPermissionsGranted</c> API is used to search delegated permission the current subject has granted to the others with given SubjectCriteria.
             </summary>
            <param name="subjectCriteria"> <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectCriteria"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>subjectCriteria is required, Role and RoleTag properties on this class are optional, all the rest are mandatory.</para>
             </remarks>
             <example>
             <para>Use below code to search delegated permission the current subject has granted to the others with given SubjectCriteria.</para>
             <code>
                using (AuthorizationDataServiceClient client = new AuthorizationDataServiceClient())
                {
                    SubjectCriteria subjectCriteria = new SubjectCriteria();
                    subjectCriteria.NamedProtectionDomain = "TestNPD";
                    subjectCriteria.RoleName = "TestRoleName";
                    subjectCriteria.RoleTag = "TestRoleTag";
                    subjectCriteria.SubjectKey = "fareast\testUser";
                    subjectCriteria.ReturnIndirectAssignments = true;
            
                    string result = client.SearchDelegatedPermissionsGranted(subjectCriteria);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.IAuthorizationDataService.SearchDelegatedPermissionsGrantedByUpn(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnCriteria)">
             <summary>
             	<c>SearchDelegatedPermissionsGrantedByUpn</c> API is used to search delegated permission the current subject has granted to the others with given UpnCriteria.
             </summary>
            <param name="upnCriteria"> <see cref="T:Microsoft.IT.Security.AccessAdministration.UpnCriteria"/> class.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>upnCriteria is required, Role and RoleTag properties on this class are optional, all the rest are mandatory.</para>
             </remarks>
             <example>
             <para>Use below code to search delegated permission the current subject has granted to the others with given UpnCriteria.</para>
             <code>
                using (AuthorizationDataServiceClient client = new AuthorizationDataServiceClient())
                {
                    UpnCriteria upnCriteria = new UpnCriteria();
                    upnCriteria.NamedProtectionDomain = "TestNPD";
                    upnCriteria.RoleName = "TestRoleName";
                    upnCriteria.RoleTag = "TestRoleTag";
                    upnCriteria.UserPrincipalName = "testuser@microsoft.com";
                    upnCriteria.ReturnIndirectAssignments = true;
            
                    string result = client.SearchDelegatedPermissionsGrantedByUpn(upnCriteria);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.IAuthorizationDataService.SearchSubjectRoleAssignments(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectCriteria,System.Boolean)">
             <summary>
             	<c>SearchSubjectRoleAssignments</c> API is used to search SubjectAssignments with given SubjectCriteria.
             </summary>
            <param name="subjectCriteria"> <see cref="T:Microsoft.IT.Security.AccessAdministration.SubjectCriteria"/> class.</param>
            <param name="returnPermissions">indicates if permissions are included in result set.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>subjectCriteria is required, Role and RoleTag properties on this class are optional, all the rest are mandatory.</para>
             </remarks>
             <example>
             <para>Use below code to search SubjectAssignments with given SubjectCriteria.</para>
             <code>
                using (AuthorizationDataServiceClient client = new AuthorizationDataServiceClient())
                {
                    SubjectCriteria subjectCriteria = new SubjectCriteria();
                    subjectCriteria.NamedProtectionDomain = "TestNPD";
                    subjectCriteria.RoleName = "TestRoleName";
                    subjectCriteria.RoleTag = "TestRoleTag";
                    subjectCriteria.SubjectKey = "fareast\testUser";
                    subjectCriteria.ReturnIndirectAssignments = true;
            
                    string result = client.SearchSubjectRoleAssignments(subjectCriteria);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.IAuthorizationDataService.SearchSubjectRoleAssignmentsByUpn(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnCriteria,System.Boolean)">
             <summary>
             	<c>SearchSubjectRoleAssignmentsByUpn</c> API is used to search SubjectAssignments with given UpnCriteria.
             </summary>
            <param name="upnCriteria"> <see cref="T:Microsoft.IT.Security.AccessAdministration.UpnCriteria"/> class.</param>
            <param name="returnPermissions">indicates if permissions are included in result set.</param>
             <remarks>
                 <para><c>Audit:</c> This API call is audited.</para>
             	<para>upnCriteria is required, Role and RoleTag properties on this class are optional, all the rest are mandatory.</para>
             </remarks>
             <example>
             <para>Use below code to search SubjectAssignments with given UpnCriteria.</para>
             <code>
                using (AuthorizationDataServiceClient client = new AuthorizationDataServiceClient())
                {
                    UpnCriteria upnCriteria = new UpnCriteria();
                    upnCriteria.NamedProtectionDomain = "TestNPD";
                    upnCriteria.RoleName = "TestRoleName";
                    upnCriteria.RoleTag = "TestRoleTag";
                    upnCriteria.UserPrincipalName = "testuser@microsoft.com";
                    upnCriteria.ReturnIndirectAssignments = true;
            
                    string result = client.SearchSubjectRoleAssignmentsByUpn(upnCriteria);
                }
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault"/>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault"/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.AuthorizationDataService.Ping(Microsoft.IT.Security.Core.Diagnostics.MonitorLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.AuthorizationDataService.SearchSubjectAuthorizationData(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectCriteria,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.AuthorizationDataService.SearchSubjectAuthorizationDataByUpn(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnCriteria,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.AuthorizationDataService.SearchSubjectsByPermissionAndRoleConstraints(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.PermissionRoleConstraintCriteria)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.AuthorizationDataService.SearchDelegatedSubjectsByPermission(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectPermissionCriteria)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.AuthorizationDataService.SearchDelegatedSubjectsByPermissionByUpn(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnPermissionCriteria)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.AuthorizationDataService.SearchDelegatedPermissionsReceived(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectCriteria)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.AuthorizationDataService.SearchDelegatedPermissionsReceivedByUpn(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnCriteria)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.AuthorizationDataService.SearchDelegatedPermissionsGranted(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectCriteria)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.AuthorizationDataService.SearchDelegatedPermissionsGrantedByUpn(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnCriteria)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.AuthorizationDataService.SearchSubjectRoleAssignments(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.SubjectCriteria,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Security.AccessAdministration.AuthorizationDataService.SearchSubjectRoleAssignmentsByUpn(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.UpnCriteria,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantAttributeContext">
            <summary>
            This class represents System Attribute
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantAttributeContext.AddValues(System.String)">
            <summary>
            Method to add a attribute value to collection
            </summary>
            <param name="attributeValue">Attribute value to add</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantAttributeContext.ExtractObjectScope(System.String)">
            <summary>
             TBD
            </summary>
            <param name="entityAction"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantAttributeContext.AttributeKey">
            <summary>
            key object
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantAttributeContext.Values">
            <summary>
            Gets the attribute value collection
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.AttributeType">
            <summary>
            Define Attribute
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.AttributeType.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.AttributeType.Resource">
            <summary>
            Resource
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.AttributeType.Action">
            <summary>
            Action
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.AttributeType.Environment">
            <summary>
            Environment.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemAuthenticationRealm">
            <summary>
            Represents SystemAutheticationRealm
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemAuthenticationRealm.Description">
            <summary>
             This property is used to specify Description
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemAuthenticationRealm.RealmXML">
            <summary>
             This property is used to specify Realm XML
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemAuthenticationRealm.SystemAuthenticationRealmKey">
            <summary>
            RealmKey
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemAuthenticationRealm.TrustLevel">
            <summary>
            Represents the trust level. Default is Low.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemAuthenticationRealmKey">
            <summary>
            SystemAuthenticationRealmKey is unique key for SystemAutheticationRealm
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemAuthenticationRealmKey.Name">
            <summary>
            Realm name
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleAssignment">
            <summary>
            This class represents system role 
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleAssignment.AddSystemRoleContext(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleContext)">
            <summary>
            Adding System Role Context
            </summary>
            <param name="systemRole"></param>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleAssignment.SystemRoleKey">
            <summary>
            SystemRoleKey
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleAssignment.Context">
            <summary>
            To get all SystemRolesContext
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleKey">
            <summary>
            This class represents Rolekey
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleKey.Name">
            <summary>
            System Role Name.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleContext">
            <summary>
            This class is used to specify systemRoleContext
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleContext.ExtractObjectScope(System.String)">
            <summary>
             TBD
            </summary>
            <param name="entityAction"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext">
            <summary>
            This class is used to specify Tenant Role Context
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext.attributes">
            <summary>
            Attribute Source
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext.ExtractObjectScope(System.String)">
            <summary>
             Override to return NPD value
            </summary>
            <param name="entityAction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext.AddTenantAttributeContext(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantAttributeContext)">
            <summary>
            Public accessor for adding attributes
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext.Attributes">
            <summary>
            Public accessor for sources.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext">
            <summary>
            This class is used to specify Named Protection domain context
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext.ExtractObjectScope(System.String)">
            <summary>
             Override to return NPD value
            </summary>
            <param name="entityAction"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName">
            <summary>
            SystemRoleName
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants">
            <summary>
            System Security Management Constant definitions.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.PingError">
            <summary>
            Access Administration Ping Error constant
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.PingDatabaseFail">
            <summary>
            Ping database error constant
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.AssignUserAsSupportEngineerEventId">
            <summary>
            AssignUserAsSupportEngineer Event Id
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.AssignUserAsAuditorEventId">
            <summary>
            AssignUserAsAuditor Event Id
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.AssignUserAsHelpDeskEventId">
            <summary>
            AssignUserAsHelpDesk Event Id 
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.UnassignUserAsSupportEngineerEventId">
            <summary>
            UnassignUserAsSupportEngineer Event Id
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.UnassignUserAsAuditorEventId">
            <summary>
            AssignUserAsAuditor Event Id
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.UnassignUserAsHelpDeskEventId">
            <summary>
            AssignUserAsHelpDesk Event Id 
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.AssignUserAsBusinessDomainManagerEventId">
            <summary>
            AssignUserAsBusinessDomainManagerEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.AssignUserAsResourceManagerEventId">
            <summary>
            AssignUserAsBusinessDomainManagerEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.UnassignUserAsBusinessDomainManagerEventId">
            <summary>
            UnassignUserAsBusinessDomainManagerEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.UnassignUserAsResourceManagerEventId">
            <summary>
            UnassignUserAsResourceManagerEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.AssignUserAsAccountManagerEventId">
            <summary>
            AssignUserAsAccountManagerEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.UnassignUserAsAccountManagerEventId">
            <summary>
            UnassignUserAsAccountManagerEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.GetSupportEngineersEventId">
            <summary>
            GetSupportEngineersEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.GetAuditorsEventId">
            <summary>
            GetAuditorsEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.GetHelpdeskEventId">
            <summary>
            GetHelpdeskEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.GetMySystemRolesEventId">
            <summary>
            GetMySystemRolesEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.GetSystemRolesOfUserEventId">
            <summary>
            GetSystemRolesOfUserEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.GetBusinesDomainManagersEventId">
            <summary>
            GetBusinesDomainManagersEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.GetResourceManagersEventId">
            <summary>
            GetResourceManagersEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.GetAccountManagersEventId">
            <summary>
            GetAccountManagersEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.GetSystemAuthenticationRealmsEventId">
            <summary>
            GetSystemAuthenticationRealmsEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.GetSystemUserProfileEventId">
            <summary>
            GetSystemUserProfileEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.UpdateSystemUserProfileEventId">
            <summary>
            UpdateSystemUserProfileEventId
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.SearchSystemUserProfileEventId">
            <summary>
            EventId for SearchSystemUserProfile method
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.AssignUserAsGlobalAccountManagerEventId">
            <summary>
            EventId for AssignUserAsGlobalAccountManager method
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.UnassignUserAsGlobalAccountManagerEventId">
            <summary>
            EventId for UnassignUserAsGlobalAccountManager method
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.AssignGenericExceptionErrorCode">
            <summary>
            Assign General Exception Error Code
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.CreateGenericExceptionErrorCode">
            <summary>
            Create General Exception Error Code
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.UpdateGenericExceptionErrorCode">
            <summary>
            Update General Exception Error Code
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.DeleteGenericExceptionErrorCode">
            <summary>
            Update General Exception Error Code
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.GetGenericExceptionErrorCode">
            <summary>
            Update General Exception Error Code
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.UnassignGenericExceptionErrorCode">
            <summary>
            Unassign  General Exception Error Code
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.UserExistsInSystemRoleExceptionErrorCode">
            <summary>
            UserExists In SystemRole  ExceptionErrorCode
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.lastUserInSystemRoleExceptionErrorCode">
            <summary>
            Last User in SystemRole ExceptionErrorCode
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.UserNotInSpecificRoleExceptionErrorCode">
            <summary>
            User not in Specific role exception error code
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.UserExistsInAuditorRoleExceptionErrorCode">
            <summary>
            UserExistsInAuditorRoleExceptionErrorCode
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.CustomDatabaseStartErrorCode">
            <summary>
            CustomDatabaseStartErrorCode
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.CustomDatabaseEndErrorCode">
            <summary>
            CustomDatabaseEndErrorCode
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.SupportEngineerSystemRole">
            <summary>
            Constant for support engineer system role
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.HelpDeskSystemRole">
            <summary>
            Constant for help desk system role
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.AuditorSystemRole">
            <summary>
            Constant for auditor system role
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.BusinessDomainManagerSystemRole">
            <summary>
            Constant for business domain manager system role
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.ResourceManagerSystemRole">
            <summary>
            Constant for resource manager system role
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.AccountManagerSystemRole">
            <summary>
            Constant for account manager system role
            </summary>
        </member>
        <member name="F:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemSecurityManagementConstants.GlobalAccountManagerSystemRole">
            <summary>
            Constant for global account manager system role
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser">
            <summary>
            This class represents systemuser. 
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser.AddSystemRole(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleAssignment)">
            <summary>
            Adding System Role
            </summary>
            <param name="systemRole"></param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser.ExtractObjectScope(System.String)">
            <summary>
             Extract Object scope for security validation
            </summary>
            <param name="entityAction"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser.SystemUserKey">
            <summary>
            key object
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser.Email">
            <summary>
            Email address of System User
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser.FirstName">
            <summary>
            First Name of System user
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser.LastName">
            <summary>
            Last Name of System user
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser.SystemRoles">
            <summary>
            getting SystemRoles of User.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser.AccountType">
            <summary>
            AccountType (User, System, Machine, Certificate) associated with a system user
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser.ImmutableId">
            <summary>
            ImmutableId of system user
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser.UserPrincipalName">
            <summary>
            User principal name of system user
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser.CachedDate">
            <summary>
            The time that the user put into cache.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser.ContextLastModifiedDate">
            <summary>
            The time that the roles of the user last modified.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUserKey">
            <summary>
             This class represents unique key for System User.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUserKey.Key">
            <summary>
            Key for System User object
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUserKey.SystemAuthenticationRealmKey">
            <summary>
             Authetication Realm
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUserSearchCriteria">
            <summary>
            RoleSearchCriteria class is used to search Roles.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUserSearchCriteria.SystemAuthenticationRealmName">
            <summary>
            Gets or sets the system authentication realm of the system user
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUserSearchCriteria.SystemUserKey">
            <summary>
            Gets or sets the subject key of system user.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUserSearchCriteria.FirstName">
            <summary>
            Gets or sets the first name of the system user.
            </summary>
            <value>The first name of the system user.</value>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUserSearchCriteria.LastName">
            <summary>
            Gets or sets the last name of the system user.
            </summary>
            <value>The last name of the system user.</value>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider">
            <summary>
            SqlProvider is used to connect to the Sql Server database
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider">
            <summary>
            Base class for System security  Data Providers
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Ping(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Ping method to check the database connectivity. 
            </summary>
            <param name="context">Custom context instance.</param>
            <returns>Database name.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Assign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Assign with out any NPD  context  or Role context
            </summary>
            <param name="systemUser"></param>
            <param name="systemRoleName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Assign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Assign senior tenant role with junior role context
            </summary>
            <param name="systemUser"></param>
            <param name="systemRoleName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Assign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            
            </summary>
            <param name="systemUser"></param>
            <param name="npd"></param>
            <param name="systemRoleName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Assign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            
            </summary>
            <param name="systemUser"></param>
            <param name="tenantRoleContext"></param>
            <param name="systemRoleName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Create(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Create System User
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Update(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Update System User
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Delete(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Delete System User.
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Get(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Get System User.
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Unassign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Unassign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Unassign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Unassign senior tenant role from junior role context
            </summary>
            <param name="systemUser"></param>
            <param name="systemRoleName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Unassign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.CheckBusinessDomainManagerNPD(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,System.Collections.Generic.List{Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            CheckBusinessDomainManagerNPD check business domain manager's managed NPD list has at least one intersection with passed in namedprotectondomain list
            </summary>
            <param name="systemUser">system user</param>
            <param name="namedProtectionDomains">list of named protection domain</param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.GetAttributeDataType(System.Collections.Generic.List{System.String},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To  get attribute data type
            </summary>
            <param name="attributes">list of attribute names</param>
            <param name="context">custom context</param>
            <returns>attribute name and data type association</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Create(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Create NamedProtectionDomain
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Update(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Update NamedProtectionDomain
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Delete(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Delete NamedProtectionDomain
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Create(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Create Role
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Update(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Update Role
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Delete(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Delete Role
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Create(Microsoft.IT.Security.Core.DataEntities.AttributeEntity,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Create Attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Update(Microsoft.IT.Security.Core.DataEntities.AttributeEntity,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Update Attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Delete(Microsoft.IT.Security.Core.DataEntities.AttributeEntity,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Delete Role
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Get(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Get methods for SE , Auditor and helpdesk.
            </summary>
            <param name="systemUser"></param>
            <param name="systemRoleName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.GetProfile(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Get system user profile.
            </summary>
            <param name="systemUser"></param>
            <param name="systemRoleName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Search(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUserSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Search system user profiles.
            </summary>
            <param name="criteria">Search criteria.</param>
            <param name="page">Page</param>
            <param name="context">Custom context.</param>
            <returns>Search result having found system users.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Get(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Core.DataEntities.Page,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            
            </summary>
            <param name="tenantRoleContext"></param>
            <param name="page"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.Get(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,System.Collections.Generic.List{Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain},Microsoft.IT.Security.Core.CustomContext)">
            <summary> 
            To get the Business domain managers, Resource Managers and Account Managers in specified named protection domain.
            </summary>
            <param name="systemRoleName"></param>
            <param name="namedProtectionDomain"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.GetSystemRoles(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To get System roles of passed in user.
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.GetSystemAuthenticationRealms(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            GetSystemAuthenticationRealms is used to get system authetication realms.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.GetCurrentSystemRoles(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To get current system roles of passed in user.
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider.GetCurrentDistinctSystemRoles(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To get distinct current system roles of passed in user.
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initialize provider
            </summary>
            <param name="providerName">provider name</param>
            <param name="config">configurable parameters</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Create(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Create System User
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Update(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Updating system user
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Delete(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Delete System User.
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Get(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,System.Collections.Generic.List{Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To get the List of BDMs, RMs and AMs in Specified NPD.
            </summary>
            <param name="SystemRoleName"></param>
            <param name="namedProtectionDomain"></param>
            <param name="page"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Get(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,System.Collections.Generic.List{Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain},Microsoft.IT.Security.Core.DataEntities.Page,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To get Account Managers.
            </summary>
            <param name="tenantRoleContext"></param>
            <param name="page"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Get(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="systemUser"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.GetProfile(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="systemUser"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Search(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUserSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="systemUser"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Assign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Assign method to assign user to system roles such as "Support Engineer", "Auditor" and "Help Desk"
            </summary>
            <param name="systemUser">User being assigned system role</param>
            <param name="SystemRoleName">System role to assign</param>
            <param name="context">Service context to retain correlationId etc</param>
            <returns>Number of records affected</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Assign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Assign method to assign junior role to senior role to form role hierarchy
            TODO: This should probably need to get deleted as this should be part of role administration and not system security
            </summary>
            <param name="seniorRole">Senior or parent role</param>
            <param name="juniorRole">Junior or child role</param>
            <param name="context">Service context to retain correlationId etc</param>
            <returns>Number of records affected</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Assign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Assign method used for assigning user to "Business Domain Manager" and "Resource Manager" system roles
            </summary>
            <param name="systemUser">User being assigned to system role</param>
            <param name="namedProtectionDomainContext">Context with one or more named protection domains</param>
            <param name="systemRoleName">System role to assign</param>
            <param name="context">Service context to retain correlationId etc</param>
            <returns>Number of records affected</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Assign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
             Assign method used for assigning user to account manager system role
            </summary>
            <param name="systemUser">User being assigned to system role</param>
            <param name="tenantRoleContext">Tenant role context with role and any attribute values</param>
            <param name="systemRoleName">System role to assign</param>
            <param name="context">Service context to retain correlationId etc</param>
            <returns>Number of records affected</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Unassign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="systemUser"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Unassign(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
             unassign method
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.GetRoleName(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName)">
            <summary>
            GetRoleName
            </summary>
            <param name="systemRoleName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.IsUserinAnyRole(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="systemUser"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.IsUserinLastRole(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="systemUser"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.IsUserinLastRole(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="systemUser"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.IsUserNotinSpecificRole(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="systemUser"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.CheckBusinessDomainManagerNPD(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,System.Collections.Generic.List{Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            CheckBusinessDomainManagerNPD check business domain manager's managed NPD list has at least one intersection with passed in namedprotectondomain list
            </summary>
            <param name="systemUser">system user</param>
            <param name="namedProtectionDomains">list of named protection domain</param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.IsUserInSpecificRole(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="systemUser"></param>
             <param name="systemRoleName"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.GetAttributeDataType(System.Collections.Generic.List{System.String},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To  get attribute data type
            </summary>
            <param name="attributes">list of attribute names</param>
            <param name="context">custom context</param>
            <returns>attribute name and data type association</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.ConstructNamedProtectionDomain(System.Collections.Generic.List{Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain})">
             <summary>
            
             </summary>
             <param name="namedProtectionDomains"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.ConstructSystemAuthenticationRealms(System.Data.DataSet)">
             <summary>
            
             </summary>
             <param name="realmDataSource"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Get(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="SystemRoleName"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.GetSystemAuthenticationRealms(Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             </summary>
             <param name="SystemRoleName"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.GetSystemRoles(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To get the system Roles of System user
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.GetCurrentSystemRoles(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To get the system Roles of System user
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.GetCurrentDistinctSystemRoles(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To get the system Roles of System user
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.ConstructSystemRoles(System.Data.DataSet,System.Boolean)">
            <summary>
            Helper method that constructs system roles and the scope values(context) for user
            </summary>
            <param name="systemRoleDataSet">Dataset containing system role information</param>
            <param name="loadAttributes">Flag indicating whether attributes and their values would need to be populated</param>
            <returns>System roles and the scope values of the user</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Ping(Microsoft.IT.Security.Core.CustomContext)">
             <summary>
            
             Ping method to check the database connectivity.
             </summary>
             <param name="context">Custom context instance.</param>
             <returns>Database name.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SqlProvider.Search(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomainSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Searches the specified NamedProtectionDomains as per criteria specified.
            </summary>
            <param name="criteria">Criteria to be used for search.</param>
            <param name="page">Page</param>
            <param name="accessibleNamedProtectionDomainList">List of NamedProtecitonDomain names on which current user is having access.</param>
            <param name="context">Custom context.</param>
            <returns>Search result having found objects.</returns>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager">
            <summary>
            SystemSecurity Manager  provides abstraction to accessing data for service layer
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.#cctor">
            <summary>
            Create provider list and keep them in memory
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.#ctor(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Set default provider to the application level default provider
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.#ctor(Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Set default provider to the passed provider while creating manager
            </summary>
            <param name="dataProvider">dataprovider object</param>    
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.SetProvider(Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityProvider)">
            <summary>
            Sets default provider to the passed provider
            </summary>
            <param name="dataProvider">dataprovider object</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.GetProvider(System.String)">
            <summary>
            returns specific dataprovider
            </summary>
            <param name="provider">provider name</param>
            <returns>dataprovider object</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Create``1(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This Is used to Create entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Update``1(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This Is used to Update entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Update``1(``0,``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This Is used to Update entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Delete``1(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            This Is used to delete entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.GetProfile``1(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Get entity object for passed in criteria
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="entity">passed in criteria</param>                
            <param name="context">context with corelation id etc</param>
            <returns>return entity object</returns> 
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Get``1(``0,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Get entity object for passed in criteria
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="entity">passed in criteria</param>                
            <param name="context">context with corelation id etc</param>
            <returns>return entity object</returns> 
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Get(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            
            </summary>
            <param name="systemRoleName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Get(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,System.Collections.Generic.List{Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            
            </summary>
            <param name="systemRoleName"></param>
            <param name="namedProtectionDomain"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Get(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext,System.Collections.Generic.List{Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain},Microsoft.IT.Security.Core.DataEntities.Page,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            
            </summary>
            <param name="tenantRoleContext"></param>
            <param name="page"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.GetSystemRoles(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To get the System roles of system user.
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.GetSystemAuthenticationRealms(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To  get the System Authetication realms
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.GetAttributeDataType(System.Collections.Generic.List{System.String},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To  get attribute data type
            </summary>
            <param name="attributes">list of attribute names</param>
            <param name="context">custom context</param>
            <returns>attribute name and data type association</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.GetCurrentSystemRoles(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To get the current system roles of system user.
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.GetCurrentDistinctSystemRoles(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            To get the distinct current system roles of system user.
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Assign``1(``0,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary> 
            Assign entities using appropriate provider
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="entities">entity collection</param>                
            <param name="context">context with corelation id etc</param>
            <returns>return entities list</returns>        
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Assign``2(``0,``1,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary> 
            Assign entities using appropriate provide
            </summary>
            <typeparam name="TEntity1"></typeparam>
            <typeparam name="TEntity2"></typeparam>
            <param name="entities1"></param>
            <param name="entity2"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Assign``2(``0,``1,Microsoft.IT.Security.Core.CustomContext)">
            <summary> 
            Assign entities using appropriate provide
            </summary>
            <typeparam name="TEntity1"></typeparam>
            <typeparam name="TEntity2"></typeparam>
            <param name="entities1"></param>
            <param name="entity2"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Unassign``1(``0,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Unassign entities using appropriate provider
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="entities">entity collection</param>                
            <param name="context">context with corelation id etc</param>
            <returns>return entities list</returns>        
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Unassign``2(``0,``1,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Unassign entities using appropriate provider
            </summary>
            <typeparam name="TEntity1"></typeparam>
            <typeparam name="TEntity2"></typeparam>
            <param name="entities1"></param>
            <param name="entity2"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Unassign``2(``0,``1,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Unassign entities using appropriate provider
            </summary>
            <typeparam name="TEntity1"></typeparam>
            <typeparam name="TEntity2"></typeparam>
            <param name="entities1"></param>
            <param name="entity2"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.IsUserInAnyRole(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Helper method to check whether user holds any system roles
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.IsUserLastinRole(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Helper method to check whether user is the last user in that role
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.CheckBusinessDomainManagerNPD(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,System.Collections.Generic.List{Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomain},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            CheckBusinessDomainManagerNPD check business domain manager's managed NPD list has at least one intersection with passed in namedprotectondomain list
            </summary>
            <param name="systemUser">system user</param>
            <param name="namedProtectionDomains">list of named protection domain</param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.IsUserLastinRole(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            
            </summary>
            <param name="systemUser"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.IsUserNotinSpecificRole(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            
            </summary>
            <param name="systemUser"></param>
            <param name="systemRoleName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.IsUserInSpecificRole(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemRoleName,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            
            </summary>
            <param name="systemUser"></param>
            <param name="systemRoleName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Ping(Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Ping method to check the database connectivity. 
            </summary>
            <param name="context">Custom context instance.</param>
            <returns>Database name.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Search(Microsoft.IT.Security.Core.DataEntities.NamedProtectionDomainSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Search NPD
            </summary>
            <param name="criteria"></param>
            <param name="page"></param>
            <param name="accessibleNamedProtectionDomainList"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.Search(Microsoft.IT.Security.Administration.RoleAdministration.DataEntities.RoleSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page,Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Search Role
            </summary>
            <param name="criteria"></param>
            <param name="page"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.GetContextChangedSystemUsers(System.Collections.Generic.List{Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser},Microsoft.IT.Security.Core.CustomContext)">
            <summary>
            Get system users whose context has been changed after the cached time.
            The changes includes:
                1) assigned the user to or unassigned the user from a system role, whose ContextLastModifiedDate > CachedDate
                2) deleted a user, whose ContextLastModifiedDate is null.
                3) added a deleted user back, whose ContextLastModifiedDate > CachedDate.
            </summary>
            <param name="cachedSystemUsers">The system user list in cache.</param>
            <param name="context">The context.</param>
            <returns>The system users.</returns>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.SystemSecurityDefaultProvider">
            <summary>
            Get default dataprovider
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.DataProviders.SystemSecurityManager.ProviderList">
            <summary>
            get list of all the configured dataprovider
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityCacheService">
            <summary>
            Define the contract of the service to manage system security cache.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityCacheService.Remove(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <summary>
            Remove the cache entry for the system user.
            </summary>
            <param name="systemUser">The sytem user.</param>
            <returns>true if removed. false if not exists.</returns>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService">
            <summary>
            The purpose of this service is to manage system roles and system users.
            </summary>
            <remarks>All the API calls are audited. </remarks>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.Ping(Microsoft.IT.Security.Core.Diagnostics.MonitorLevel)">
             <summary>
             Ping method is used to check whether the SSM service is communication with SSM Database.
             </summary>
             <param name="level"><see cref="T:Microsoft.IT.Security.DiagnosticsLibrary.MonitorLevel"/> class.</param>
             <returns>return ping status</returns>
             <para>Use below code to ping Policy Administration Point Service.</para>
            <example>
             <code>
                 using (SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient())
                 {
                     MonitoredServicesResponse response = client.Ping(MonitorLevel.Level0);
            
                 }
              </code>
              </example>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.AssignUserAsBusinessDomainManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
             <summary>
             	<c>AssignUserAsBusinessDomainManager</c> API is used to assign a user as Business Domain manager for the given Named protection domain.
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
            <param name="namedProtectionDomainContext"><see cref="T:Microsoft.IT.Security.Common.NamedProtectionDomain"/> class.</param>
             <returns>int</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to assign user as Business Domain manager  in system.</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\richarb1";
                systemUser.SystemUserKey = systemUserKey;
                systemUser.FirstName = "Richrd";
                systemUser.LastName = "B";
                systemUser.Email = "Richarb1@microsoft.com";
                NamedProtectionDomainContext npdContext = new NamedProtectionDomainContext();
                npdContext.NamedProtectionDomain = "ITAuthorizeInternal";
                client.AssignUserAsBusinessDomainManager(systemUser, npdContext);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault">When the passed in user is either in  BDM role or Auditor role.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">When the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.AssignUserAsResourceManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
             <summary>
             	<c>AssignUserAsResourceManager</c> API is used to assign a user as Resource manager.
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
            <param name="namedProtectionDomainContext"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.NamedProtectionDomainContext"/> class.</param>
             <returns>int</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to assign user as Resource manager  in system.</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\richarb1";
                systemUser.SystemUserKey = systemUserKey;
                systemUser.FirstName = "Richrd";
                systemUser.LastName = "B";
                systemUser.Email = "Richarb1@microsoft.com";
                NamedProtectionDomainContext npdContext = new NamedProtectionDomainContext();
                npdContext.NamedProtectionDomain = "ITAuthorizeInternal";
                client.AssignUserAsResourceManager(systemUser, npdContext);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault">When the passed in user is either in  BDM role or Auditor role.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">When the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.AssignUserAsAccountManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext)">
             <summary>
             	<c>AssignUserAsAccountManager</c> API is used to assign a user as Account manager for a given role context
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
            <param name="tenantRole"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.TenantRoleContext"/> class.</param>
            <returns>int</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to assign user as Account manager for a given role context  .</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\richarb1";
                systemUser.SystemUserKey = systemUserKey;
                systemUser.FirstName = "Richrd";
                systemUser.LastName = "B";
                systemUser.Email = "Richarb1@microsoft.com";
                TenantRoleContext roleContext = new TenantRoleContext();
                roleContext.RoleName = "HelpAdmin";
                roleContext.NamedProtectionDomain = "ITAuthorizeInternal";
                client.AssignUserAsAccountManager(systemUser, roleContext);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.AssignUserAsGlobalAccountManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
             <summary>
             	<c>AssignUserAsGlobalAccountManager</c> API is used to assign a user as Global Account manager for a given NPD context
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
            <param name="npdContext"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.NamedProtectionDomainContext"/> class.</param>
            <returns>Number of actions performed. It will return 2 if a new user gets created and system role is assigned else it will return 1</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to assign user as Global Account manager for a NPD.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\useralias";
                systemUser.SystemUserKey = systemUserKey;
                NamedProtectionDomainContext npdContext = new NamedProtectionDomainContext();
                npdContext.NamedProtectionDomain = "NPD Name";
                client.AssignUserAsGlobalAccountManager(systemUser, npdContext);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault">When there is internal problem performing the action that is unhandled</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault">When the operation is invalid</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault">When the assignment already exists</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault">When the object (such as NPD used) is not found in the system</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">When the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.AssignUserAsSupportEngineer(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
             <summary>
             	<c>AssignUserAsSupportEngineer</c> API is used to assign a user as Support Engineer. This operations also crates the system user if the user does not exist.
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
            <returns>int</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to assign user as Support Engineer a  in system.</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\richarb1";
                systemUser.SystemUserKey = systemUserKey;
                systemUser.FirstName = "Richrd";
                systemUser.LastName = "B";
                systemUser.Email = "Richarb1@microsoft.com";
                client.AssignUserAsSupportEngineer(systemUser);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault">When the passed in user is either in Support Engineer role or Auditor role.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">When the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.AssignUserAsHelpDesk(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
             <summary>
             	<c>AssignUserAsHelpDesk</c> API is used to assign a user as HelpDesk.This operations also crates the system user if the user does not exist.
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
            <returns>int</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to assign user as HelpDesk a  in system.</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\richarb1";
                systemUser.SystemUserKey = systemUserKey;
                systemUser.FirstName = "Richrd";
                systemUser.LastName = "B";
                systemUser.Email = "Richarb1@microsoft.com";
                client.AssignUserAsHelpDesk(systemUser);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault">&gt;When the passed in user is either in HelpDesk role or Auditor role.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.AssignUserAsAuditor(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
             <summary>
             	<c>AssignUserAsAuditor</c> API is used to assign a user as Auditor.This operations also crates the system user if the user does not exist.
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
            <returns>int</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to assign user as Auditor  in system.</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\richarb1";
                systemUser.SystemUserKey = systemUserKey;
                systemUser.FirstName = "Richrd";
                systemUser.LastName = "B";
                systemUser.Email = "Richarb1@microsoft.com";
                client.AssignUserAsAuditor(systemUser);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault">When the passed in user has other system  roles.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.UnassignUserAsSupportEngineer(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
             <summary>
             	<c>UnassignUserAsSupportEngineer</c> API is used to assign a user as Auditor.
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
            <returns>int</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to Unassign User from SupportEngineer role in system.</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\richarb1";
                systemUser.SystemUserKey = systemUserKey;
                systemUser.FirstName = "Richrd";
                systemUser.LastName = "B";
                systemUser.Email = "Richarb1@microsoft.com";
                client.UnassignUserAsSupportEngineer(systemUser);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.UnassignUserAsHelpDesk(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
             <summary>
             	<c>UnassignUserAsHelpDesk</c> API is used to unassign a user as Helpdesk.
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
            <returns>int</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to Unassign User from HelpDesk role in system.</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\richarb1";
                systemUser.SystemUserKey = systemUserKey;
                systemUser.FirstName = "Richrd";
                systemUser.LastName = "B";
                systemUser.Email = "Richarb1@microsoft.com";
                client.UnassignUserAsHelpDesk(systemUser);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.UnassignUserAsAuditor(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
             <summary>
             	<c>UnassignUserAsAuditor</c> API is used to unassign a user from Auditor role.
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
             <returns>int</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to unassign user from Auditor role in system.</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\richarb1";
                systemUser.SystemUserKey = systemUserKey;
                systemUser.FirstName = "Richrd";
                systemUser.LastName = "B";
                systemUser.Email = "Richarb1@microsoft.com";
                client.UnassignUserAsAuditor(systemUser);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.UnassignUserAsBusinessDomainManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
             <summary>
             	<c>UnassignUserAsBusinessDomainManager</c> API is used to unassign a user from Business domain manager role.
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
            <param name="namedProtectionDomainContext"><see cref="T:Microsoft.IT.Security.Common.NamedProtectionDomain"/> class.</param>
            <returns>int</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to unassign user from business domain role in system.</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\richarb1";
                systemUser.SystemUserKey = systemUserKey;
                systemUser.FirstName = "Richrd";
                systemUser.LastName = "B";
                systemUser.Email = "Richarb1@microsoft.com";
                NamedProtectionDomainContext npdContext = new NamedProtectionDomainContext();
                npdContext.NamedProtectionDomain = "ITAuthorizeInternal";
                client.UnassignUserAsBusinessDomainManager(systemUser, npdContext);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.UnassignUserAsResourceManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
             <summary>
             	<c>UnassignUserAsResourceManager</c> API is used to unassign a user from Resource manager role.
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
            <param name="namedProtectionDomainContext"><see cref="T:Microsoft.IT.Security.Common.NamedProtectionDomain"/> class.</param>
             <returns>int</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to unassign user from Resource manager role in system.</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\richarb1";
                systemUser.SystemUserKey = systemUserKey;
                systemUser.FirstName = "Richrd";
                systemUser.LastName = "B";
                systemUser.Email = "Richarb1@microsoft.com";
                NamedProtectionDomainContext npdContext = new NamedProtectionDomainContext();
                npdContext.NamedProtectionDomain = "ITAuthorizeInternal";
                client.UnassignUserAsResourceManager(systemUser, npdContext);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.UnassignUserAsAccountManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext)">
             <summary>
             	<c>UnassignUserAsAccountManager</c> API is used to unassign a user as Account manager for a given role context
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
            <param name="tenantRole"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.TenantRoleContext"/> class.</param>
             <returns>int</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to unassign user as Account manager for a given role context  .</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\richarb1";
                systemUser.SystemUserKey = systemUserKey;
                systemUser.FirstName = "Richrd";
                systemUser.LastName = "B";
                systemUser.Email = "Richarb1@microsoft.com";
                TenantRoleContext roleContext = new TenantRoleContext();
                roleContext.RoleName = "HelpAdmin";
                roleContext.NamedProtectionDomain = "ITAuthorizeInternal";
                client.AssignUserAsAccountManager(systemUser, roleContext);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.UnassignUserAsGlobalAccountManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
             <summary>
             	<c>UnassignUserAsGlobalAccountManager</c> API is used to unassign a user from Global Account manager role of a NPD
             </summary>
            <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
            <param name="npdContext"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.NamedProtectionDomainContext"/> class.</param>
            <returns>Number of actions performed. It will return 2 if the role gets unassigned and user gets deleted (because of the last role)</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to unassign user from Global Account manager role of a NPD.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\useralias";
                systemUser.SystemUserKey = systemUserKey;
                NamedProtectionDomainContext npdContext = new NamedProtectionDomainContext();
                npdContext.NamedProtectionDomain = "NPD Name";
                client.UnassignUserAsGlobalAccountManager(systemUser, npdContext);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InternalErrorFault">When there is internal problem performing the action that is unhandled</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidOperationFault">When the operation is invalid</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectAlreadyExistsFault">When the assignment already exists</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.ObjectNotFoundFault">When the object (such as NPD used) is not found in the system</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">When the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.GetSupportEngineers">
             <summary>
             	<c>GetSupportEngineers</c> API is used to get support engineers
             </summary>
             <returns>List&lt;SystemUser&gt; </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             <para>Use below code to get support engineers in system.</para>
             <para>.</para>
             <code>
                    SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                   List&lt;SystemUser&gt; systemUsers =  client.GetSupportEngineers();
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.GetHelpDesks">
             <summary>
             	<c>GetHelpDesks</c> API is used to get System users who are in HelpDesk role
             </summary>
             <returns>List&lt;SystemUser&gt;</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             <para>Use below code to get system users in helpdesk role in system.</para>
             <para>.</para>
             <code>
                    SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                    List&lt;SystemUser&gt; systemUsers =  client.GetHelpDesks();
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.GetAuditors">
             <summary>
             	<c>GetAuditors</c> API is used to get System users who are in Auditor role.
             </summary>
             <returns>List&lt;SystemUser&gt; </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             <para>Use below code to get system users in Auditor role in system.</para>
             <para>.</para>
             <code>
                    SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                    List&lt;SystemUser&gt; systemUsers =  client.GetAuditors();
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.GetMySystemRoles">
             <summary>
             	<c>GetMySystemRoles</c> API is used to get my System roles.
             </summary>
             <returns>List&lt;SystemRoleAssignment&gt; </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             <para>Use below code to get my system roles.</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                List&lt;SystemRoleAssignment&gt; roleAssignments =  client.GetMySystemRoles();
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.GetSystemRolesOfUser(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
             <summary>
             	<c>GetSystemRolesOfUser</c> API is used to get System roles for passed in system user.
             </summary>
             <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
             <returns>List&lt;SystemRoleAssignment&gt; </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             <para>Use below code to get system roles for passed in system user.</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                SystemUser systemUser = new SystemUser();
                SystemUserKey systemUserKey = new SystemUserKey();
                SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                realmKey.Name = "corp.microsoft.com";
                systemUserKey.SystemAuthenticationRealmKey = realmKey;
                systemUserKey.Key = @"REDMOND\richarb1";
                systemUser.SystemUserKey = systemUserKey;
                systemUser.FirstName = "Richrd";
                systemUser.LastName = "B";
                systemUser.Email = "Richarb1@microsoft.com";
                List&lt;SystemRoleAssignment&gt; roleAssignments =  client.GetSystemRolesOfUser(systemUser);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.GetBusinessDomainManagersByNamedProtectionDomain(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
             <summary>
             	<c>GetBusinessDomainManagersByNamedProtectionDomain</c> API is used to get System users who are in BDM role in specified NPD
             </summary>
             <param name="namedProtectionDomainContext"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.NamedProtectionDomainContext"/> class.</param>
             <returns> List&lt;SystemUser&gt;</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             <para>Use below code to get system users in BDM role in specified NPD.</para>
             <para>.</para>
             <code>
                  SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                  NamedProtectionDomainContext npdContext = new NamedProtectionDomainContext();
                  npdContext.NamedProtectionDomain = "ITAuthorizeInternal";
                  List&lt;SystemUser&gt; systemUsers = client.GetBusinessDomainManagersByNamedProtectionDomain(npdContext);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.GetResourceManagersByNamedProtectionDomain(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
             <summary>
             	<c>GetResourceManagersByNamedProtectionDomain</c> API is used to get System users who are in Resource Manager role in specified NPD
             </summary>
             <param name="namedProtectionDomainContext"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.NamedProtectionDomainContext"/> class.</param>
             <returns>List&lt;SystemUser&gt; </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             <para>Use below code to get system users in Resource Manager role in specified NPD.</para>
             <para>.</para>
             <code>
                  SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                  NamedProtectionDomainContext npdContext = new NamedProtectionDomainContext();
                  npdContext.NamedProtectionDomain = "ITAuthorizeInternal";
                  List&lt;SystemUser&gt; systemUsers= client.GetResourceManagersByNamedProtectionDomain(npdContext);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.GetAccountManagersByRolesInNamedProtectionDomain(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
             <summary>
             	<c>GetAccountManagersByRolesInNamedProtectionDomain</c> API is used to get System users who are in Account Manager role in specified NPD
             </summary>
             <param name="namedProtectionDomainContext"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.NamedProtectionDomainContext"/> class.</param>
             <returns>List&lt;SystemUser&gt; </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             <para>Use below code to get system users in Account Manager role in specified NPD.</para>
             <code>
                  SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                  NamedProtectionDomainContext npdContext = new NamedProtectionDomainContext();
                  npdContext.NamedProtectionDomain = "ITAuthorizeInternal";
                  List&lt;SystemUser&gt; users = client.GetAccountManagersByRolesInNamedProtectionDomain(npdContext);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.GetAccountManagersByRole(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext)">
             <summary>
               <c>GetAccountManagersByRole</c> API is used to get System users who are in Account Manager role.
             </summary>
             <param name="tenantRoleContext"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.TenantRoleContext"/> class.</param>
             <returns>List&lt;SystemUser&gt;</returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             <para>Use below code to assign user as Account manager for a given role context  .</para>
             <para>.</para>
             <code>
                SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                TenantRoleContext roleContext = new TenantRoleContext();
                roleContext.RoleName = "HelpAdmin";
                roleContext.NamedProtectionDomain = "ITAuthorizeInternal";
                List&lt;SystemUser&gt; users = client.GetAccountManagersByRole(roleContext);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.GetSystemAuthenticationRealms">
             <summary>
             	<c>GetSystemAuthenticationRealms</c> API is used to get Authetication realms in system.
             </summary>
             <returns>List&lt;SystemAuthenticationRealm&gt; </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is not audited.</para>
             </remarks>
             <example>
             <para>Use below code to get  authetication realms .</para>
             <para>.</para>
             <code>
                 SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                 List&lt;SystemAuthenticationRealm&gt; realms = client.GetSystemAuthenticationRealms();
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.UpdateSystemUserProfile(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
             <summary>
             	<c>UpdateSystemUserProfile</c> API is used to update System user profile for passed in system user.
             </summary>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <param name="systemUser"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUser"/> class.</param>
             <returns>int</returns>
             <example>
             <para>Use below code to update system user profile for passed in system user.</para>
             <code>
                 SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
                 SystemUser systemUser = new SystemUser();
                 SystemUserKey systemUserKey = new SystemUserKey();
                 SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
                 realmKey.Name = "corp.microsoft.com";
                 systemUserKey.SystemAuthenticationRealmKey = realmKey;
                 systemUserKey.Key = @"REDMOND\richarb1";
                 systemUser.SystemUserKey = systemUserKey;
                 systemUser.FirstName = "Richrd";
                 systemUser.LastName = "B";
                 systemUser.Email = "RicharbTest@microsoft.com";
                 client.UpdateSystemUserProfile(systemUser);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.ISystemSecurityManagementService.SearchSystemUserProfiles(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUserSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
             <summary>
             	<c>SearchSystemUsers</c> API is used to search System user profile for passed in system user.
             </summary>
             <param name="criteria"><see cref="T:Microsoft.IT.Security.SystemSecurityManagement.SystemUserSearchCriteria"/> class.</param>
             <param name="page"><see cref="T:Microsoft.IT.Security.Common.Server.Page"/> class.</param>
             <returns>SearchResult&lt;SystemUser&gt; </returns>
             <remarks>
             	<para><c>Audit:</c> This API call is audited.</para>
             </remarks>
             <example>
             <para>Use below code to search system user profile for passed in system user.</para>
             <code>
               SystemSecurityManagementServiceClient client = new SystemSecurityManagementServiceClient();
               SystemUserKey systemUserKey = new SystemUserKey();
               SystemAuthenticationRealmKey realmKey = new SystemAuthenticationRealmKey();
               realmKey.Name = "corp.microsoft.com";
               systemUserKey.SystemAuthenticationRealmKey = realmKey;
               systemUserKey.Key = @"REDMOND\richarb1";
               SystemUserSearchCriteria criteria = new SystemUserSearchCriteria();
               Page page = new Page();
               page.Number = 1;
               page.Size = 3;
               criteria.SystemUserKey = systemUserKey.Key;
               SSM.SearchResultOfSystemUser result= client.SearchSystemUserProfiles(criteria,page);
             </code>
             </example>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.InvalidArgumentFault">Validation failed exception. Like null check, max length check, invalid character check.</exception>
            <exception cref="T:Microsoft.IT.Security.Core.Exceptions.UnauthorizedAccessFault">when the user is not authorized to perform the operation</exception>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.MethodCacheEntry">
            <summary>
            Represents a cached method entry.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.MethodCacheEntry.IsPermitted">
            <summary>
            Is permitted.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.MethodCacheEntry.MethodScopes">
            <summary>
            The scope of the method.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.MethodScope">
            <summary>
            Scope of a method.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.MethodScope.Equals(Microsoft.IT.Security.Administration.SystemSecurity.MethodScope)">
            <summary>
            Compare this scope with another scope.
            </summary>
            <param name="methodScope">The method scope to compare.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.MethodScope.GetHashCode">
            <summary>
            Return hash code for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.MethodScope.Scope">
            <summary>
            Return the scope of this method.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.MethodScope.CheckParameter">
            <summary>
            If the method will check parameter.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.CachePullSynchronizer">
            <summary>
            The Pulling Synchronizer.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.CachePullSynchronizer.Pull">
            <summary>
            Pull changed system users and remove them from the cache.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.CachePullSynchronizer.StartPulling">
            <summary>
            Start pulling.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.CachePullSynchronizer.StartSchedule">
            <summary>
            Start the pulling at interval specified "SecurityModel/CachePullIntervalInMinutue" in appSettings.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityCache">
            <summary>
            The manager of the system security cache.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityCache.GetUserCacheKey(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <summary>
            Get cache key of the user.
            </summary>
            <param name="systemUser">The system user.</param>
            <returns>The cache key.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityCache.GetUserCacheKey(System.String,System.String)">
            <summary>
            Get the cache key of the user.
            </summary>
            <param name="callerRealm">The realm.</param>
            <param name="callerAlias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityCache.GetMethodCacheKey(System.String,System.String)">
            <summary>
            Get cache key of the method.
            </summary>
            <param name="resouceName">The resource name.</param>
            <param name="actionName">The action name.</param>
            <returns>The cache.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityCache.IsPermitted(System.String,System.String,System.String,System.String,Microsoft.IT.Security.Administration.SystemSecurity.MethodScope)">
            <summary>
             Check if the caller allowed to call a method
            </summary>
            <param name="callerRealm">The realm.</param>
            <param name="callerAlias">The alias.</param>
            <param name="resouceName">The resource name.</param>
            <param name="actionName">The action name.</param>
            <param name="methodScope">The method scope.</param>
            <returns>true if Permitted, or false.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityCache.Put(System.String,System.String,System.String,System.String,Microsoft.IT.Security.Administration.SystemSecurity.MethodScope,System.Boolean,System.Func{System.Boolean})">
            <summary>
            Put access check result into the cache.
            </summary>
            <param name="callerRealm">The realm.</param>
            <param name="callerAlias">The alias.</param>
            <param name="resouceName">The resource name.</param>
            <param name="actionName">The action name.</param>
            <param name="methodScope">The method scope.</param>
            <param name="isPermitted">true if permitted, or false.</param>
            <param name="accessCheck">The callback funtion. If not entry found in, will call the function, put the result into cache and return the result.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityCache.Remove(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <summary>
            Remove the entry for the system user.
            </summary>
            <param name="systemUser">The system user.</param>
            <returns>true if removed, false if not exist.</returns>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityCache.SynchronizeAll(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <summary>
            Remove the cache entries on all instances.
            </summary>
            <param name="systemUser">The system user.</param>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityCache.Item(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <summary>
            Enable index by the system user.
            </summary>
            <param name="systemUser">The system user.</param>
            <returns>If matched, return it. Or return null.</returns>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityCache.Entries">
            <summary>
            Return all entries.
            </summary>
            <returns>All entries.</returns>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityCacheService">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityCacheService.Remove(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.CachePushSynchronizer">
            <summary>
            The Pushing Synchronizer.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.CachePushSynchronizer.Remove(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <summary>
            Remove entry of the system user.
            </summary>
            <param name="systemUser">The system user.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.CachePushSynchronizer.Remove(System.String,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <summary>
            Remove entry of the system user.
            </summary>
            <param name="url">The endpoint of the service.</param>
            <param name="systemUser">The system user.</param>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityCacheUtility.CacheManager">
            <summary>
            Return the cache manager instance.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.SystemUserCacheEntry">
            <summary>
            Represents the cached item of system security cache.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.SystemUserCacheEntry.Methods">
            <summary>
            Return the methods.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.SystemUserCacheEntry.CurrentDistinctSystemRoles">
            <summary>
            The distinct system roles of the system user.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.SystemUserCacheEntry.CurrentSystemRoles">
            <summary>
            The system roles of the system user.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Security.Administration.SystemSecurity.SystemUserCacheEntry.DateCreated">
            <summary>
            The Utc time when the instance created.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient">
            <summary>
            Class that provides the implementation used to create Windows Communication Foundation (WCF) client objects that can call the System Security Management Service.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient"/> class.
            </summary>
            <param name="endpointConfigurationName">Name of the endpoint in the application configuration file.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient"/> class.
            </summary>
            <param name="endpointConfigurationName">Name of the endpoint in the application configuration file.</param>
            <param name="remoteAddress">The address of the service endpoint.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient"/> class.
            </summary>
            <param name="endpointConfigurationName">Name of the endpoint in the application configuration file.</param>
            <param name="remoteAddress">The address of the service endpoint.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient"/> class.
            </summary>
            <param name="binding">The binding.</param>
            <param name="remoteAddress">The address of the service endpoint.</param>
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.Ping(Microsoft.IT.Security.Core.Diagnostics.MonitorLevel)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.AssignUserAsBusinessDomainManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.AssignUserAsResourceManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.AssignUserAsAccountManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.AssignUserAsGlobalAccountManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.AssignUserAsSupportEngineer(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.AssignUserAsHelpDesk(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.AssignUserAsAuditor(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.UnassignUserAsSupportEngineer(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.UnassignUserAsHelpDesk(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.UnassignUserAsAuditor(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.UnassignUserAsBusinessDomainManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.UnassignUserAsResourceManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.UnassignUserAsAccountManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.UnassignUserAsGlobalAccountManager(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser,Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.GetSupportEngineers">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.GetHelpDesks">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.GetAuditors">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.GetMySystemRoles">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.GetSystemRolesOfUser(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.GetBusinessDomainManagersByNamedProtectionDomain(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.GetResourceManagersByNamedProtectionDomain(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.GetAccountManagersByRolesInNamedProtectionDomain(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.NamedProtectionDomainContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.GetAccountManagersByRole(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.TenantRoleContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.GetSystemAuthenticationRealms">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.UpdateSystemUserProfile(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUser)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Security.Administration.SystemSecurity.SystemSecurityManagementServiceClient.SearchSystemUserProfiles(Microsoft.IT.Security.Administration.SystemSecurity.DataEntities.SystemUserSearchCriteria,Microsoft.IT.Security.Core.DataEntities.Page)">
            <inheritdoc />
        </member>
    </members>
</doc>
