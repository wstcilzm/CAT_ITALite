<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.IT.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.IT.Configuration.CacheManagerOptionsElementCollection">
            <summary>
            A class used by the .NET infrastructure for parsing configuration files and creating a list 
            of <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptionsElementCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptionsElementCollection.CreateNewElement">
            <summary>
            Factory method to create a new <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/> instance.
            </summary>
            <returns>
            A newly created object instance of type <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptionsElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the property value that represents the key to the collection for this object instance.
            </summary>
            <param name="element">Element for which the key is being requested.</param>
            <returns>
            Returns the property value that represents the key to the collection for this object instance.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptionsElementCollection.IndexOf(Microsoft.IT.Configuration.CacheManagerOptionsElement)">
            <summary>
            Returns the index position of the passed in <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/>.
            </summary>
            <param name="cacheManagerOptionsElement">
            The <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/> for which the index position is being requested.
            </param>
            <returns>
            Returns the index position of the passed in <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptionsElementCollection.Add(Microsoft.IT.Configuration.CacheManagerOptionsElement)">
            <summary>
            Adds a <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/> to the collection.
            </summary>
            <param name="cacheManagerOptionsElement">
            <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/> to be added.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptionsElementCollection.Remove(Microsoft.IT.Configuration.CacheManagerOptionsElement)">
            <summary>
            Removes a <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/> from the collection.
            </summary>
            <param name="cacheManagerOptionsElement">
            <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/> to be removed.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptionsElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/> from the collection at the specified index position.
            </summary>
            <param name="index">
            Index position of the <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/> to be removed.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptionsElementCollection.Clear">
            <summary>
            Clears the entire collection.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.CacheManagerOptionsElementCollection.CollectionType">
            <summary>
            Gets a value that describes the <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> for this collection.
            Value returned is always ConfigurationElementCollectionType.AddRemoveClearMap.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.CacheManagerOptionsElementCollection.Item(System.Int32)">
            <summary>
            Gets and sets the item instance identified by the passed in index position.
            </summary>
            <param name="index">
            Position in the collection from which to retrieve the item
            </param>
            <returns>
            The <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/> stored at the requested index position.
            </returns>
        </member>
        <member name="P:Microsoft.IT.Configuration.CacheManagerOptionsElementCollection.Item(System.String)">
            <summary>
            Gets the item instance identified by the passed in name.
            </summary>
            <param name="name">
            Name of the item to retrieve.
            </param>
            <returns>
            The <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/> with the specified name.
            </returns>
        </member>
        <member name="T:Microsoft.IT.Configuration.ConfigurationProviderNotFoundException">
            <summary>
            Exception that is thrown by the core library configuration infrastructure when a request is made for a configuration
            value but there is no <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/> registered to handle the request.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Configuration.ConfigurationException">
            <summary>
            This exception class is the base class for all configuration related exceptions thrown by the core
            configuration infrastructure.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationException.#ctor(System.String)">
            <summary>
            Constructs the exception from the passed in <paramref name="message"/>.
            </summary>
            <param name="message">The message to be used for the exception.</param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs the exception from the passed in <paramref name="message"/> and <paramref name="innerException"/>.
            </summary>
            <param name="message">The message to be used for the exception.</param>
            <param name="innerException">The exception to be used as the InnerException identifying root cause.</param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs the exception from the passed in parameters.
            </summary>
            <param name="configValueName">
            The name of the configuration value being requested at the time the exception occurred.
            </param>
            <param name="configValueTypeName">
            The Type name of the configuration value's data type being requested at the time the exception occurred.
            </param>
            <param name="message">The message to be used for the exception.</param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Constructs the exception from the passed in parameters.
            </summary>
            <param name="configValueName">
            The name of the configuration value being requested at the time the exception occurred.
            </param>
            <param name="configValueTypeName">
            The Type name of the configuration value's data type being requested at the time the exception occurred.
            </param>
            <param name="message">The message to be used for the exception.</param>
            <param name="innerException">The exception to be used as the InnerException identifying root cause.</param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by serialization processes when deserializing the exception.
            </summary>
            <param name="info">The serialized data store from which the exception is reconstructed.</param>
            <param name="context">Not used.</param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.IT.Configuration.ConfigurationException.ConfigValueName">
            <summary>
            Gets the name of the configuration value being requested at the time the exception occurred.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.ConfigurationException.ConfigValueTypeName">
            <summary>
            Gets the Type name of the configuration value's data type being requested at the time the exception occurred.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderNotFoundException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderNotFoundException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderNotFoundException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Constructs the exception from the passed in parameters and initializes the message to the default text.
            </summary>
            <param name="configValueName">
            The name of the configuration value being requested at the time the exception occurred.
            </param>
            <param name="configValueTypeName">
            The Type name of the configuration value's data type being requested at the time the exception occurred.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderNotFoundException.#ctor(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructs the exception from the passed in parameters and initializes the message to the default text.
            </summary>
            <param name="configValueName">
            The name of the configuration value being requested at the time the exception occurred.
            </param>
            <param name="configValueTypeName">
            The Type name of the configuration value's data type being requested at the time the exception occurred.
            </param>
            <param name="innerException">The exception to be used as the InnerException identifying root cause.</param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderNotFoundException.#ctor(System.String,System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.IT.Configuration.ConfigurationInvalidTypeException">
            <summary>
            Exception that is thrown by the core library configuration infrastructure when a request is made for a configuration
            value that does exist but cannot be cast or parsed into the data type requested.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationInvalidTypeException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationInvalidTypeException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationInvalidTypeException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationInvalidTypeException.#ctor(System.String,System.String)">
            <summary>
            Constructs the exception from the passed in parameters and initializes the message to the default text.
            </summary>
            <param name="configValueName">
            The name of the configuration value being requested at the time the exception occurred.
            </param>
            <param name="configValueTypeName">
            The Type name of the configuration value's data type being requested at the time the exception occurred.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationInvalidTypeException.#ctor(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationInvalidTypeException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructs the exception from the passed in parameters and initializes the message to the default text.
            </summary>
            <param name="configValueName">
            The name of the configuration value being requested at the time the exception occurred.
            </param>
            <param name="configValueTypeName">
            The Type name of the configuration value's data type being requested at the time the exception occurred.
            </param>
            <param name="innerException">The exception to be used as the InnerException identifying root cause.</param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationInvalidTypeException.#ctor(System.String,System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationInvalidTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.IT.Configuration.ConfigurationExceptionEventArgs">
            <summary>
            Defines the arguments that are passed to the the <see cref="T:Microsoft.IT.Configuration.ConfigurationProviderManager"/>'s
            ExceptionHandler event.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Constructs an instance from the passed in parameters.
            </summary>
            <param name="exception">
            Initializes the readonly Exception property to this value.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationExceptionEventArgs.#ctor(System.Exception,System.String,System.String)">
            <summary>
            Constructs an instance from the passed in parameters.
            </summary>
            <param name="exception">
            Initializes the readonly Exception property to this value.
            </param>
            <param name="configurationValueName">
            The name of the configuration value being requested at the point the exception was thrown.
            </param>
            <param name="typeName">
            The type name of the value that was being requested when the exception was thrown.
            </param>
        </member>
        <member name="P:Microsoft.IT.Configuration.ConfigurationExceptionEventArgs.Exception">
            <summary>
            Gets the exception that is to be processed.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.ConfigurationExceptionEventArgs.ConfigurationValueName">
            <summary>
            Gets the name of the configuration value that was being requested when the exception was thrown.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.ConfigurationExceptionEventArgs.TypeName">
            <summary>
            Gets the type name of the value that was being requested when the exception was thrown.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.ConfigurationExceptionEventArgs.WrappedException">
            <summary>
            Gets and sets a value that represents the exception that the <see cref="T:Microsoft.IT.Configuration.ConfigurationProviderManager"/>
            is to throw instead of the original.  This returned value should wrap the passed in exception
            as the innerException.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Configuration.ConfigurationValueNotFoundException">
            <summary>
            Exception that is thrown by the core library configuration infrastructure when a request is made for a configuration
            value that does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationValueNotFoundException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationValueNotFoundException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationValueNotFoundException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationValueNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Constructs the exception from the passed in parameters and initializes the message to the default text.
            </summary>
            <param name="configValueName">
            The name of the configuration value being requested at the time the exception occurred.
            </param>
            <param name="configValueTypeName">
            The Type name of the configuration value's data type being requested at the time the exception occurred.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationValueNotFoundException.#ctor(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationValueNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructs the exception from the passed in parameters and initializes the message to the default text.
            </summary>
            <param name="configValueName">
            The name of the configuration value being requested at the time the exception occurred.
            </param>
            <param name="configValueTypeName">
            The Type name of the configuration value's data type being requested at the time the exception occurred.
            </param>
            <param name="innerException">The exception to be used as the InnerException identifying root cause.</param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationValueNotFoundException.#ctor(System.String,System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationValueNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.IT.Configuration.DiagnosticsSection">
            <summary>
            Represents the &lt;diagnostics&gt; section of the application configuration file.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.DiagnosticsSection.PostDeserialize">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.DiagnosticsSection.InitializeDiagnosticsSection">
            <summary>
            Sets the internal private diagnosticsSection variable if needed. Safe to call repeatedly.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.DiagnosticsSection.GetTimerOptionsElement(System.String)">
            <summary>
            Gets the currently configured values for <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> with the 
            specified <paramref name="name"/> as found in the &lt;diagnostics&gt; section of the app.config.
            If <paramref name="name"/> is null or empty the default name will be used.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.DiagnosticsSection.GetCacheManagerOptionsElement(System.String)">
            <summary>
            Gets the currently configured values for <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/> with the 
            specified <paramref name="name"/> as found in the &lt;diagnostics&gt; section of the app.config.
            If <paramref name="name"/> is null or empty the default name will be used.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.DiagnosticsSection.CacheManagerOptionExists(System.String)">
            <summary>
            Determines if Cache manager options for a given <see paramref="name"/> exists in application configuration file or not.
            </summary>
            <param name="name">
            Name of <see cref="T:Microsoft.IT.Configuration.CacheManagerOptions"/> which is being checked whether it exists or not.
            </param>
            <returns>
            true if exists in configuraiton file else false.
            </returns>
        </member>
        <member name="P:Microsoft.IT.Configuration.DiagnosticsSection.CacheManagerOptionsElements">
            <summary>
            Gets the collection of <see cref="T:Microsoft.IT.Configuration.CacheManagerOptionsElement"/> entries in the &lt;cacheManagerOptions&gt; element 
            of the &lt;diagnostics&gt; section of the app.config.  These entries 
            define the values to be used for instances of <see cref="T:Microsoft.IT.Configuration.CacheManagerOptions"/> 
            which control the parameters of how instrumentation data is cached in memory before being flushed to a persistent repository
            via the DiagnosticsCacheManager class.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.DiagnosticsSection.TimerOptionsElements">
            <summary>
            Gets the collection of <see cref="T:Microsoft.IT.Configuration.TimerOptionsElementCollection"/> entries in the &lt;timerOptions&gt; element 
            of the &lt;diagnostics&gt; section of the app.config.  These entries 
            define the values to be used by TraceListeners and the <see cref="T:Microsoft.IT.ServiceModel.TimingBehavior"/> to control
            which what data is allowed to be passed outside of the application.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Configuration.TimerOptionsElementCollection">
            <summary>
            A class used by the .NET infrastructure for parsing configuration files and creating a list 
            of <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptionsElementCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptionsElementCollection.CreateNewElement">
            <summary>
            Factory method to create a new <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> instance.
            </summary>
            <returns>
            A newly created object instance of type <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptionsElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the property value that represents the key to the collection for this object instance.
            </summary>
            <param name="element">Element for which the key is being requested.</param>
            <returns>
            Returns the property value that represents the key to the collection for this object instance.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptionsElementCollection.IndexOf(Microsoft.IT.Configuration.TimerOptionsElement)">
            <summary>
            Returns the index position of the passed in <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/>.
            </summary>
            <param name="timerOptionsElement">
            The <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> for which the index position is being requested.
            </param>
            <returns>
            Returns the index position of the passed in <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptionsElementCollection.Add(Microsoft.IT.Configuration.TimerOptionsElement)">
            <summary>
            Adds a <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> to the collection.
            </summary>
            <param name="timerOptionsElement">
            <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> to be added.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptionsElementCollection.Remove(Microsoft.IT.Configuration.TimerOptionsElement)">
            <summary>
            Removes a <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> from the collection.
            </summary>
            <param name="timerOptionsElement">
            <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> to be removed.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptionsElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> from the collection at the specified index position.
            </summary>
            <param name="index">
            Index position of the <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> to be removed.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptionsElementCollection.Clear">
            <summary>
            Clears the entire collection.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.TimerOptionsElementCollection.CollectionType">
            <summary>
            Gets a value that describes the <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> for this collection.
            Value returned is always ConfigurationElementCollectionType.AddRemoveClearMap.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.TimerOptionsElementCollection.Item(System.Int32)">
            <summary>
            Gets and sets the item instance identified by the passed in index position.
            </summary>
            <param name="index">
            Position in the collection from which to retrieve the item
            </param>
            <returns>
            The <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> stored at the requested index position.
            </returns>
        </member>
        <member name="P:Microsoft.IT.Configuration.TimerOptionsElementCollection.Item(System.String)">
            <summary>
            Gets the item instance identified by the passed in name.
            </summary>
            <param name="name">
            Name of the item to retrieve.
            </param>
            <returns>
            The <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> with the specified name.
            </returns>
        </member>
        <member name="T:Microsoft.IT.DataEntities.ConfigurationCollection">
            <summary>
            Represents collection of Configuration
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.ConfigurationSetting">
            <summary>
            Represents a configuration item
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.ConfigurationSetting.Name">
            <summary>
            Get or sets configuration name
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.ConfigurationSetting.Value">
            <summary>
            Gets or sets value for the configuration
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.CoreApplicationEvents">
            <summary>
            A static class that provides the names of all <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/>s used within a single application.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.CoreApplicationEvents.DiagnosticsTraceListenerWarning">
            <summary>
            A string constant identifying an <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> with a MonitoringEventId of "1", a MonitoringEventType of "Warning" with a name of "DiagnosticsTraceListenerWarning".
            It takes 1 parameter(s).
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.CoreApplicationEvents.ProxyTimerManagerNotConfigured">
            <summary>
            A string constant identifying an <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> with a MonitoringEventId of "2", a MonitoringEventType of "Warning" with a name of "ProxyTimerManagerNotConfigured".
            It takes 1 parameter(s).
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.CoreApplicationEvents.PerformanceCountersNotRegistered">
            <summary>
            A string constant identifying an <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> with a MonitoringEventId of "3", a MonitoringEventType of "Warning" with a name of "PerformanceCountersNotRegistered".
            It takes 1 parameter(s).
            </summary>
        </member>
        <member name="T:Microsoft.IT.Configuration.AppSettingsConfigurationProvider">
            <summary>
            This <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/> provides an implementation that utilizes the out of box capabilities
            of the .NET app.config file's &lt;appSettings&gt; element.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Configuration.ConfigurationProvider">
            <summary>
            This interface defines the methods to acquire configuration values.
            It allows a developer to supply their own custom configuration provider.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProvider.Initialize(System.String)">
            <summary>
            This method should be called by any application as part of a two phase constructruction of 
            a new instance prior to invoking any GetValue() calls.  This allows
            derived classes to implement and to perform any required initialization.
            </summary>
            <param name="initializationData">
            A string value, the format of which is defined by the derived class,
            to allow a custom provider to acquire any specific values needed.  The format of this
            value is completely up to the provider for which it is used.  For example, the AppSettingsProvider makes no
            use of this at all and the RxpConfigurationManagerProvider passes in a comma delimited list of
            values representing the ComponentName and Environment to which to connect.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProvider.GetValue``1(System.String)">
            <summary>
            This method is called to acquire a configuration value.  Implementors override this method to provide custom
            implementation. The base class implementation handles passing the call down the chain when a derived class
            chooses to not process.
            </summary>
            <typeparam name="T">
            The type of value being retrieved.  The expected types are instrinsic types like int, string, DateTime, etc.
            </typeparam>
            <param name="name">
            The name of the configuration value to retrieve.
            </param>
            <returns>
            Returns the value of the requested configuration item.
            </returns>
            <remarks>
            Implementors of derived classes should implement this method such that when it cannot locate the value
            to return it calls the base class implementation which will pass the call down the chain or throw
            a <see cref="T:Microsoft.IT.Configuration.ConfigurationValueNotFoundException"/> exception if there are no more providers in the chain.
            </remarks>
            <exception cref="T:Microsoft.IT.Configuration.ConfigurationValueNotFoundException">
            Thrown when the requested configuration value does not exist.
            </exception>
            <exception cref="T:Microsoft.IT.Configuration.ConfigurationInvalidTypeException">
            Thrown when the requested configuration value does exist but cannot be represented by the data
            type specified by the <typeparamref name="T"/> type parameter.
            </exception>
            <exception cref="T:Microsoft.IT.Configuration.ConfigurationProviderNotFoundException">
            Thrown when the application has removed all registered ConfigurationProvider instances from the chain.
            </exception>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProvider.GetValue``1(System.String,``0)">
            <summary>
            This method is called to acquire a configuration value or return a specified default if not found. 
            Implementors override this method to provide custom implementation. The base class implementation 
            handles passing the call down the chain when a derived class chooses to not process.
            </summary>
            <typeparam name="T">
            The type of value being retrieved.  The expected types instrinsic types like int, string, DateTime, etc.
            </typeparam>
            <param name="name">
            The name of the configuration value to retrieve.
            </param>
            <param name="defaultIfNotFound">
            A default value to be returned if the requested value is not found by the active configuration manager.
            </param>
            <returns>
            Returns the value of the requested configuration item.
            </returns>
            <remarks>
            Implementors of derived classes should implement this method such that when it cannot locate the value
            to return it calls the base class implementation which will pass the call down the chain or 
            return the passed in default value if there are no more providers in the chain.
            </remarks>
            <exception cref="T:Microsoft.IT.Configuration.ConfigurationValueNotFoundException">
            Thrown when the requested configuration value does not exist.
            </exception>
            <exception cref="T:Microsoft.IT.Configuration.ConfigurationInvalidTypeException">
            Thrown when the requested configuration value does exist but cannot be represented by the data
            type specified by the <typeparamref name="T"/> type parameter.
            </exception>
            <exception cref="T:Microsoft.IT.Configuration.ConfigurationProviderNotFoundException">
            Thrown when the application has removed all registered ConfigurationProvider instances from the chain.
            </exception>
        </member>
        <member name="P:Microsoft.IT.Configuration.ConfigurationProvider.ConfigurationItemsBasePath">
            <summary>
            Gets and sets a string that specifies the root path to a set of configuration values.  This property has no
            meaning for AppSettings that are simple name/value pairs but more sophisticated configuration managers that
            provide hierarchical data organization need to specify the base path.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.ConfigurationProvider.NextConfigurationProvider">
            <summary>
            Gets the next <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/> in the chain of providers.  This value is maintained
            by the <see cref="T:Microsoft.IT.Configuration.ConfigurationProviderManager"/> 'Chain', 'Replace' and 'Remove' methods.
            </summary>
            <remarks>
            Implementors of derived classes should use this property to acquire the next ConfigurationProvider
            in the chain and pass any unhandled requests to the corresponding GetValue() method.
            </remarks>
        </member>
        <member name="M:Microsoft.IT.Configuration.AppSettingsConfigurationProvider.GetValue``1(System.String)">
            <summary>
            Retrieves a configuration value from the application's app.config file, parses it into the requested type and returns it.
            </summary>
            <typeparam name="T">
            The data type of the requested value.
            </typeparam>
            <param name="name">
            Name of the value to retrieve (this maps to the 'key' attribute of the &lt;add&gt; element.
            </param>
            <returns>
            Returns the appropriately cast value of the configuration item requested.
            </returns>
            <exception cref="T:Microsoft.IT.Configuration.ConfigurationValueNotFoundException">
            Thrown when the requested configuration value does not exist.
            </exception>
            <exception cref="T:Microsoft.IT.Configuration.ConfigurationInvalidTypeException">
            Thrown when the requested configuration value does exist but cannot be represented by the data
            type specified by the <typeparamref name="T"/> type parameter.
            </exception>
        </member>
        <member name="M:Microsoft.IT.Configuration.AppSettingsConfigurationProvider.GetValue``1(System.String,``0)">
            <summary>
            Retrieves a configuration value from the application's app.config file, parses it into the requested type and returns it.
            </summary>
            <typeparam name="T">
            The data type of the requested value.
            </typeparam>
            <param name="name">
            Name of the value to retrieve (this maps to the 'key' attribute of the &lt;add&gt; element.
            </param>
            <param name="defaultIfNotFound">
            A default value to be returned if the requested value is not found by the active configuration manager.
            </param>
            <returns>
            Returns the appropriately cast value of the configuration item requested.
            </returns>
            <exception cref="T:Microsoft.IT.Configuration.ConfigurationValueNotFoundException">
            Thrown when the requested configuration value does not exist.
            </exception>
            <exception cref="T:Microsoft.IT.Configuration.ConfigurationInvalidTypeException">
            Thrown when the requested configuration value does exist but cannot be represented by the data
            type specified by the <typeparamref name="T"/> type parameter.
            </exception>
        </member>
        <member name="T:Microsoft.IT.Configuration.ConfigurationProviderManager">
            <summary>
            A class that encapsulates the management of pluggable configuration value providers.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderManager.Initialize(Microsoft.IT.Configuration.ConfigurationProvider)">
            <summary>
            This method has been deprecated.  Replace the existing call to Intialize() with Chain() or Replace().  
            Use Chain() if you want to use the NextConfigurationProvider property to handle all unhandled configuration 
            values, use Replace() to mimic the deprecated Intialize() method most closely.
            </summary>
            <param name="configurationProvider">
            n/a
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderManager.Chain(Microsoft.IT.Configuration.ConfigurationProvider)">
            <summary>
            Inserts the new <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/> at the front of
            the chain of existing <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/>s.  This allows custom providers an ability to
            override for a subset of values and invoked the default handler for those values not specifically handled.
            </summary>
            <param name="configurationProvider">
            The user supplied <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/> object instance to use in the library for obtaining configuration values.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderManager.Replace(Microsoft.IT.Configuration.ConfigurationProvider)">
            <summary>
            Completely replaces the existing chain of <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/>s with 
            the <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/> supplied in the <paramref name="configurationProvider"/> parameter.
            Use this only when the default provider serves not purpose and you want to completely control all 
            configuration values with a single provider.
            </summary>
            <param name="configurationProvider">
            The user supplied <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/> object instance that will be used to replace the existing active provider.
            </param>
            <returns>
            Returns a reference to the chain of providers that was replaced.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderManager.Remove">
            <summary>
            Removes the <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/> that is at the front of the chain of 
            existing <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/>s.  This method is essentially the opposite of the Chain() method.
            </summary>
            <returns>
            Returns a reference to the head node that was removed.  The NextConfigurationProvider property of this node
            will have been set to null in order to completely disassociate it from the the remaining chain.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderManager.Clear">
            <summary>
            Clears all configured providers from the manager's provider chain.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderManager.GetProvider(System.Type)">
            <summary>
            Searches the chain for a <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/> of the type specified by the <paramref name="providerType"/> parameter
            and returns the first instance found.  If not found null is returned.
            </summary>
            <param name="providerType">
            The type of <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/> to find and return.
            </param>
            <returns>
            The first <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/> of the type specified by the <paramref name="providerType"/> parameter or null if not found.
            </returns>
        </member>
        <member name="P:Microsoft.IT.Configuration.ConfigurationProviderManager.Current">
            <summary>
            Gets the currently configured <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/> object to be used.  (The default if not explicitly set is 
            an instance of <see cref="T:Microsoft.IT.Configuration.AppSettingsConfigurationProvider"/> which reads the current executable's app.config file.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.ConfigurationProviderManager.ExceptionHandler">
            <summary>
            A callback event for which an application can register so that any exceptions that are thrown 
            from a call to acquire a configuration value from anywhere in the chain of handlers are passed 
            to the registered handler allowing it to wrap it in a application specific exception.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Configuration.ConfigurationProviderManager.RootConfigurationProvider">
            <summary>
            Internal class used only to wrap calls to the chain of providers so that exceptions that 
            might be thrown can be wrapped and rethrown based on the registered exception handler(s).
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderManager.RootConfigurationProvider.#ctor(Microsoft.IT.Configuration.ConfigurationProvider)">
            <summary>
            Creates a new instance initializing the NextConfigurationProvider instance to the passed in value.
            </summary>
            <param name="configurationProvider">
            The <see cref="T:Microsoft.IT.Configuration.ConfigurationProvider"/> instance to which all the real work will be delegated.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderManager.RootConfigurationProvider.GetValue``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderManager.RootConfigurationProvider.GetValue``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Configuration.ConfigurationProviderManager.RootConfigurationProvider.GetValue``1(System.String,``0,System.Boolean)">
            <summary>
            Private method that wraps the call to the next provider in the chain in a try/catch and
            allows all exceptions to be handled by the registered exception handlers;
            </summary>
            <typeparam name="T">
            The type of value being retrieved.  The expected types instrinsic types like int, string, DateTime, etc.
            </typeparam>
            <param name="name">
            The name of the configuration value to retrieve.
            </param>
            <param name="defaultIfNotFound">
            A default value to be returned if the requested value is not found by the active configuration manager.
            </param>
            <param name="throwIfNotFound">
            True to make the pass through call NextConfigurationProvider.GetValue&lt;T&gt;(name), false to call NextConfigurationProvider.GetValue&lt;T&gt;(name, defaultIfNotFound).
            </param>
            <returns>
            Returns the value of the requested configuration item or throws the exception provided by the registered ExceptionHandler.
            </returns>
        </member>
        <member name="T:Microsoft.IT.Configuration.CacheManagerOptionsElement">
            <summary>
            This class represents the various values that can be set via configuration file to control
            the behavior of the instrumentation infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.CacheManagerOptionsElement.Name">
            <summary>
            Specifies a logical name by which an application or caller can refer to this particular entry.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.CacheManagerOptionsElement.MaxItemsToCache">
            <summary>
            Gets and sets the value of maxItemsToCache attribute in the config file. This configuration dictates the maximum number of timers in the cache before the timers are flushed.
            The default is 20.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.CacheManagerOptionsElement.MaxTimeToCache">
            <summary>
            Gets and sets the value maxTimeToCache attribute in the config file. This configuration dictates how long the cache manager waits since first timer is added before the timers are flushed.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.CacheManagerOptionsElement.CapturePercentage">
            <summary>
            Gets and sets a percentage value between 0 and 100 that represents the percentage of timing events that should be captured.
            This value should be set to a statistically valid random sample size.  Defaults is 5% of total timing events.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.CacheManagerOptionsElement.TraceSourceName">
            <summary>
            Gets and sets the trace source to be used for trace listeners configuration to capture the cached items on flush.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Core.CollectionExtensions">
            <summary>
            Extends the .NET generic Collection&lt;T&gt; class with additional helper methods.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Core.CollectionExtensions.AddRange``1(System.Collections.ObjectModel.Collection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Appends one collection of data entities to the current collection.
            </summary>
            <typeparam name="T">The type of object instances contained in the collection and items list.</typeparam>
            <param name="collection">
            The collection instance to which the items will be appended.
            </param>
            <param name="items">
            The list of items to be appended to the collection.
            </param>
        </member>
        <member name="M:Microsoft.IT.Core.CollectionExtensions.Replace``1(System.Collections.ObjectModel.Collection{``0},``0,``0)">
            <summary>
            Replaces one member of the collection with another.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection which is to have its member replaced.</param>
            <param name="oldDataEntity">The old member to be removed.</param>
            <param name="newDataEntity">The new member to be added.</param>
        </member>
        <member name="T:Microsoft.IT.Core.CoreGlobals">
            <summary>
            A static class that contains a number of publicly exposed string constants used by the core assembly.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.InstrumentationXmlNamespace">
            <summary>
            XML namespace used for instrumentation related data contracts like the <see cref="T:Microsoft.IT.Diagnostics.Timer"/>.
            It has a value of 'http://schemas.microsoft.com/Microsoft.IT.Diagnostics/2011/07'.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.PerformanceCounterXmlNamespace">
            <summary>
            XML namespace used for PerformanceCounter XML metadata.
            It has a value of 'http://schemas.microsoft.com/2013/10/it/sdk/performancecounters'.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.CoreServicesXmlNamespace">
            <summary>
            XML namespace used for core data and fault contracts.  
            It has a value of 'http://Microsoft.IT.Services/2012/03'.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.ApplicationEventsXmlNamespace">
            <summary>
            XML namespace used for the ApplicationEvents XML schema.  It has a value of 'http://Microsoft.IT.Diagnostics/2011/12'.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.RootTimerHeaderName">
            <summary>
            Name of the header used to exchange the root timer between client and server. 
            The value returned is 'RootTimerV1'.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.CompressionHeaderName">
            <summary>
            Name of the header used to exchange the compression information between client and server. 
            The value returned is 'CompressionHeader'.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.DataExchangeLogicalActionHeaderName">
            <summary>
            The name of the logical action WCF header that uniquely specifies the method that is to be processed by the listener service.  Value: 'LogicalAction'.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.DataExchangeLogicalActionHeaderNamespace">
            <summary>
            The namespace used for the logical action WCF header that uniquely specifies the method that is to be processed by the listener service.  Value: 'http://Microsoft.IT.Services/2012/03'.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.DataExchangeDefaultEndpointUrlFormatString">
            <summary>
            The default format string used to form a URL to an installation of the AdapterListener web services.  Value: 'https://{0}/AdapterListener/DataExchangeService.svc'.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.DataExchangeClientEndpointBindingName">
            <summary>
            The name of the default client binding used for proxies to call an installation of the IDataExchangeService.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.ClientCompressionTimerDescription">
            <summary>
            Description used by the infrastructure for client-side <see cref="T:Microsoft.IT.Diagnostics.Timer"/> objects that contain 
            data representing compression values for the send request.
            The value returned is 'ClientCompression'.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.ClientDecompressionTimerDescription">
            <summary>
            Description used for client-side <see cref="T:Microsoft.IT.Diagnostics.Timer"/> objects that contain 
            data representing decompression values upon receiving the reply.
            The value returned is 'ClientDecompression'.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.DispatchCompressionTimerDescription">
            <summary>
            Description used by the infrastructure for server-side <see cref="T:Microsoft.IT.Diagnostics.Timer"/> objects that contain 
            data representing compression values for the send reply.
            The value returned is 'DispatchCompression'.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.DispatchDecompressionTimerDescription">
            <summary>
            Description used for server-side <see cref="T:Microsoft.IT.Diagnostics.Timer"/> objects that contain 
            data representing decompression values upon receiving the request.
            The value returned is 'DispatchDecompression'.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.TimerEventId">
            <summary>
            Constant used to hold the event id for the timer events
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.ApplicationEventsModuleName">
            <summary>
            The logical name used to locate the module's event definitions in ApplicationEvents.xml
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.MaximumAllowedLengthForTimerName">
            <summary>
            Constant used to hold the maximum allowed length for timer name
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.MaximumAllowedLengthForApplicationName">
            <summary>
            Constant used to hold the maximum allowed length for application
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.CoreGlobals.ClientIsIInstrumentedHeaderName">
            <summary>
            Name of the header used to indicate if the client is enabled for using the timers. 
            </summary>
        </member>
        <member name="M:Microsoft.IT.Core.CoreGlobals.GetPerformanceCountersInstance(System.Type)">
            <summary>
            Returns instance of the instrumentation performance counters for the type T. As the diagnostics cache manager is a generic class, one separate instance of the 
            performance counters needs to be maintained for each type for each the class is used. This method maintains and returns the instance of InstrumentationPerformanceCounters 
            for the provided type.
            </summary>
            <param name="type">Type used to instantiate the diagnostics cache manager class.</param>
            <returns>Returns an instance of InstrumentationPerformanceCounters</returns>
        </member>
        <member name="P:Microsoft.IT.Core.CoreGlobals.TimerListenerProxyProvider">
            <summary>
            Gets a singleton instance of a proxy provider that can be used to acquire a proxy to call the Timer data collection listener services configured
            via the default configuration value names of.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.CoreGlobals.AssemblyFileVersion">
            <summary>
            Gets the AssemblyFileVersion of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.CoreGlobals.ApplicationEventManager">
            <summary>
            Gets the <see cref="P:Microsoft.IT.Core.CoreGlobals.ApplicationEventManager"/> object instance that contains the definitions of all events that are 
            logged and/or used for the construction of exceptions.
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.ArgumentNullFault">
            <summary>
            Fault used to return <see cref="T:System.ArgumentNullException"/>s and their derivitives to the caller.
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.ArgumentFault">
            <summary>
            Fault used to return <see cref="T:System.ArgumentException"/>s and their derivitives to the caller.
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.ArgumentFault.ParameterName">
            <summary>
            Name of the parameter that was in error.
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.ArgumentOutOfRangeFault">
            <summary>
            Fault used to return <see cref="T:System.ArgumentOutOfRangeException"/>s and their derivitives to the caller.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.DiagnosticsTraceListener`1">
            <summary>
            This abstract class may be used as base class to write any trace listeners which in turn is derived from <see cref="T:System.Diagnostics.TraceListener"/>. 
            This class provides basic implementation for all the abstract methods of TraceListener class.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsTraceListener`1.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            This method casts the data into the expected type and invoke the Write(T) method.
            </summary>
            <param name="eventCache">Not used.</param>
            <param name="source">Not used.</param>
            <param name="eventType">Not used.</param>
            <param name="id">Not used.</param>
            <param name="data">The <see cref="T:Microsoft.IT.Diagnostics.Timer"/> object instance that is to be logged/traced.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsTraceListener`1.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            This method expects the <paramref name="data"/> parameter to be an array of <see cref="T:Microsoft.IT.Diagnostics.Timer"/> instances and 
            loops delegating the processing to the TraceData overload that accepts a single data object.
            </summary>
            <param name="eventCache">Not used.</param>
            <param name="source">Not used.</param>
            <param name="eventType">Not used.</param>
            <param name="id">Not used.</param>
            <param name="data">An array of <see cref="T:Microsoft.IT.Diagnostics.Timer"/> object instances that are to be logged/traced.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsTraceListener`1.Write(System.Object)">
            <summary>
            This method passed the work to store the passed in object (must be a <see cref="T:Microsoft.IT.Diagnostics.Timer"/>) to the Write(Timer) method.
            </summary>
            <param name="o">
            The <see cref="T:Microsoft.IT.Diagnostics.Timer"/> instance to be saved.  If not the right type this method does nothing.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsTraceListener`1.Write(`0)">
            <summary>
            Implementors of the diagnostics trace listener need only supply an implementation for this method.
            </summary>
            <param name="data">
            The instance to be reported on.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsTraceListener`1.Write(System.String)">
            <summary>
            Abstract method that must be implemented.  This implementation is simply a NOP since there is nothing to do without data.
            </summary>
            <param name="message">Ignored.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsTraceListener`1.WriteLine(System.String)">
            <summary>
            Abstract method that must be implemented.  This implementation is simply a NOP since there is nothing to do without data.
            </summary>
            <param name="message">Ignored.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsTraceListener`1.LogException(System.Data.SqlClient.SqlCommand,System.Exception)">
            <summary>
            Handles the logging of exceptions that occur writing to the database.
            </summary>
            <param name="sqlCommand">
            A <see cref="T:System.Data.SqlClient.SqlCommand"/> instance containing relevant context data.
            </param>
            <param name="exception">
            The error that is to be reported.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsTraceListener`1.LogException(System.Exception)">
            <summary>
            Handles the logging of exceptions that occur writing to the database.
            </summary>
            <param name="exception">
            The error that is to be reported.
            </param>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.ApplicationEvent">
            <summary>
            A class that contains information regarding an event that is worthy of being logged for
            diagnostic and or monitoring related purposes.  This class provides properties to describe
            the event and the corrective action to be taken when the event occurs.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.IMonitoringInfo">
            <summary>
            Describes an interface which custom exception classes can implement thereby
            making available to the certain generic error handlers the information required
            for robust event notifications that can be monitored by applications like
            System Center Operations Manager.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.IMonitoringInfo.MonitoringEventType">
            <summary>
            One of the enumerated <see cref="T:System.Diagnostics.TraceEventType"/> values depicting the severity of the 
            the event to be monitored.  Implementors of this interface should provide a default
            value of 'Error'.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.IMonitoringInfo.MonitoringEventId">
            <summary>
            A unique event identifier that is to be used by generic error handling and logging
            routines when reporting error events intended to be monitored.  This value will be
            put into the Window Event Log 'Event Id' field.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ApplicationEvent.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ApplicationEvent.ToString">
            <summary>
            Returns a human readable representation of the object instance.
            </summary>
            <returns>
            Returns a human readable representation of the object instance.
            </returns>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ApplicationEvent.Name">
            <summary>
            Gets and sets the logical name of the event.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ApplicationEvent.MonitoringEventId">
            <summary>
            Gets and sets the event id to be used when writing to the Windows EventLog.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ApplicationEvent.MonitoringEventType">
            <summary>
            Gets and sets the <see cref="T:System.Diagnostics.TraceEventType"/> value to be used when writing to the Windows EventLog.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ApplicationEvent.Category">
            <summary>
            Gets and sets the category values to be used when writing to the Windows EventLog.;
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ApplicationEvent.Message">
            <summary>
            Gets and sets the event message that describes the event.  This value typically answers the question of 'what' happened.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ApplicationEvent.Cause">
            <summary>
            Gets and sets the reason the event occurred. This value typically answers the question of 'why' it happened.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ApplicationEvent.Instructions">
            <summary>
            Gets and sets the instructions (typically to the operations team) on how to escalate, monitor and/or correct the problem that occurred.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.ApplicationEventException">
            <summary>
            An abstract base class from which applications can derive to support the generation of custom exceptions from 
            <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ApplicationEventException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ApplicationEventException.#ctor(System.String)">
            <summary>
            Constructs the exception from the passed in <paramref name="message"/>.
            </summary>
            <param name="message">The message to be used for the exception.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ApplicationEventException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs the exception from the passed in <paramref name="message"/> and <paramref name="innerException"/>.
            </summary>
            <param name="message">The message to be used for the exception.</param>
            <param name="innerException">The exception to be used as the InnerException identifying root cause.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ApplicationEventException.#ctor(Microsoft.IT.Diagnostics.ApplicationEvent)">
            <summary>
            Constructs the exception from the passed in <paramref name="applicationEvent"/>.  The Message property of the <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/>
            will be used as the Message property of the exception.
            </summary>
            <param name="applicationEvent">The predefined <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> instance containing the information to but used by the exception.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ApplicationEventException.#ctor(Microsoft.IT.Diagnostics.ApplicationEvent,System.Exception)">
            <summary>
            Constructs the exception from the passed in <paramref name="applicationEvent"/>.  The Message property of the <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/>
            will be used as the Message property of the exception.
            </summary>
            <param name="applicationEvent">The predefined <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> instance containing the information to but used by the exception.</param>
            <param name="innerException">The exception to be used as the InnerException identifying root cause.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ApplicationEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by serialization processes when deserializing the exception.
            </summary>
            <param name="info">The serialized data store from which the exception is reconstructed.</param>
            <param name="context">Not used.</param>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ApplicationEventException.EventId">
            <summary>
            Gets the unique identerfier for the exception.  This value is the same that is used for <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/>s that are 
            written to the Windows Event Log.  The value returned is the value that is stored in an IMonitoringInfo object in the 
            exception's Data collection.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.ApplicationEventManager">
            <summary>
            This class provides capabilities to retrieve event definitions from an XML file and deserialize them
            into a <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> instance to be used for logging purposes.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ApplicationEventManager.#ctor(System.String,System.String)">
            <summary>
            Constructs an instance of ApplicationEventManager using the <paramref name="moduleName"/> section of the 
            <paramref name="eventsXml"/> that is passed in.  
            </summary>
            <param name="moduleName">Name of the &lt;Module&gt; section that contains the events to be created by this instance.</param>
            <param name="eventsXml">The XML to be used.  This is typically an imbedded resource.</param>
            <remarks>
            The recommended practice is to create a ApplicationEvents.xml file as an imbedded resource for every compiled binary.
            Each file is capable of defining events for multiple modules.
            </remarks>
            <example>
            Here is a sample configuration file that can be processed by this class:
            <code>
            <![CDATA[
              <Module Name="MDM.Adapter" >
                <Events>
                  <Event Name="TestEvent" MonitoringEventId="1234" MonitoringEventType="Error" Category="2">
                    <Message>This is the message of the event and it support the use of substitution parameters:{0}{1}{2}</Message>
                    <Cause>This element should contain information regarding what caused the event</Cause>
                    <Instructions>This contains instructions for steps to be taken for monitoring and corrective action.</Instructions>
                  </Event>
                </Events>
            
                <Events>
                  <Event Name="TestEvent2" MonitoringEventId="5678" MonitoringEventType="Information" Category="0">
                    <Message>ditto</Message>
                    <Cause>ditto</Cause>
                    <Instructions>ditto</Instructions>
                  </Event>
                </Events>
              </Module>
            ]]>
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the <paramref name="eventsXml"/> does not contain a 'Module' element that matches the <paramref name="moduleName"/> passed in.
            </exception>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ApplicationEventManager.GetApplicationEvent(System.String,System.Object[])">
            <summary>
            Retrieves and returns the <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> instance associated with the passed in <paramref name="eventName"/>.
            </summary>
            <param name="eventName">Name of the <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> being requested</param>
            <param name="messageSubstitutionParameters">
            An array of objects that will be used as substitution parameters for the Message property.
            </param>
            <returns>
            The <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> instance associated with the passed in <paramref name="eventName"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="eventName"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="eventName"/> cannot be found on any event in the module.</exception>
            <exception cref="T:System.FormatException">Thrown if the Message property has more substitution parameters that were supplied in the <paramref name="messageSubstitutionParameters"/></exception>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ApplicationEventManager.TryGetApplicationEvent(System.String,System.Object[])">
            <summary>
            Retrieves and returns the <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> instance associated with the passed in <paramref name="eventName"/>.
            If the event name is not found null is returned.
            </summary>
            <param name="eventName">Name of the <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> being requested</param>
            <param name="messageSubstitutionParameters">
            An array of objects that will be used as substitution parameters for the Message property.
            </param>
            <returns>
            The <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> instance associated with the passed in <paramref name="eventName"/> if found, null otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ApplicationEventManager.Exists(System.String)">
            <summary>
            Checks the repository of events for the existence of the passed in <paramref name="eventName"/>.
            </summary>
            <param name="eventName">
            Name of the event for which to check existence.
            </param>
            <returns>
            True if the method is found, false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters">
            <summary>
            This class is generated from the meta-data file of the same name.  It provides the specific details for a
            an instance of an object that derives from the PerformanceCounters abstract base class.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.PerformanceCounters">
            <summary>
            This is an abstract base class that implements common safe methods for managing and incrementing Windows
            PerformanceCounters at runtime.  Derived classes need only to supply the abstract and virtual implementations
            that supply the meta-data used by this base class.
            </summary>
            <remarks>
            See the IT Platform SDK documentation for generation of derived classes via T4 templating against a single meta-data XML file.
            </remarks>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.#ctor">
            <summary>
            Default constructor initializes internal variables.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.Initialize(System.Boolean)">
            <summary>
            [deprecated] This method has been deprecated and will be removed in future releases.  Please use one of the InitializeCounters(...) overloads instead.
            </summary>
            <param name="reinitialize">
            When true, forces the method to dump and dispose of any preexisting counters and reinitialize all new ones.  This is typically only needed for unit tests.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.Initialize(System.String,System.Boolean)">
            <summary>
            [deprecated] This method has been deprecated and will be removed in future releases.  Please use one of the InitializeCounters(...) overloads instead.
            </summary>
            <param name="instanceName">
            Name to use as the instance name for the performance counters.
            </param>
            <param name="reinitialize">
            When true, forces the method to dump and dispose of any preexisting counters and reinitialize all new ones.  This is typically only needed for unit tests.
            </param>
            <remarks>
            This overload will initialize the RawValue of all counters to zero.
            </remarks>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.InitializeCounters(System.Boolean)">
            <summary>
            Creates and caches all of the performance counters defined by the derived class.
            </summary>
            <param name="setToZero">
            When true, the initialization process will set the RawValue of the counter to zero, false will retain the existing counter data.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.InitializeCounters(System.Boolean,System.String)">
            <summary>
            Creates and caches all of the performance counters defined by the derived class.  Use this overload for MultiInstance type counters.
            </summary>
            <param name="setToZero">
            When true, the initialization process will set the RawValue of the counter to zero, false will retain the existing counter data.
            </param>
            <param name="instanceName">
            Name to use as the instance name for the performance counters.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.IncrementSafe(System.String)">
            <summary>
            A safe method that will increment the specified performance counter if it exists and do nothing if it does not.
            </summary>
            <param name="performanceCounterName">Name of the counter to increment.</param>
            <returns>
            Returns the actual value by which the counter was incremented.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.IncrementBySafe(System.String,System.Int64)">
            <summary>
            A safe method that will increment the specified performance counter by the specified value if it exists and do nothing if it does not.
            Use this overload for counters that do not have a base counter or counters that do have a base counter that should be incremented by 1.
            </summary>
            <param name="performanceCounterName">Name of the counter to increment.</param>
            <param name="value">The amount by which to increment.</param>
            <returns>
            Returns the actual value by which the counter was incremented.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.IncrementBySafe(System.String,System.Int64,System.Int64)">
            <summary>
            A safe method that will increment the specified performance counter by the specified value if it exists and do nothing if it does not.
            Use this overload for counters where you want explicit control over how the base counter gets incremented.
            </summary>
            <param name="performanceCounterName">Name of the counter to increment.</param>
            <param name="value">The amount by which to increment the primary counter.</param>
            <param name="baseValue">The value by which the associate base counter is to be incremented.</param>
            <returns>
            Returns the actual value by which the counter was incremented.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.IncrementCounterGroup(System.String,Microsoft.IT.Diagnostics.Timer,System.Action)">
            <summary>
            This is a convenience method that will update an arbitrary number of counters based on whether or not the code block
            throws an exception and how the counter group is defined in the metadata.
            </summary>
            <param name="groupName">
            The name of the group of counters that is to be processed.
            </param>
            <param name="timer">
            An optional parameter that, when supplied, will be used to perform the timing of the duration of the callback.
            Pass this parameter only when your application has implemented the <see cref="T:Microsoft.IT.Diagnostics.IInstrumented"/> interface and you want 
            to use the same timings value for both the Timer instrumentation and the corresonding PerformanceCounter.
            </param>
            <param name="codeToBeProcessed">
            An optional callback for the code that is to be wrapped by this method.  When a callback is supplied the wrapper 
            will time the duration of the callback.  When the callback passed in is null no timing will be produced and since
            there can be no such thing as a failure the group counters that have an IncrementCondition of 'Always' or 'Success' will be incremented.
            </param>
            <returns>
            The length of time taken to execute the method.
            </returns>
            <remarks>
            This method will use the following logic to update/increment performance counters that were declared as part of 
            the passed in <paramref name="groupName"/> as follows...
            <para>
            A timer is started just prior to calling the <paramref name="codeToBeProcessed"/> and stopped immediately upon return.
            If an 'AverageTimer32' counter is defined in the group it will be updated with the elapsed time.
            </para>
            <para>
            If the <paramref name="codeToBeProcessed"/> does not throw an exception all PerformanceCounters declared with an IncrementCondition=Success
            will be updated.
            </para>
            <para>
            If the <paramref name="codeToBeProcessed"/> does throw an exception all PerformanceCounters declared with an IncrementCondition=Failure
            will be updated.
            </para>
            <para>
            Regardless of whether the <paramref name="codeToBeProcessed"/> throws an exception or not all PerformanceCounters declared with an IncrementCondition=Always
            will be updated.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.SetRawValue(System.String,System.Int64)">
            <summary>
            A safe method that will set the RawValue of the specified performance counter to the specified value if it exists and do nothing if it does not.
            </summary>
            <param name="performanceCounterName">Name of the counter to be set</param>
            <param name="value">The value to which the performance counter will be set.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.RegisterCounters(System.Boolean)">
            <summary>
            Provisions the platform SDK category and counter settings in the registry.  Note that is only works
            when called from an application that is running in an Admin security context and is provided primarily
            for developers to be able to simply run a unit test to provision the counters.
            </summary>
            <param name="replace">
            True will cause existing performance counters to be deleted prior to creating the new ones. 
            False will skip processing a counter category if that category already exists.
            </param>
            <returns>
            True if the operation completed successfully, false otherwise.
            </returns>
            <exception cref="T:System.UnauthorizedAccessException">Occurs when permissions are not adequate to detect the counters existence.</exception>
            <exception cref="T:System.InvalidOperationException">Occurs when a category exists but a specific counter does not.</exception>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.Shutdown">
            <summary>
            [deprecated] This method has been deprecated and will be removed in future releases.  Please use Dispose() instead.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.GetCounter(System.String)">
            <summary>
            This method utilizes a cache of performance counters to return a previously constructed
            instance.
            </summary>
            <param name="counterName">Name of the counter to acquire.</param>
            <returns>
            The requested PerformanceCounter or null if the counter requested has not yet been provisioned. 
            </returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.GetCounterGroup(System.String)">
            <summary>
            Computes and returns a readonly collection of PerformanceCounter names that have been designated as part of the 
            passed in <paramref name="groupName"/>.
            </summary>
            <param name="groupName">
            The name of the group of counters that is to be returned.
            </param>
            <returns>
            A readonly collection of PerformanceCounter names that have been designated as part of the 
            passed in <paramref name="groupName"/>.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.Uninitialize">
            <summary>
            Releases the managed resources of all instantiated counters.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounters.Dispose(System.Boolean)">
            <summary>
            Releases the managed resources of all instantiated counters.  Derived classes should release any other resources required 
            and call the base class implementation.
            </summary>
            <param name="disposing">
            True when called explicitly by code to release managed resources. False otherwise.
            </param>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.PerformanceCounters.CategoryName">
            <summary>
            Gets the category name for the performance counters
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.PerformanceCounters.CategoryHelp">
            <summary>
            Gets the category help text for the category of the performance of the counters
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.PerformanceCounters.CategoryType">
            <summary>
            Gets the category type for the category of the performance of the counters
            </summary>
            <remarks>
            Note: This is virtual instead of abstract to maintain backward compatibility with earlier releases.
            The default value if not overridden in the derived class is "MultiInstance".
            </remarks>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.PerformanceCounters.CounterCreationDataCollection">
            <summary>
            Counter creation data to be used for registration and initialization of the performance counters.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.PerformanceCounters.CounterGroups">
            <summary>
            Gets a dictionary keyed by GroupName that contains the names of the <see cref="T:System.Diagnostics.PerformanceCounter"/>s that are associated with said group.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.PerformanceCounters.InstanceName">
            <summary>
            Instance name for the performance counters
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.PerformanceCounters.Counters">
            <summary>
            Gets the collection of counters managed by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.PerformanceCounters.Count">
            <summary>
            Gets the count of counters that are managed by the PerformanceCounters instance.  This count includes the Base counters.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.PerformanceCounters.IsInitialized">
            <summary>
            Gets a value that specifies whether or not the performance counters have been initialized for this process.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.InstrumentationCounterCategoryName">
            <summary>(deprecated)</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.CachedTimersCountCounterName">
            <summary>(deprecated)</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.CapturePercentageCounterName">
            <summary>(deprecated)</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.AverageWebServiceCallsDurationCounterNameBase">
            <summary>(deprecated)</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.AverageWebServiceCallsDurationCounterName">
            <summary>(deprecated)</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.TotalObjectsReportedCounterName">
            <summary>Total Objects Reported is the total objects reported to cache manager by applications.</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.TotalObjectsCachedCounterName">
            <summary>Total Objects Cached is the total number of objects added to cache for persisting.</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.CacheManagerCacheSizeCounterName">
            <summary>Cache Manager Cache Size is the size of the cache at any given point of time.</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.TotalFlushesCounterName">
            <summary>Total Flushes is the total number of times the cache is flushed for persisting the cached items.</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.MaximumCacheSizeCounterName">
            <summary>Maximum Cache Size is the maximum number of items which can be cached before they are flushed by Cache Manager.</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.MaximumCacheTimeCounterName">
            <summary>Maximum Cache Time is the maximum time (in seconds) for which an item is cached in cache by Cache Manager.</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.SampleCollectionCounterName">
            <summary>Sample Collection % is the % of total reported objects which are cached for persistence.</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.TotalSuccessfulWebServiceCallsCounterName">
            <summary>Total Successful Web Service Calls is the total number of successful web service calls to persist the timers.</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.TotalFailedWebServiceCallsCounterName">
            <summary>Total Failed Web Service Calls is the total number of failed web service calls to persist the timers.</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.TotalWebServiceCallsCounterName">
            <summary>Total Web Service Calls is the total number of web service calls to persist the timers.</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.WebServiceCallAverageDurationCounterName">
            <summary>Web Service Call Avaerage Duration is the average amount of time (in seconds) that it takes in making one web service call.</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.WebServiceCallAverageDurationCounterNameBase">
            <summary>Obligatory base counter for Web Service Call Average Duration</summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.WebServiceCallsPerSecondCounterName">
            <summary>Web Service Calls Per Second is the number of web service calls attempted per second to persist the timers.</summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.GetCounterCreationData">
            <summary>
            Constructs and returns a CounterCreationDataCollection for the performance counters.
            </summary>
            <returns>A CounterCreationDataCollection for the the performance counters.</returns>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.CategoryName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.CategoryHelp">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.CategoryType">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.CounterCreationDataCollection">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.CounterNames">
            <summary>
            Gets a read-only collection of the names of all counters that are managed by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.InstrumentationPerformanceCounters.CounterGroupNames">
            <summary>
            Gets a read-only collection of the names of all counter groups that are managed by this instance.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.PerformanceCounterGroup">
            <summary>
            This class represents of collection of entries that collective comprise a group of PerformanceCounter metadata.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.PerformanceCounterGroupItem">
            <summary>
            xxx
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.PerformanceCounterGroupItem.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="incrementCondition"></param>
            <param name="performanceCounterName"></param>
            <param name="counterType"></param>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.PerformanceCounterGroupItem.IncrementCondition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.PerformanceCounterGroupItem.PerformanceCounterName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.PerformanceCounterGroupItem.CounterType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.TimerCacheManager">
            <summary>
            This class caches the timers provided by the application and dispatches them to the listeners 
            when either the cache has pre-configured number of items or the time since first item cached 
            has exceeded pre-configured amount of time.
            
            This class implements singleton pattern and provides one instance of the class at a time.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1">
            <summary>
            This abstract class can be used to implement a cache manager which can cache objects of type T.
            The behavior like how many maximum items are cached, how long the items are cached for, what percentage of the input objects are cached of the cache manager is controlled by <see cref="P:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.CacheManagerOptions"/>.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.IDiagnosticsDataReporter`1">
            <summary>
            Applications implement this interface in order to have the infrastructure pass 
            the configuration values for cache control to the object instance that implements 
            the report timing handler.  Note that it is not necessary to implement this interface
            in order to get the timer events but it is necessary to get the cache attributes.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.IDiagnosticsDataReporter`1.ReportData(`0)">
            <summary>
            Method called by applications to report the diagnostics data 
            which in turn is typically persisted in a file or some persistent data store.
            </summary>
            <param name="dataToReport">
            The object holding the diagnostics data to be reported.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.ReportData(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.Dispose(System.Boolean)">
            <summary>
            Releases all managed resources by calling Dispose() on the class Component.
            </summary>
            <param name="disposing">
            True when explicitly invoked by an application, false otherwise.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.CanSaveData(`0)">
            <summary>
            This method determines if the data qualifies to be added to cache or not. This method can be overridden by applications to determines theirselves whether to add the data to cache or not.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.AddDataToCache(`0)">
            <summary>
            This method is used to add an object of type T to cache.
            </summary>
            <param name="dataToReport">The object to be added to cache</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.InitializeFlushTimer">
            <summary>
            This method is used to initialize the timer which fires an event when maximum time to cache objects elapses. 
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.MaximumTimeToCacheElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            This method is an event handler and is called when the maximum time to cache a timer elapses.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.Flush">
            <summary>
            This method is used to flush the cached objects. This method may be called when either cache size reaches maximum allowed number, the first object in cache has in been cached for 
            maximum allowed time or the cache manager object is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Collections.Generic.SynchronizedCollection{`0})">
            <summary>
            This method is used to trace data to the configured trace listeners on a new thread.
            </summary>
            <param name="eventType">Eventy type to be used for logging</param>
            <param name="eventId">Event id to be used for logging</param>
            <param name="cacheCollection">Cache reference to be flushed and logged</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.TraceDatasAsync(System.Diagnostics.TraceEventType,System.Int32,System.Collections.Generic.SynchronizedCollection{`0})">
            <summary>
            This method is used to trace data to trace listeners.
            </summary>
            <param name="eventType">Eventy type to be used for logging</param>
            <param name="eventId">Event id to be used for logging</param>
            <param name="cacheCollection">Cache reference to be flushed and logged</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.TraceTimersAsyncCallback(System.IAsyncResult)">
            <summary>
            This method is a callback for the timer trace delegate.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.CacheManagerOptions">
            <summary>
            This property is used to get/set the CacheManagerOption which can be used to control the behavior of the cache manager. 
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1.TraceSource">
            <summary>
            This property can be used to set the trace source which can be used to set the trace listeners to persist the cached data on flush.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerCacheManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerCacheManager.CanSaveData(Microsoft.IT.Diagnostics.Timer)">
            <summary>
            This method determines if the data qualifies to be added to cache or not. This method can be overridden by applications to determines theirselves whether to add the data to cache or not.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Configuration.CacheManagerOptions">
            <summary>
            This class represents the various values that can be set via configuration file to control
            the behavior of the instrumentation infrastructure.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Configuration.CacheManagerOptions.DefaultName">
            <summary>
            Specifies the name to be used for the obtaining an instance of default values.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptions.#ctor(Microsoft.IT.Configuration.CacheManagerOptionsElement)">
            <summary>
            Constructs an instance from the values found in the app.config file's &lt;diagnostics&gt; section.
            </summary>
            <param name="cacheManagerOptionsElement">
            The app.config entry from which the new instance is to be constructed.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptions.GetNamedCacheManagerOptions(System.String)">
            <summary>
            Factory method to create and return an instance constructed and initialized from 
            the values found in the app.config file's &lt;diagnostics&gt; section.
            </summary>
            <param name="name">
            Name of that uniquely identifies the <see cref="T:Microsoft.IT.Configuration.CacheManagerOptions"/> from the app.config that is
            to be used to initialize the instance returned.
            </param>
            <returns>
            An instance initialized from the <see cref="T:Microsoft.IT.Configuration.CacheManagerOptions"/> from the app.config that is
            uniquely identified by the <paramref name="name"/> requested.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptions.Exists(System.String)">
            <summary>
            Method to determine if a CacheManagerOption exists with <see paramref="name"/>.
            </summary>
            <param name="name">
            Name of <see cref="T:Microsoft.IT.Configuration.CacheManagerOptions"/> which is being checked whether it exists or not.
            </param>
            <returns>
            true if exists in configuraiton file else false.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptions.Equals(System.Object)">
            <summary>
            Compares the current value to the passed in value and returns true if all fields in the current
            instance are equal to their corresponding fields in the second instance.
            </summary>
            <param name="obj">
            Object instance to which the current instance is compared.
            </param>
            <returns>
            Returns true if all fields in the current instance are equal to the corresponding fields in the second instance.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptions.op_Equality(Microsoft.IT.Configuration.CacheManagerOptions,Microsoft.IT.Configuration.CacheManagerOptions)">
            <summary>
            Compares two object instances and
            returns true if all fields in the first instance are equal to the corresponding fields in the second instance.
            </summary>
            <param name="obj1">First instance to compare.</param>
            <param name="obj2">Instance to which the <paramref name="obj1"/> instance is compared.</param>
            <returns>
            Returns true if all fields in the first instance are equal to the corresponding fields in the second instance.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptions.op_Inequality(Microsoft.IT.Configuration.CacheManagerOptions,Microsoft.IT.Configuration.CacheManagerOptions)">
            <summary>
            Compares two object instances and
            returns true if any field in the first instance does not equal the corresponding field in the second instance.
            </summary>
            <param name="obj1">First instance to compare.</param>
            <param name="obj2">Instance to which the <paramref name="obj1"/> instance is compared.</param>
            <returns>
            Returns true if any field in the first instance does not equal the corresponding field in the second instance.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.CacheManagerOptions.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.IT.Configuration.CacheManagerOptions.Name">
            <summary>
            Gets and sets the name of the instance as it was defined in the app.config file.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.CacheManagerOptions.CapturePercentage">
            <summary>
            Gets and sets a value that specifies the percentage of timing events that should be captured.
            This value should be set to a statistically valid random sample size.  Default is 5% of total timing events.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.CacheManagerOptions.MaxItemsToCache">
            <summary>
            Gets and sets a value that specifies the maximum number of <see cref="T:Microsoft.IT.Diagnostics.Timer"/> objects to cache in memory 
            before flushing to persistent storage.  <see cref="T:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1"/> derived classes should 
            honor this value by flushing data when this value is exceeded or when the application has been idle for the period of time specified
            by the <see cref="P:Microsoft.IT.ServiceModel.TimingOptions.MaxTimeToCache"/> property. 
            This value is initially established via the 'maxItemsToCache' attribute of the 'timerOptions' element in the config file and the default is 20.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.CacheManagerOptions.MaxTimeToCache">
            <summary>
            Gets and sets a value that specifies the maximum time any timer can remain in the in-memory cache 
            before flushing to persistent storage.  <see cref="T:Microsoft.IT.Diagnostics.DiagnosticsCacheManager`1"/> derived classes should 
            honor this value by flushing data when this value is exceeded or when the count of cached timers exceeds the value of the 
            <see cref="P:Microsoft.IT.ServiceModel.TimingOptions.MaxItemsToCache"/> property.
            This value is initially established via the 'maxTimeToCache' attribute of the 'timerOptions' element in the config file and default is 00:05:00.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.CacheManagerOptions.TraceSourceName">
            <summary>
            Gets and sets the name of the <see cref="T:System.Diagnostics.TraceSource"/> to be used for trace listeners configuration to capture the cached items on flush.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.TimingWebServiceTraceListener">
            <summary>
            This class provides a trace listener which can be used to persist a collection of <see cref="T:Microsoft.IT.Diagnostics.Timer"/> objects in a central service.
            The host of the service is configured in the "TimerListenerHostName" setting under "appSettings" section of the configuration file.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimingWebServiceTraceListener.#ctor(System.String)">
            <summary>
            Constructor which accepts the name of the timerOptions to be used to used before persisting the timer objects passed to the listener.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimingWebServiceTraceListener.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimingWebServiceTraceListener.Write(System.Collections.Generic.SynchronizedCollection{Microsoft.IT.Diagnostics.Timer})">
            <summary>
            This method persists the passed collection of Timer objects to the central service.
            </summary>
            <param name="data">The <see cref="T:Microsoft.IT.Diagnostics.Timer"/>Timer collection to be peristed.</param>
        </member>
        <member name="T:Microsoft.IT.DataEntities.Application">
            <summary>
            Represents an application used in timers
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.Application.ApplicationId">
            <summary>
            Get or sets application Id
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.Application.ApplicationName">
            <summary>
            Gets or sets application name
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.ApplicationCollection">
            <summary>
            Represents collection of applications
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.ArgumentFault">
            <summary>
            This class in this namespace is deprecated.  Please use 'Microsoft.IT.DataEntities' namespace version for the class.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ArgumentFault.ParameterName">
            <summary>
            Name of the parameter that was in error.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.ArgumentOutOfRangeFault">
            <summary>
            This class in this namespace is deprecated.  Please use 'Microsoft.IT.DataEntities' namespace version for the class.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.ArgumentNullFault">
            <summary>
            This class in this namespace is deprecated.  Please use 'Microsoft.IT.DataEntities' namespace version for the class.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.MessageContextManager`1">
            <summary>
            Manages custom MessageContext&lt;T&gt; derived classes in an internal cache.
            </summary>
            <typeparam name="T">
            Defines the type of context class that is to be managed.  This value must represent a class that derives from 
            the MessageContext&lt;T&gt; base class.
            </typeparam>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.MessageContextManager`1.Set(System.Xml.UniqueId,`0)">
            <summary>
            Adds the passed in MessageContext&lt;T&gt; to the internal managed cache.
            </summary>
            <param name="contextId">
            Unique identifier of the MessageContext&lt;T&gt; to retrieve.
            </param>
            <param name="context">
            The MessageContext&lt;T&gt; instance that is to be added.
            </param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.MessageContextManager`1.Set(System.ServiceModel.Channels.Message,`0)">
            <summary>
            Adds the passed in MessageContext&lt;T&gt; to the internal managed cache.
            </summary>
            <param name="message">
            The <see cref="T:System.ServiceModel.Channels.Message"/> from which to extract the unique context identifier.
            </param>
            <param name="context">
            The MessageContext&lt;T&gt; instance that is to be added.
            </param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.MessageContextManager`1.Get(System.Xml.UniqueId)">
            <summary>
            Retrieves the specified MessageContext&lt;T&gt; from the managed cache.
            </summary>
            <param name="contextId">
            Unique identifier of the MessageContext&lt;T&gt; to retrieve.
            </param>
            <returns>
            The MessageContext&lt;T&gt; that was requested.
            </returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.MessageContextManager`1.Get(System.ServiceModel.Channels.Message)">
            <summary>
            Retrieves the specified MessageContext&lt;T&gt; from the managed cache.
            </summary>
            <param name="message">
            The <see cref="T:System.ServiceModel.Channels.Message"/> from which to extract the unique context identifier.
            </param>
            <returns>
            The object instance represented as <typeparamref name="T"/> that was requested.
            </returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.MessageContextManager`1.Remove(System.Xml.UniqueId)">
            <summary>
            Retrieves the specified MessageContext&lt;T&gt; from the managed cache then removes it.
            </summary>
            <param name="contextId">
            Unique identifier of the MessageContext&lt;T&gt; to retrieve.
            </param>
            <returns>
            The MessageContext&lt;T&gt; that was removed.
            </returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.MessageContextManager`1.Remove(System.ServiceModel.Channels.Message)">
            <summary>
            Retrieves the specified MessageContext&lt;T&gt; from the managed cache then removes it.
            </summary>
            <param name="message">
            The <see cref="T:System.ServiceModel.Channels.Message"/> from which to extract the unique context identifier.
            </param>
            <returns>
            The MessageContext&lt;T&gt; that was removed.
            </returns>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.MessageContextManager`1.Count">
            <summary>
            Gets the number of records currently contained in the cache.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Services.AsyncResult">
            <summary>
            This is the derived implementation of an <see cref="T:System.IAsyncResult"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Services.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Constructs and instance from a caller provided callback and custom state object.
            </summary>
            <param name="callback">
            Optional <see cref="T:System.AsyncCallback"/> implementation.  This callback will be invoked 
            when the asynchronous operation has completed and the data is ready to be retrieved
            by making a call to the associated EndXxxx() method.  When this value is null the 
            caller must check the <see cref="P:Microsoft.IT.Services.AsyncResult.IsCompleted"/> property to determine if it is safe
            to call the associated EndXxxx() method.
            </param>
            <param name="state">Optional object instance allowing a caller to pass state information.
            </param>
        </member>
        <member name="M:Microsoft.IT.Services.AsyncResult.CompleteAsyncCall(System.Object)">
            <summary>
            Called by implementors of asynchronous operations to set the <see cref="P:Microsoft.IT.Services.AsyncResult.IsCompleted"/>
            and <see cref="P:Microsoft.IT.Services.AsyncResult.CompletedSynchronously"/> properties, signal the <see cref="P:Microsoft.IT.Services.AsyncResult.AsyncWaitHandle"/>
            and invoke the user provide callback method if provided.
            </summary>
            <param name="operationResults">
            The results of the asynchronous operation.  This value is stored in the instance for retrieval
            later by the user call to the EndXxxx() method.
            </param>
        </member>
        <member name="P:Microsoft.IT.Services.AsyncResult.Results">
            <summary>
            Gets the intermediate storage of the results of an asychronous call.  This is intended for use by 
            the infrastructure and not intended to be used by callers.  Callers of asynchronous methods should
            always retrieve the results via a call the the EndXxxx() method.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.AsyncResult.UserCallback">
            <summary>
            This is an optional <see cref="T:System.AsyncCallback"/> implementation that will be invoked 
            when the asynchronous operation has completed and the data is ready to be retrieved
            by making a call to the associated EndXxxx() method.  When this value is null the 
            caller must check the <see cref="P:Microsoft.IT.Services.AsyncResult.IsCompleted"/> property to determine if it is safe
            to call the associated EndXxxx() method.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.AsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.AsyncResult.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            When in the reset state the asychronous operation has not yet completed.  When set the
            operation has completed and data is available via a call to the EndXxxx() method.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.AsyncResult.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.AsyncResult.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.RequestTimersCriteria">
            <summary>
            Represents the criteria for searching the timers
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.RequestTimersCriteria.FromDateTime">
            <summary>
            Gets or sets the from date time for the criteria, a required property.
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.RequestTimersCriteria.ToDateTime">
            <summary>
            Gets or sets the to date time for the criteria, a required property.
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.RequestTimersCriteria.ApplicationId">
            <summary>
            Gets or sets the ApplicationID for the criteria, optional.
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.RequestTimersCriteria.TimerNameId">
            <summary>
            Gets or sets the Application name for the criteria, optional.
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.RequestTimersCriteria.MachineName">
            <summary>
            Gets or sets the machine name for the criteria, optional.
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.TimerName">
            <summary>
            Represents a timer name
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.TimerName.TimerNameId">
            <summary>
            Get or sets timer id
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.TimerName.Name">
            <summary>
            Gets or sets timer name
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.TimerName.ApplicationId">
            <summary>
            ApplicationId of the application to which this TimerName belongs
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.TimerNameCollection">
            <summary>
            Represents collection of timer names
            </summary>
        </member>
        <member name="T:Microsoft.IT.Services.DataExchangeAsyncState">
            <summary>
            A class that is used as the state object to be passed to the asynchronous methods of the <see cref="T:Microsoft.IT.Services.IDataExchange"/>
            service.  This class provides the necessary value for asynch services to return response data as well as an arbitrary
            state object that the application can use to supply whatever additional data might be required.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeAsyncState.#ctor">
            <summary>
            Constructs an instance initializing the internal properties to the values passed in.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeAsyncState.#ctor(System.Type)">
            <summary>
            Constructs an instance initializing the internal properties to the values passed in.
            </summary>
            <param name="resultsType">
            The <see cref="T:System.Type"/> of the results data that is returned by the asynchronous call to a DataExchange web service.
            </param>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeAsyncState.#ctor(System.Type,System.Object)">
            <summary>
            Constructs an instance initializing the internal properties to the values passed in.
            </summary>
            <param name="resultsType">
            The <see cref="T:System.Type"/> of the results data that is returned by the asynchronous call to a DataExchange web service.
            </param>
            <param name="state">
            An arbitrary state object supplied by the calling application.  This value is not used by the framework.
            </param>
        </member>
        <member name="P:Microsoft.IT.Services.DataExchangeAsyncState.ResultsType">
            <summary>
            The <see cref="T:System.Type"/> of the results data that is returned by the asynchronous call to a DataExchange web service.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.DataExchangeAsyncState.State">
            <summary>
            Gets an arbitrary state object supplied by the calling application.  This value is not used by the framework.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Services.DataExchangeAsyncResult">
            <summary>
            The <see cref="T:System.IAsyncResult"/> implementation used by the <see cref="T:Microsoft.IT.Services.IDataExchangeService"/> for managing asynchronous
            calls.  This extends the interface by including a property for results.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeAsyncResult.#ctor(System.AsyncCallback,System.Object,System.ServiceModel.Channels.Message)">
            <summary>
            Constructs and instance from a caller provided callback and custom state object.
            </summary>
            <param name="callback">
            Optional <see cref="T:System.AsyncCallback"/> implementation.  This callback will be invoked 
            when the asynchronous operation has completed and the data is ready to be retrieved
            by making a call to the associated EndXxxx() method.  When this value is null the 
            caller must check the <see cref="P:Microsoft.IT.Services.DataExchangeAsyncResult.IsCompleted"/> property to determine if it is safe
            to call the associated EndXxxx() method.
            </param>
            <param name="state">Optional object instance allowing a caller to pass state information.
            </param>
            <param name="inputMessage">
            The message that was received on the endpoint and that is to be processed.
            </param>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeAsyncResult.CompleteAsyncCall(System.Object)">
            <summary>
            Called by implementors of asynchronous operations to set the <see cref="P:Microsoft.IT.Services.DataExchangeAsyncResult.IsCompleted"/>
            and <see cref="P:Microsoft.IT.Services.DataExchangeAsyncResult.CompletedSynchronously"/> properties, signal the <see cref="P:Microsoft.IT.Services.DataExchangeAsyncResult.AsyncWaitHandle"/>
            and invoke the user provide callback method if provided.
            </summary>
            <param name="results">
            The results of the asynchronous operation.  This value is stored in the instance for retrieval
            later by the user call to the EndXxxx() method.
            </param>
        </member>
        <member name="P:Microsoft.IT.Services.DataExchangeAsyncResult.UserCallback">
            <summary>
            Gets the callback to be invoked when the results have been returned.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.DataExchangeAsyncResult.InputMessage">
            <summary>
            Gets the message that was received on the endpoint and that is to be processed.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.DataExchangeAsyncResult.ResultsMessage">
            <summary>
            Gets the result message that was produced by processing of the call.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.DataExchangeAsyncResult.AsyncState">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.IT.Services.DataExchangeAsyncResult.AsyncWaitHandle">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.IT.Services.DataExchangeAsyncResult.CompletedSynchronously">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.IT.Services.DataExchangeAsyncResult.IsCompleted">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.IT.Services.DataExchangeClient">
            <summary>
            The client proxy that can be used to invoke the methods on any set of web services that implement the
            <see cref="T:Microsoft.IT.Services.IDataExchangeService"/> interface.  The AdapterListener web service is one such service.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Services.IDataExchangeService">
            <summary>
            The web service interface definition that aggregates the other infrastructure service interfaces of
            <see cref="T:Microsoft.IT.Services.IDataExchange"/>, <see cref="T:Microsoft.IT.Services.IPing"/> and <see cref="T:Microsoft.IT.Diagnostics.IInstrumented"/> and exposes them as a single web service.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Services.IDataExchange">
            <summary>
            This interface defines the necessary message based methods that provide a general purpose interface to receive any type of inbound payload
            and return any type of outbound results.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Services.IDataExchange.ExchangeData(System.ServiceModel.Channels.Message)">
            <summary>
            A synchronous method to exchange messages with the web service.
            </summary>
            <param name="message">
            Message containing the data being passed in to the service.
            </param>
            <returns>
            Message containing the results of the processing.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Services.IDataExchange.BeginExchangeData(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous call to the web service to exchange an input <see cref="T:System.ServiceModel.Channels.Message"/> and a returned output <see cref="T:System.ServiceModel.Channels.Message"/>.
            </summary>
            <param name="message">
            The message received from the caller.
            </param>
            <param name="callback">
            The callback that is invoked when the asynchronous call has completed.
            </param>
            <param name="asyncState">
            An application specific object.
            </param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> instance that can be used to poll the status of the in-process async call.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Services.IDataExchange.EndExchangeData(System.IAsyncResult)">
            <summary>
            This method is called to complete the async call.
            </summary>
            <param name="asyncResult">
            The caller should pass the <see cref="T:System.IAsyncResult"/> instance that was returned by the call to BeginExchangeData().
            </param>
            <returns>
            Returns the <see cref="T:System.ServiceModel.Channels.Message"/> that is the output from the method call.
            </returns>
        </member>
        <member name="T:Microsoft.IT.Services.IPing">
            <summary>
            A health monitoring interface defining a method that can be used in lieu of 'synthetic transactions' and is useful
            for monitoring the state and availability of a WCF web service.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Services.IPing.Ping(Microsoft.IT.DataEntities.PingRequest)">
            <summary>
            A method invoked typically by monitoring tools to verify the health of a WCF web service.
            </summary>
            <param name="request">
            A <see cref="T:Microsoft.IT.DataEntities.PingRequest"/> object instance that describe the level of diagnostics to be run and reported on by the  web service.
            </param>
            <returns>
            A <see cref="T:Microsoft.IT.DataEntities.PingResults"/> instance which contains the collection of results from all tests performed.
            </returns>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.IInstrumented">
            <summary>
            Applications interested in capturing method timing information should implement this interface on 
            the business object classes that implement the contracts exposed through WCF.  This interface provides
            the WcfSupportServices library the necessary hook for sharing the top-level <see cref="P:Microsoft.IT.Diagnostics.IInstrumented.Timer"/> object
            that should be the parent of all subsequent timings.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.IInstrumented.Timer">
            <summary>
            Gets a <see cref="P:Microsoft.IT.Diagnostics.IInstrumented.Timer"/> object that should be the parent of all subsequent timings.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeClient.#ctor(System.String,System.String)">
            <summary>
            Constructs and instance from the passed in parameters.
            </summary>
            <param name="endpointConfigurationName">
            Name of the endpoint in the configuration file.
            </param>
            <param name="remoteAddress">
            URL to which to connect.
            </param>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeClient.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            Constructs and instance from the passed in parameters.
            </summary>
            <param name="endpointConfigurationName">
            Name of the endpoint in the configuration file.
            </param>
            <param name="remoteAddress">
            URL to which to connect.
            </param>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Constructs and instance from the passed in parameters.
            </summary>
            <param name="binding">
            The binding to make calls to the service.
            </param>
            <param name="remoteAddress">
            URL to which to connect.
            </param>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeClient.ExchangeData(System.ServiceModel.Channels.Message)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeClient.BeginExchangeData(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeClient.EndExchangeData(System.IAsyncResult)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeClient.ExchangeDataObject(System.Object,System.String,System.Type)">
            <summary>
            Extends the existing ExchangeData method as a wrapper that accepts the actual business data as a parameter.
            This method handles the management of the creation of the WCF <see cref="T:System.ServiceModel.Channels.Message"/> instance that is passed
            both to and from the IDataService.ExchangeData() method.
            </summary>
            <param name="requestData">
            The value to be used for the Body property of the WCF <see cref="T:System.ServiceModel.Channels.Message"/>.  Pass null if there is no request parameter for the method.
            </param>
            <param name="logicalAction">
            A name that uniquely identifies the method being processed.
            </param>
            <param name="resultsType">
            The <see cref="T:System.Type"/> of the results being returned by the call.  Pass null if the method is essentially a void return.
            </param>
            <returns>
            Returns an object instance of the type identified by the <paramref name="resultsType"/> parameter if results are returned, otherwise null.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeClient.BeginExchangeDataObject(System.Object,System.String,System.AsyncCallback,Microsoft.IT.Services.DataExchangeAsyncState)">
            <summary>
            Begins an asynchronous call to the web service to exchange an input of <paramref name="requestData"/>.
            </summary>
            <param name="requestData">
            The value to be used for the Body property of the WCF <see cref="T:System.ServiceModel.Channels.Message"/>.  Pass null if there is no request parameter for the method.
            </param>
            <param name="logicalAction">
            A name that uniquely identifies the method being processed.
            </param>
            <param name="callback">
            The callback that is invoked when the asynchronous call has completed.
            </param>
            <param name="asyncState">
            For this method this value must be a <see cref="T:System.Type"/> that specifies the type of data returned from the web service call.
            </param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> instance that can be used to poll the status of the in-process async call.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeClient.EndExchangeDataObject(System.IAsyncResult)">
            <summary>
            This method is called to complete the async call.
            </summary>
            <param name="asyncResult">
            The caller should pass the <see cref="T:System.IAsyncResult"/> instance that was returned by the call to BeginExchangeDataObject().
            </param>
            <returns>
            Returns an object instance of the type identified by the 'resultsType' parameter on the BeginExchangeDataObject() method if results are returned, otherwise null.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeClient.Ping(Microsoft.IT.DataEntities.PingRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeClient.GetResultFromMessage(System.ServiceModel.Channels.Message,System.Type)">
            <summary>
            Private method that accepts a result <see cref="T:System.ServiceModel.Channels.Message"/> and will extract the data that the application 
            sees as relevant - i.e. the data returned from the web service call or the FaultException.
            </summary>
            <param name="resultsMessage">
            The WCF <see cref="T:System.ServiceModel.Channels.Message"/> that was returned as a response.
            </param>
            <param name="resultsType">
            The data <see cref="T:System.Type"/> of the response data (if any).
            </param>
            <returns>
            The response data that the application sees as relevant - i.e. the data returned from the web service call or the FaultException.
            </returns>
        </member>
        <member name="P:Microsoft.IT.Services.DataExchangeClient.Timer">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.IT.Services.DataExchangeClient.KnownTypes">
            <summary>
            Gets and sets the collection of types that are to be used for deserialization of results returned from the IDataExchange wrapper methods.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Services.DataExchangeProxyProvider">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.IT.Services.ProxyProvider`2">
            <summary>
            This abstract class provides the implementation required to maintain an internal singleton client proxy instance
            thereby supporting an efficient and performant means for creating and disposing of client proxies.  Derived classes
            provide the specific implementation for creating new proxy instances of <typeparamref name="TClient"/>.
            </summary>
            <typeparam name="TClient">
            Identifies the type of proxy that will be managed by this ProxyProvider.
            </typeparam>
            <typeparam name="TInterface">
            Identifies the interface type.
            </typeparam>
        </member>
        <member name="M:Microsoft.IT.Services.ProxyProvider`2.#ctor">
            <summary>
            Hide the default constructor but let derived classes overload.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Services.ProxyProvider`2.#ctor(System.String,System.Uri)">
            <summary>
            Constructs a new instance and initializes the properties required for construction of proxy instances.
            </summary>
            <param name="endpointName">
            The name of the client endpoint binding that is to be used for the construction of new proxy instances.  
            </param>
            <param name="endpointUrl">
            The URL that is to be used for the construction of new proxy instances.          /// </param>
        </member>
        <member name="M:Microsoft.IT.Services.ProxyProvider`2.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructs a new instance and initializes the properties required for construction of proxy instances.
            </summary>
            <param name="endpointName">
            The name of the client endpoint binding that is to be used for the construction of new proxy instances.  
            </param>
            <param name="hostNameConfigName">
            The name of the configuration item that provides the HostName of the services.
            </param>
            <param name="formatStringConfigName">
            The name of the configuration item that contains a format string of the form
            'https://{0}/myvroot/myservice.svc' which will be used to create the return value of the method.
            </param>
            <param name="defaultFormatString">
            A default format string of the form 'https://{0}/myvroot/myservice.svc' to be used when
            the <paramref name="formatStringConfigName"/> configuration entry cannot be found.
            </param>
        </member>
        <member name="M:Microsoft.IT.Services.ProxyProvider`2.CreateProxy">
            <summary>
            Derived classes implement this to create and return a new proxy instance. Callers of this method
            are responsible for disposing of the returned object instance.  The preferred way to acquire a proxy is to use the 
            ProxyProvider.Current singleton static property.
            </summary>
            <returns>
            Returns the proxy instance of the specified type.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Services.ProxyProvider`2.SetCrossDomainProxy(System.ServiceModel.Channels.Binding)">
            <summary>
            Sets the passed in binding to use a transport level proxy which will allow connections from 
            corpnet to PHX if configured via an optional configuration value.
            </summary>
            <param name="binding">
            The client proxy binding which is to be configured.
            </param>
            <remarks>
            The cross-domain proxy that is to be used is determined in the following order of precedence...
            <list type="number">
            <item>
            If the <see cref="P:Microsoft.IT.Services.ProxyProvider`2.CrossDomainProxyUrl"/> property is explictly set that value is used.
            </item>
            <item>
            If not, then if the <see cref="P:Microsoft.IT.Services.ProxyProvider`2.CrossDomainProxyConfigName"/> property is set that value is used
            to retrieve the URL from the configuration settings.
            </item>
            <item>
            If neither of those are set this call makes no changes to the binding.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.IT.Services.ProxyProvider`2.CloseProxy(System.Object)">
            <summary>
            This method checks the class instance proxy to see if it is in a faulted state and if so aborts it.
            </summary>
            <param name="instance">The proxy instance that is to be inspected.</param>
        </member>
        <member name="M:Microsoft.IT.Services.ProxyProvider`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Services.ProxyProvider`2.Dispose(System.Boolean)">
            <summary>
            Releases all managed resources by calling Dispose() on the class Component.
            </summary>
            <param name="disposing">
            True when explicitly invoked by an application, false otherwise.
            </param>
        </member>
        <member name="P:Microsoft.IT.Services.ProxyProvider`2.Current">
            <summary>
            Gets a singleton proxy instance that is guaranteed to be in a useable state.  This is the preferred way to acquire a client proxy.
            </summary>
            <returns>
            Returns the proxy instance for specified service interface type identified by type parameter <typeparamref name="TClient"/>.
            </returns>
        </member>
        <member name="P:Microsoft.IT.Services.ProxyProvider`2.EndpointName">
            <summary>
            Gets the name of the client endpoint binding that is to be used for the construction of new proxy instances.  This value
            can be set explicitly via the class constructor overload or will default to "DataExchangeEndpoint";
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.ProxyProvider`2.EndpointUrl">
            <summary>
            Gets the URL that is to be used for the construction of new proxy instances.  This value
            can be set explicitly via the class constructor overload or will default to a value formed from 
            the values passed on the overloaded constructor <see cref="M:Microsoft.IT.Services.ProxyProvider`2.#ctor(System.String,System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.ProxyProvider`2.CrossDomainProxyConfigName">
            <summary>
            Gets and sets the name of the configuration value that can be used to obtain the network proxy URI. See
            <see cref="P:Microsoft.IT.Services.ProxyProvider`2.CrossDomainProxyUrl"/>.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.ProxyProvider`2.CrossDomainProxyUrl">
            <summary>
            Gets and sets the network proxy that is to be used by the client to traverse domains.  This value is
            typically of the form 'http://S1MDMPROXYCTP:8080'.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.ProxyProvider`2.KnownTypes">
            <summary>
            Gets and sets a collection of types that can be used by the general purpose web service client to deserialize the results returned.
            This property must be set in order to use any of the extended IDataExchange methods like ExchangeDataObject().
            </summary>
        </member>
        <member name="P:Microsoft.IT.Services.ProxyProvider`2.Certificate">
            <summary>
            Gets and sets a client certificate to be used for authentication.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeProxyProvider.#ctor(System.String,System.Uri)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeProxyProvider.#ctor(System.String,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Services.DataExchangeProxyProvider.CreateProxy">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.IT.Services.ITimerService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.IT.Services.ITimerService.SetTimers(Microsoft.IT.Diagnostics.TimerCollection)">
            <summary>
            Writes the timers passed in the TimerCollection parameters in the database.
            </summary>
            <param name="timers">timers to be written to database.</param>
        </member>
        <member name="M:Microsoft.IT.Services.ITimerService.BeginSetTimers(Microsoft.IT.Diagnostics.TimerCollection,System.AsyncCallback,System.Object)">
            <summary>
            Persists the timer data collection submitted by the application
            </summary>
            <param name="timers">the collection of timers submitted by the application</param>
            <param name="callback">The optional caller supplied callback to be invoked when the asynchronous processing has completed.</param>
            <param name="state">A caller defined state object that is passed back to the async callback.</param>
            <returns>An IAsyncResult object that is used to control the asynchronous processing.</returns>
        </member>
        <member name="M:Microsoft.IT.Services.ITimerService.EndSetTimers(System.IAsyncResult)">
            <summary>
            Completes the asynchronous call to SetTimers.
            </summary>
            <param name="asyncResult">The IAsyncResult returned from the BeginSetTimers() method that started the asynchronous process.</param>
        </member>
        <member name="M:Microsoft.IT.Services.ITimerService.SearchTimers(Microsoft.IT.DataEntities.RequestTimersCriteria)">
            <summary>
            Searches the timers in database satisfying the passed criteria.
            </summary>
            <param name="criteria">criteria for searching the timers</param>
            <returns>Collection of timers returned by database as result of search</returns>
        </member>
        <member name="M:Microsoft.IT.Services.ITimerService.BeginSearchTimers(Microsoft.IT.DataEntities.RequestTimersCriteria,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous call to search timers based on the passed criteria.
            </summary>
            <param name="criteria">criteria for searching the timers</param>
            <param name="callback">The optional caller supplied callback to be invoked when the asynchronous processing has completed.</param>
            <param name="state">A caller defined state object that is passed back to the async callback.</param>
            <returns>An IAsyncResult object that is used to control the asynchronous processing.</returns>
        </member>
        <member name="M:Microsoft.IT.Services.ITimerService.EndSearchTimers(System.IAsyncResult)">
            <summary>
            Completes the asynchronous call to search timers.
            </summary>
            <param name="asyncResult">The IAsyncResult returned from the BeginSearchTimers() method that started the asynchronous process.</param>
            <returns>Collection of timers returned by database as result of search.</returns>
        </member>
        <member name="M:Microsoft.IT.Services.ITimerService.GetApplications">
            <summary>
            Returns all the applications for which timers are stored in the database
            </summary>
            <returns>Collection of applications returned by database</returns>
        </member>
        <member name="M:Microsoft.IT.Services.ITimerService.BeginGetApplications(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous call to get applications for which timers are stored in the database.
            </summary>
            <param name="callback">The optional caller supplied callback to be invoked when the asynchronous processing has completed.</param>
            <param name="state">A caller defined state object that is passed back to the async callback.</param>
            <returns>An IAsyncResult object that is used to control the asynchronous processing.</returns>
        </member>
        <member name="M:Microsoft.IT.Services.ITimerService.EndGetApplications(System.IAsyncResult)">
            <summary>
            Completes the asynchronous call to get the application list.
            </summary>
            <param name="asyncResult">The IAsyncResult returned from the BeginGetApplications() method that started the asynchronous process.</param>
            <returns>Collection of timer names returned by database.</returns>
        </member>
        <member name="M:Microsoft.IT.Services.ITimerService.GetTimerNames">
            <summary>
            Returns all the timer names of the root timers stored in database
            </summary>
            <returns>Collection of timer names returned by database</returns>
        </member>
        <member name="M:Microsoft.IT.Services.ITimerService.BeginGetTimerNames(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous call to get all the timer names of the root timers stored in database.
            </summary>
            <param name="callback">The optional caller supplied callback to be invoked when the asynchronous processing has completed.</param>
            <param name="state">A caller defined state object that is passed back to the async callback.</param>
            <returns>An IAsyncResult object that is used to control the asynchronous processing.</returns>
        </member>
        <member name="M:Microsoft.IT.Services.ITimerService.EndGetTimerNames(System.IAsyncResult)">
            <summary>
            Completes the asynchronous call to get the timer names list.
            </summary>
            <param name="asyncResult">The IAsyncResult returned from the BeginGetTimerNames() method that started the asynchronous process.</param>
            <returns>Collection of timer names returned by database.</returns>
        </member>
        <member name="M:Microsoft.IT.Services.ITimerService.GetConfigurationParameters">
            <summary>
            Gets the service configurations for the client usage
            </summary>
            <returns>ConfigurationCollection</returns>
        </member>
        <member name="T:Microsoft.IT.Services.PingException">
            <summary>
            An exception that is thrown during the processing of a PingTest() web service method.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Services.PingException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Services.PingException.#ctor(System.String)">
            <summary>
            Constructs the exception from the passed in <paramref name="message"/>.
            </summary>
            <param name="message">The message to be used for the exception.</param>
        </member>
        <member name="M:Microsoft.IT.Services.PingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs the exception from the passed in <paramref name="message"/> and <paramref name="innerException"/>.
            </summary>
            <param name="message">The message to be used for the exception.</param>
            <param name="innerException">The exception to be used as the InnerException identifying root cause.</param>
        </member>
        <member name="M:Microsoft.IT.Services.PingException.#ctor(Microsoft.IT.Diagnostics.ApplicationEvent)">
            <summary>
            Constructs the exception from the passed in <paramref name="applicationEvent"/>.  The Message property of the <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/>
            will be used as the Message property of the exception.
            </summary>
            <param name="applicationEvent">The predefined <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> instance containing the information to but used by the exception.</param>
        </member>
        <member name="M:Microsoft.IT.Services.PingException.#ctor(Microsoft.IT.Diagnostics.ApplicationEvent,System.Exception)">
            <summary>
            Constructs the exception from the passed in <paramref name="applicationEvent"/>.  The Message property of the <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/>
            will be used as the Message property of the exception.
            </summary>
            <param name="applicationEvent">The predefined <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> instance containing the information to but used by the exception.</param>
            <param name="innerException">The exception to be used as the InnerException identifying root cause.</param>
        </member>
        <member name="M:Microsoft.IT.Services.PingException.#ctor(System.String,Microsoft.IT.DataEntities.PingResults)">
            <summary>
            Constructs the exception from the passed in <paramref name="message"/>.
            </summary>
            <param name="message">The message to be used for the exception.</param>
            <param name="pingResults">The <see cref="P:Microsoft.IT.Services.PingException.PingResults"/> information that has been accrued prior to the exception being thrown.</param>
        </member>
        <member name="M:Microsoft.IT.Services.PingException.#ctor(System.String,System.Exception,Microsoft.IT.DataEntities.PingResults)">
            <summary>
            Constructs the exception from the passed in <paramref name="message"/> and <paramref name="innerException"/>.
            </summary>
            <param name="pingResults">The <see cref="P:Microsoft.IT.Services.PingException.PingResults"/> information that has been accrued prior to the exception being thrown.</param>
            <param name="message">The message to be used for the exception.</param>
            <param name="innerException">The exception to be used as the InnerException identifying root cause.</param>
        </member>
        <member name="M:Microsoft.IT.Services.PingException.#ctor(Microsoft.IT.Diagnostics.ApplicationEvent,Microsoft.IT.DataEntities.PingResults)">
            <summary>
            Constructs the exception from the passed in <paramref name="applicationEvent"/>.  The Message property of the <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/>
            will be used as the Message property of the exception.
            </summary>
            <param name="pingResults">The <see cref="P:Microsoft.IT.Services.PingException.PingResults"/> information that has been accrued prior to the exception being thrown.</param>
            <param name="applicationEvent">The predefined <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> instance containing the information to but used by the exception.</param>
        </member>
        <member name="M:Microsoft.IT.Services.PingException.#ctor(Microsoft.IT.Diagnostics.ApplicationEvent,System.Exception,Microsoft.IT.DataEntities.PingResults)">
            <summary>
            Constructs the exception from the passed in <paramref name="applicationEvent"/>.  The Message property of the <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/>
            will be used as the Message property of the exception.
            </summary>
            <param name="pingResults">The <see cref="P:Microsoft.IT.Services.PingException.PingResults"/> information that has been accrued prior to the exception being thrown.</param>
            <param name="applicationEvent">The predefined <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> instance containing the information to but used by the exception.</param>
            <param name="innerException">The exception to be used as the InnerException identifying root cause.</param>
        </member>
        <member name="M:Microsoft.IT.Services.PingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by serialization processes when deserializing the exception.
            </summary>
            <param name="info">The serialized data store from which the exception is reconstructed.</param>
            <param name="context">Not used.</param>
        </member>
        <member name="M:Microsoft.IT.Services.PingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by serialization processes to allow the exception to save off the internal data.
            </summary>
            <param name="info">The serialized data store into which the exception data is stored.</param>
            <param name="context">Not used.</param>
        </member>
        <member name="P:Microsoft.IT.Services.PingException.PingResults">
            <summary>
            Gets the <see cref="P:Microsoft.IT.Services.PingException.PingResults"/> data that is associated with the exception.
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.PingFault">
            <summary>
            A fault class that contains information related to an error occurring during the processing of a PingTest() web service call.
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.PingFault.PingResults">
            <summary>
            Gets and sets the <see cref="P:Microsoft.IT.DataEntities.PingFault.PingResults"/> data that is associated with the exception.
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.PingMode">
            <summary>
            Enumeration that defines the various types of Ping method requests.  Each value specified represents
            a different level of diagnostics to be returned from the call to the Ping method.
            </summary>
        </member>
        <member name="F:Microsoft.IT.DataEntities.PingMode.ConnectivityOnly">
            <summary>
            A value that is requesting the Ping method to simply return the server's machine name, IP address and current UTC 
            DateTime.  This value is not passed on to the OBA dispatcher and provides no additional validation or diagnostics.
            </summary>
        </member>
        <member name="F:Microsoft.IT.DataEntities.PingMode.FullEndToEndDiagnostics">
            <summary>
            A value that is requesting full diagnostics be performed and every infrastructure component required in the 
            processing of the request be tested with results of the test(s) being returned as an individual entry in
            the <see cref="T:Microsoft.IT.DataEntities.PingResults"/> collection.  This value implicitly includes the results from a ConnectivityOnly test.
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.PingRequest">
            <summary>
            Represents the request object that is passed as a parameter to the <see cref="M:Microsoft.IT.Diagnostics.IPing.Ping(string)"/> method and defines 
            the level of diagnostics that are to be performed.
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.PingRequest.PingMode">
            <summary>
            Gets and sets a string value that specifies the processing that is to be performed.  Use the string constants
            defined in the <see cref="P:Microsoft.IT.DataEntities.PingRequest.PingMode"/> static class to populate this property.  
            </summary>
            <remarks>
            Note that custom values can be supplied provided the web services being called have been designed to handle the values passed.
            The <see cref="P:Microsoft.IT.DataEntities.PingRequest.PingMode"/> static class defines the standard values that implementors are obligated to support.
            </remarks>
        </member>
        <member name="T:Microsoft.IT.DataEntities.PingResult">
            <summary>
            Enumeration that provides the values to be returned for individual diagnostic test run during the course of a Ping method invocation.
            </summary>
        </member>
        <member name="F:Microsoft.IT.DataEntities.PingResult.None">
            <summary>
            Represents an unspecified value.  (Integer value = 0)
            </summary>
        </member>
        <member name="F:Microsoft.IT.DataEntities.PingResult.Success">
            <summary>
            The test result was successful.  (Integer value = 1)
            </summary>
        </member>
        <member name="F:Microsoft.IT.DataEntities.PingResult.Warning">
            <summary>
            Indicates that a problem was detected with some aspect of the infrastructure but if all other functions are reported
            as functional the services would still be able to handle the request via some sort of built in reliability or failover feature.
            (Integer value = 2)
            </summary>
        </member>
        <member name="F:Microsoft.IT.DataEntities.PingResult.Failure">
            <summary>
            Indicates that that a problem was detected with some aspect of the infrastructure that will prevent the services from 
            functioning.  These results should be escalated immediately.  (Integer value = 3)
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.PingResults">
            <summary>
            The response class that returns a collection of <see cref="T:Microsoft.IT.DataEntities.PingResultsEntry"/> object instances that reflect
            the status of the call.
            </summary>
        </member>
        <member name="M:Microsoft.IT.DataEntities.PingResults.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.DataEntities.PingResults.ToString">
            <summary>
            Returns a human readable string that represents the current object.
            </summary>
            <returns>
            A human readable string that represents the current object.
            </returns>
        </member>
        <member name="P:Microsoft.IT.DataEntities.PingResults.Responses">
            <summary>
            Gets the collection of <see cref="T:Microsoft.IT.DataEntities.PingResultsEntry"/> object instances that reflect
            the statuses of each specific test performed in the processing of the call to the Ping method.
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.PingResults.Result">
            <summary>
            Gets a computed value that returns an aggregated value representing the result status of the overall call to the 
            Ping method.  The value returned is a <see cref="T:Microsoft.IT.DataEntities.PingResult"/> value as follows:
            <ul>
            <li>None (0) - if the PingResults collection was empty.</li>
            <li>Success (1) - if all the <see cref="T:Microsoft.IT.DataEntities.PingResultsEntry"/>s in the collection were successful.</li>
            <li>Warning (2) - if at least one warning is present and there are no errors in the collection.</li>
            <li>Error (3) - if there is at least one error in the collection.</li>
            </ul>
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.PingResultsEntry">
            <summary>
            Captures the results of a single infrastructure test resulting from the PingTest() transaction.
            </summary>
        </member>
        <member name="M:Microsoft.IT.DataEntities.PingResultsEntry.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.DataEntities.PingResultsEntry.#ctor(System.String,System.String,Microsoft.IT.DataEntities.PingResult)">
            <summary>
            Constructs an instance by concatenating the passed in parameters into a meaningful single description property.
            The resultant Description property will be of the form: "{testName}: {description}".
            </summary>
            <param name="testName">
            An arbitrary name for a particular test performed by the caller.
            </param>
            <param name="description">
            Additional context information supporting or explaining the PingResult.
            </param>
            <param name="pingResult">
            Summarizes the results of the test via a <see cref="T:Microsoft.IT.DataEntities.PingResult"/> value of Success, Warning or Failure.
            </param>
        </member>
        <member name="M:Microsoft.IT.DataEntities.PingResultsEntry.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructs an instance by concatenating the passed in parameters into a meaningful single description property.
            The resultant Description property will be of the form: "{testName}: {description}\nExceptionInfo: {exception.GetType().Name} - {exception.Message}".
            </summary>
            <param name="testName">
            An arbitrary name for a particular test performed by the caller.
            </param>
            <param name="description">
            Additional context information supporting or explaining the PingResult.
            </param>
            <param name="exception">
            The root cause exception identifying the original problem.
            </param>
            <remarks>
            The PingResult property will be set to PingResulat.Failure.
            </remarks>
        </member>
        <member name="M:Microsoft.IT.DataEntities.PingResultsEntry.ToString">
            <summary>
            Returns a human readable string that represents the current object.
            </summary>
            <returns>
            A human readable string that represents the current object.
            </returns>
        </member>
        <member name="P:Microsoft.IT.DataEntities.PingResultsEntry.Result">
            <summary>
            Summarizes the results of the test via a <see cref="T:Microsoft.IT.DataEntities.PingResult"/> value of Success, Warning or Failure.
            </summary>
        </member>
        <member name="P:Microsoft.IT.DataEntities.PingResultsEntry.Description">
            <summary>
            Additional context information supporting or explaining the PingResult.
            </summary>
        </member>
        <member name="T:Microsoft.IT.DataEntities.PingResultsEntryCollection">
            <summary>
            A collection of <see cref="T:Microsoft.IT.DataEntities.PingResultsEntry"/> object instances.
            </summary>
        </member>
        <member name="M:Microsoft.IT.DataEntities.PingResultsEntryCollection.ToString">
            <summary>
            Returns a human readable string that represents the current object.
            </summary>
            <returns>
            A human readable string that represents the current object.
            </returns>
        </member>
        <member name="T:Microsoft.IT.Services.PingProcessor">
            <summary>
            A class that provide the implementation for the <see cref="F:Microsoft.IT.DataEntities.PingMode.ConnectivityOnly"/> mode of the <see cref="T:Microsoft.IT.Services.IPing"/> interface's ping test.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Services.PingProcessor.AppendPingConnectivityOnlyResults(Microsoft.IT.DataEntities.PingResults)">
            <summary>
            Handles the processing of a Ping(ConnectivityOnly) request by supplying the requisite machine information and minimum data requirements.
            </summary>
            <param name="pingResults">
            The <see cref="T:Microsoft.IT.DataEntities.PingResults"/> to which the information relevant to the 'ConnectivityOnly' request will be appended.
            </param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.Serializer">
            <summary>
            This class can be used to easily serialize and deserialize any type of
            data entities according to their defined data contracts.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Serializer.SerializeDataEntity(System.Object)">
            <summary>
            Converts an object into an XML string.
            </summary>
            <param name="valueToSerialize">Object to serialize.</param>
            <returns>An XML representation of the object.</returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Serializer.SerializeDataEntity(System.Object,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Converts an object into an XML string.
            </summary>
            <param name="valueToSerialize">Object to serialize.</param>
            <param name="knownTypes">
            A list of types that are expected to be encountered by the serializer.
            </param>
            <returns>An XML representation of the object.</returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Serializer.SerializeDataEntity(System.Type,System.Object,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Converts an object into an XML string.
            </summary>
            <param name="typeToSerialize">
            Specifies the explicit System.Type that is to be serialized.  This value should be used when the instance being serialized
            is a base class that contains a derived class. By specifying the base class explicitly the serializer will provide the necessary
            type hints required for deserialization.
            </param>
            <param name="valueToSerialize">Object to serialize.</param>
            <param name="knownTypes">
            A list of types that are expected to be encountered by the serializer.
            </param>
            <returns>An XML representation of the object.</returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Serializer.DeserializeDataEntity(System.Type,System.String)">
            <summary>
            Deserializes an XML string into the type of object specified.
            </summary>
            <param name="type">The type of object the XML shall be deserialized into.</param>
            <param name="xml">An XML string that represents the specified type.</param>
            <returns>An instance of the specified type.</returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Serializer.DeserializeDataEntity(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserializes an XML string into the type of object specified.
            </summary>
            <param name="type">The type of object the XML shall be deserialized into.</param>
            <param name="xml">An XML string that represents the specified type.</param>
            <param name="knownTypes">
            A list of types that are expected to be encountered by the serializer.
            </param>
            <returns>An instance of the specified type.</returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Serializer.DeserializeDataEntity(System.Type,System.Xml.XmlReader,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserializes an XML string into the type of object specified.
            </summary>
            <param name="type">The type of object the XML shall be deserialized into.</param>
            <param name="xmlReader">An XmlReader from which the source data will be acquired.</param>
            <param name="knownTypes">
            A list of types that are expected to be encountered by the serializer.
            </param>
            <returns>An instance of the specified type.</returns>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.ThreadTimerManager">
            <summary>
            A class that will maintain a timer property per thread.  Use this to safely implement the <see cref="T:Microsoft.IT.Diagnostics.IInstrumented"/> interface
            in classes that will be shared across multiple threads.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ThreadTimerManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ThreadTimerManager.Timer">
            <summary>
            Gets and sets a <see cref="P:Microsoft.IT.Diagnostics.ThreadTimerManager.Timer"/> instance on a per thread basis by using a Dictionary collection keyed by thread id.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.TimerCollection">
            <summary>
            A collection of <see cref="T:Microsoft.IT.Diagnostics.Timer"/> objects.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.TimerDataSqlProvider">
            <summary>
            This class implements data access layer for the timer listener service.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.#ctor">
            <summary>
            The default constructor for the data provider class
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.SetTimers(Microsoft.IT.Diagnostics.TimerCollection)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.BeginSetTimers(Microsoft.IT.Diagnostics.TimerCollection,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.EndSetTimers(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.SearchTimers(Microsoft.IT.DataEntities.RequestTimersCriteria)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.BeginSearchTimers(Microsoft.IT.DataEntities.RequestTimersCriteria,System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.EndSearchTimers(System.IAsyncResult)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.GetApplications">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.BeginGetApplications(System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.EndGetApplications(System.IAsyncResult)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.GetTimerNames">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.BeginGetTimerNames(System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.EndGetTimerNames(System.IAsyncResult)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.GetConfigurationParameters">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.ValidateSetTimersParameters(Microsoft.IT.Diagnostics.TimerCollection)">
            <summary>
            This method validates the parameter passed for the SetTimer method.
            </summary>
            <param name="timers">The parameter passed to the SetTimer method</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.ValidateSearchTimersParameters(Microsoft.IT.DataEntities.RequestTimersCriteria)">
            <summary>
            This method validates the parameter passed for the SearchTimer method.
            </summary>
            <param name="criteria">the parameter passed to the SearchTimer method.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.GetTimersTable(Microsoft.IT.Diagnostics.TimerCollection)">
            <summary>
            Gets a timers data table containing the timers
            </summary>
            <param name="timers">the timers collections to be populated in the data table</param>
            <returns>Returns the timers data table populated by timers collection</returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.CreateTimersTable">
            <summary>
            Creates a new data table to store the timers
            </summary>
            <returns>Returns an empty data table to hold the timer data</returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.PopulateTimerTable(Microsoft.IT.Diagnostics.Timer,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Int32,System.Data.DataTable)">
            <summary>
            Populates the data table with the timer data
            </summary>
            <param name="timer">the timer for which the information has to be populated in the data table</param>
            <param name="parentTimerId">the parent timer id for the current timer</param>
            <param name="ownerTimerId">the owner timer id for the timer</param>
            <param name="sequence">the sequence of timer in the hierarchy</param>
            <param name="timersTable">the timers data table to be populated with timers</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.GetTimers(System.Data.DataTable)">
            <summary>
            Returns timer collection converted from a data table of timers
            </summary>
            <param name="timersTable">datatable of the timers to be converted into timer collection</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.GetTimer(System.Data.DataRow,System.Data.DataTable,Microsoft.IT.Diagnostics.Timer)">
            <summary>
            Converts a given timer data row into a timer object
            </summary>
            <param name="timerRow">timer data row</param>
            <param name="timersTable">timer data table to get the children timers</param>
            <param name="parentTimer">parent timer of the timer in the timerRow datarow</param>
            <returns>Returns a timer object</returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimerDataSqlProvider.ExecuteReaderAsync(Microsoft.IT.Services.AsyncResult,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method executes the passed stored procedure with the provided parameters asynchronously.
            </summary>
            <param name="ar"></param>
            <param name="storedProcedure">Stored procedure to be executed</param>
            <param name="sqlParameters">Parameters to be passed to the stored procedure call</param>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.TimingFileTraceListener">
            <summary>
            This class provides a trace listener which can be used to persist a collection of <see cref="T:Microsoft.IT.Diagnostics.Timer"/> objects in a file.
            The path and name of the file is configured in the "TimerTraceFileName" setting under "appSettings" section of the configuration file.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TimingFileTraceListener.Write(System.Collections.Generic.SynchronizedCollection{Microsoft.IT.Diagnostics.Timer})">
            <summary>
            This method persists the passed collection of Timer objects to the file.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.TimerProperties">
            <summary>
            An enumeration of the various properties that can be filtered from inclusion in a timer hierarchy returned by a server via the 
            <see cref="T:Microsoft.IT.ServiceModel.TimingBehavior"/>.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerProperties.None">
            <summary>
            No property specified.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerProperties.ApplicationName">
            <summary>
            Specifies the <see cref="P:Microsoft.IT.Diagnostics.Timer.ApplicationName"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerProperties.Name">
            <summary>
            Specifies the <see cref="P:Microsoft.IT.Diagnostics.Timer.Name"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerProperties.MachineName">
            <summary>
            Specifies the <see cref="P:Microsoft.IT.Diagnostics.Timer.MachineName"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerProperties.TimerExtension">
            <summary>
            Specifies the <see cref="P:Microsoft.IT.Diagnostics.Timer.TimerExtension"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerProperties.TimerVersion">
            <summary>
            Specifies the <see cref="P:Microsoft.IT.Diagnostics.Timer.TimerVersion"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerProperties.UserName">
            <summary>
            Specifies the <see cref="P:Microsoft.IT.Diagnostics.Timer.UserName"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerProperties.AllSensitive">
            <summary>
            Specifies the <see cref="P:Microsoft.IT.Diagnostics.Timer.MachineName"/> and <see cref="P:Microsoft.IT.Diagnostics.Timer.MachineName"/> 
            properties (MachineName | UserName).
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.TimerType">
            <summary>
            Enumeration that describes the type of timer.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerType.Unspecified">
            <summary>
            Generic timer
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerType.AppDomainTransition">
            <summary>
            Represents a <see cref="T:Microsoft.IT.Diagnostics.Timer"/> that is a close approximation of time spent 'on the wire' for calls that cross machine boundaries.
            This TimerType is always created by the reporting UI by computing
            the ElapsedMilliseconds as the difference between the sum of the durations of a timer's children and the timer's duration.
            This is similar to <see cref="F:Microsoft.IT.Diagnostics.TimerType.Overhead"/> except this value represents time spent on the network accessing a web service.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerType.Application">
            <summary>
            Represents a <see cref="T:Microsoft.IT.Diagnostics.Timer"/> created by an application.  All timers that are not created by the timing infrastructure are of this type.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerType.Behavior">
            <summary>
            Represents a <see cref="T:Microsoft.IT.Diagnostics.Timer"/> created by an application provided channel stack behavior on either the client or server.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerType.Client">
            <summary>
            Represents a <see cref="T:Microsoft.IT.Diagnostics.Timer"/> created on the TimerBehavior on the client prior to posting to a WCF service.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerType.Compression">
            <summary>
            Timer created by the Compression encoder on both client and server.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerType.Operation">
            <summary>
            Represents a <see cref="T:Microsoft.IT.Diagnostics.Timer"/> that is the amount of time spent performing the actions of a WCF operation.
            This TimerType is set by the TimingBehavior after pulling the application provided timer from the IInstrumented interface implementation.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerType.Overhead">
            <summary>
            Represents a <see cref="T:Microsoft.IT.Diagnostics.Timer"/> that is the amount of time that is not explicitly accounted.
            This TimerType is always created by the reporting UI by computing
            the ElapsedMilliseconds as the difference between the sum of the durations of a timer's children and the timer's duration.
            This is similar to <see cref="F:Microsoft.IT.Diagnostics.TimerType.AppDomainTransition"/> except this does not involve cross app domains.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerType.Placeholder">
            <summary>
            This value is used by the infrastructure only to manage the child timers throughout the WCF channel stack.
            Certain operations require timer placement in the hierarchy prior to the actual timer having been received from a WCF call.
            These types of timers are never persisted or reported and always get replaced.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Diagnostics.TimerType.Service">
            <summary>
            Represents a <see cref="T:Microsoft.IT.Diagnostics.Timer"/> created by the TimerBehavior on the server hosting a WCF service.  
            </summary>
        </member>
        <member name="T:Microsoft.IT.Core.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.ApplicationEventNotFoundExceptionMessage">
            <summary>
              Looks up a localized string similar to The requested ApplicationEvent could not be found..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.ApplicationEvents">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  --&gt;
            &lt;!--  Whenever a new Event is added or an old is deleted or a name is changed you must generate the           --&gt;
            &lt;!--  ApplicationEvents.generated.cs file by checking it out then running the following command:              --&gt;
            &lt;!--    &quot;$(SolutionDir)BuildSupportFiles\Microsoft.IT.UI.XsltTransformer&quot; &quot;$(SolutionDir)Dev\Libraries\Adapter\Diagnostics\App [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.AsyncDataEntityOperationExceptionDefaultMessage">
            <summary>
              Looks up a localized string similar to An attempt was made to retrieve the results of an asynchronous operation prior to the operation completing..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.CacheManagerOptionsElementNotFound">
            <summary>
              Looks up a localized string similar to No &lt;options&gt; entry under the &lt;cacheManagerOptions&gt; element with a name of &apos;{0}&apos; can be found in the application config file..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.ChildTimerCyclicError">
            <summary>
              Looks up a localized string similar to Inserting this timer causes cyclic dependencies..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.ChildTimerInvalidError">
            <summary>
              Looks up a localized string similar to Cannot add a timer as a child of itself..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.CollectionEmptyExceptionMessage">
            <summary>
              Looks up a localized string similar to The collection parameter is empty..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.CompressionTimerExtensionToStringFormat">
            <summary>
              Looks up a localized string similar to CompressedSize={0}, DecompressedSize={1}.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.ConfigurationProviderNotFound">
            <summary>
              Looks up a localized string similar to There is no &apos;Current&apos; ConfigurationProvider established..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.ConfigurationValueInvalidTypeParam">
            <summary>
              Looks up a localized string similar to The TypeParam T is not recognized as a supported type for the ConfigurationProvider handling the request..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.ConfigurationValueNotFound">
            <summary>
              Looks up a localized string similar to The requested configuration value was not found..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.DefaultFaultExceptionMessage">
            <summary>
              Looks up a localized string similar to A server-side error has occurred.  Details of the error can be found in the server&apos;s error log..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.EventArgsText">
            <summary>
              Looks up a localized string similar to Event Args:.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.EventLogTruncationMessage">
            <summary>
              Looks up a localized string similar to &lt;&lt; message truncated at 30K due to EventLogTraceListener MaxEntry limitation &gt;&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.ExceptionTypenameMessageFormatString">
            <summary>
              Looks up a localized string similar to {0} - {1}.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.ExcludingExceptionMessage">
            <summary>
              Looks up a localized string similar to Excluding exception from log.  {0}.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.InvalidAddOverheadTimerExceptionMessage">
            <summary>
              Looks up a localized string similar to Overhead timer can only be added to a timer that has child timers..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.InvalidApplicationName">
            <summary>
              Looks up a localized string similar to ApplicationName is required property of the TimingOptions and therefore cannot be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.InvalidCapturePercentageExceptionMessage">
            <summary>
              Looks up a localized string similar to The value passed in for CapturePercentage is not within the range of acceptable values. The value must be between 0.0 and 100.0..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.InvalidMaxTimeToCacheExceptionMessage">
            <summary>
              Looks up a localized string similar to The value passed in for MaxTimeToCache is below the minimum accepted value. The value must be 1 minute or more..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.InvalidTimingCacheManagerType">
            <summary>
              Looks up a localized string similar to The type specified in the TimingConfigurationOptions.TimingCacheManagerType is invalid because it does not implement the DiagnosticsCacheManager&lt;Timer&gt; abstract class.  Type specified: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.LoggedFromText">
            <summary>
              Looks up a localized string similar to Logged From: .
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.MachineNameUnavailableError">
            <summary>
              Looks up a localized string similar to MachineName unavailable: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.NamedTraceSourceDesignatorMissingError">
            <summary>
              Looks up a localized string similar to The calling assembly does not contain an assembly:NamedTraceSourceDesignatorAttribute designation nor does the calling class.  In order to use the NamedTraceSource you must always have an assembly level designation and alternately supply a class level designation when appropriate..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.NotApplicable">
            <summary>
              Looks up a localized string similar to n/a.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.OnHandleErrorExceptionError">
            <summary>
              Looks up a localized string similar to Exception encountered performing OnHandleError() callback inside ServiceErrorHandler.HandleError() method..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.OriginalExceptionText">
            <summary>
              Looks up a localized string similar to Original Exception: .
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.PerformanceCountersNotRegistered">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; performance counters have not been registered on this system..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.PingCoreAssemblyFileVersionsFormatString">
            <summary>
              Looks up a localized string similar to Core Assembly File Version: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.PingExceptionApplicationEventArgIsNull">
            <summary>
              Looks up a localized string similar to The ApplicationEvent supplied to the PingException constructor is null..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.PingFailureResultsMessage">
            <summary>
              Looks up a localized string similar to Basic connectivity failed..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.PingIPAddressFormatString">
            <summary>
              Looks up a localized string similar to IP Address: {0} [{1}].
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.PingMachineInfoFormatString">
            <summary>
              Looks up a localized string similar to Machine: {0} ({1}) on {2} {3}{4}.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.ProxyTimerManagerSetTimerNotAllowed">
            <summary>
              Looks up a localized string similar to The setting of an IInstrumented client proxy&apos;s Timer property is not supported.  The infrastructure will manage the creation of the timer and upon completion of the request that Timer can be retrieved and if necessary updated..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.ProxyTimerNamePrefix">
            <summary>
              Looks up a localized string similar to Proxy: .
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.Redacted">
            <summary>
              Looks up a localized string similar to (redacted).
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.ServiceTimerNamePrefix">
            <summary>
              Looks up a localized string similar to Service: .
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.StreamingCompressionNotSupported">
            <summary>
              Looks up a localized string similar to Compression Timer instrumentation does not support streamed messages..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.TimerOptionsElementNotFound">
            <summary>
              Looks up a localized string similar to No &lt;options&gt; entry under the &lt;timerOptions&gt; element with a name of &apos;{0}&apos; can be found in the application config file..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.TimerStoppedOnWrongMachineError">
            <summary>
              Looks up a localized string similar to An attempt was made to stop this timer on a machine other than the one on which it was started.  StartedOn MachineName: &apos;{0}&apos;, StoppedOn MachineName: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.TypeNameNotFoundError">
            <summary>
              Looks up a localized string similar to Could not find typeName &apos;{0}&apos;.  Check the app.config for a misspelled name..
            </summary>
        </member>
        <member name="P:Microsoft.IT.Core.Resources.Unknown">
            <summary>
              Looks up a localized string similar to [unknown].
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.ArgumentExceptionToFaultConverter">
            <summary>
            Class to convert ArgumentException objects to faults prior to returning from a WCF call.  This 
            class is used by the RXP Platform SDK's implementation of IErrorHandler.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.IExceptionToFaultConverter">
            <summary>
            This interface defines the contract that is recognized by the 
            platform infrastructure as an object that is capable of converting
            an <see cref="T:System.Exception"/> instance to a <see cref="T:System.ServiceModel.FaultException"/> 
            instance.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.IExceptionToFaultConverter.GetFaultException(System.Exception)">
            <summary>
            Derived classed implement this method to accept a managed 
            <see cref="T:System.Exception"/> instance and return a corresponding 
            <see cref="T:System.ServiceModel.FaultException"/>.  If no conversion can be made the 
            implementation should return null.  The implementation should 
            never throw an exception.
            </summary>
            <param name="exception">
            The exception for which the fault exception is to be generated.
            </param>
            <returns>
            Returns the appropriate fault exception for the passed in <paramref name="exception"/> if 
            possible. Returns NULL if no conversion is possible.
            </returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ArgumentExceptionToFaultConverter.GetFaultException(System.Exception)">
            <summary>
            Given the passed in exception this method will create and return an appropriate FaultException.
            </summary>
            <param name="exception">Exception from which to base the fault exception.</param>
            <returns>
            A fault exception to be returned to the caller if the passed in exception 
            type is recognized, null otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.IT.Core.ExceptionExtensions">
            <summary>
            Contains extension methods to enable improved handling of Exceptions from within
            generic error handlers.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Core.ExceptionExtensions.dataKey">
            <summary>
            This is the object that will be used as the key to IDictionary entry added to the Exception.Data collection.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Core.ExceptionExtensions.SetMonitoringEventType(System.Exception,System.Diagnostics.TraceEventType)">
            <summary>
            Extends all exception types to enable the setting of a MonitoringEventType into 
            the base class <see cref="P:System.Exception.Data"/> property.
            </summary>
            <param name="exception">
            The exception into which the IMonitoringInfo will be inserted/modified.
            </param>
            <param name="monitoringEventType">
            The <see cref="T:System.Diagnostics.TraceEventType"/> value to be used by the generic logging utilities when logging exceptions.
            </param>
        </member>
        <member name="M:Microsoft.IT.Core.ExceptionExtensions.SetMonitoringEventId(System.Exception,System.Int32)">
            <summary>
            Extends all exception types to enable the setting of a MonitoringEventId into 
            the base class <see cref="P:System.Exception.Data"/> property.
            </summary>
            <param name="exception">
            The exception into which the IMonitoringInfo will be inserted/modified.
            </param>
            <param name="monitoringEventId">
            The event identifier to be used by the generic logging utilities when logging exceptions.
            </param>
        </member>
        <member name="M:Microsoft.IT.Core.ExceptionExtensions.GetMonitoringInfo(System.Exception)">
            <summary>
            Recursively traverses the exception hierarchy locating and returning the outer-most IMonitoringInfo object 
            that has been previously set into any of the exceptions' <see cref="P:System.Exception.Data"/> property. If no 
            IMonitoringInfo object has  been set yet this method returns null.
            </summary>
            <param name="exception">
            The exception which will be traversed to locate the IMonitoringInfo.
            </param>
            
            <returns>
            Returns the outer-most IMonitoringInfo object 
            that has been previously set into any of the exceptions' <see cref="P:System.Exception.Data"/> property. If no 
            IMonitoringInfo object has  been set yet this method returns null.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Core.ExceptionExtensions.SetMonitoringInfo(System.Exception,Microsoft.IT.Diagnostics.IMonitoringInfo)">
            <summary>
            Extends all exception types to enable the setting of an IMonitoringInfo object into 
            the base class <see cref="P:System.Exception.Data"/> property in such a way that is discoverable
            by the generic error logging functions.
            </summary>
            <param name="exception">
            The exception into which the IMonitoringInfo will be inserted/modified.
            </param>
            <param name="monitoringInfo">
            The IMonitoringInfo instance to be set into the exception's Data collection.  The <see cref="T:System.Collections.IDictionary"/>
            entry added will be keyed by typeof(IMonitoringInfo) with a value of this parameter.
            </param>
            <exception cref="T:System.ArgumentNullException">If the monitoringInfo parameter is null.</exception>
        </member>
        <member name="M:Microsoft.IT.Core.ExceptionExtensions.AddDetails(System.Exception,System.String,System.Object)">
            <summary>
            Adds a data object to the exception after converting it into a human readable string representation.
            The <see cref="T:System.Collections.IDictionary"/> entry will be keyed by the 'title' parameter.
            </summary>
            <param name="exception">The exception to which the data is to be added.</param>
            <param name="title">The title to be used when logged.</param>
            <param name="dataToAdd">
            Object to be added to the exception after being converted to a human readable string.
            </param>
            <exception cref="T:System.ArgumentNullException">If either 'title' or 'dataToAdd' parameters are null.</exception>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.CompressionDetails">
            <summary>
            A class that contains the interim compression details for a cross machine WCF call that represents one half
            of the full roundtrip.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionDetails.CompressionThreshold">
            <summary>
            The size at which a message will be compressed.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionDetails.CompressionTimer">
            <summary>
            The timer from the caller that was created prior to compression completing.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionDetails.DecompressionTimer">
            <summary>
            The timer from the receiver that represents the amount of time that was spend decompressing the inbound message.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.FaultPropertyAttribute">
            <summary>
            An attribute used to decorate Exception and derived type properties to 
            identify the corresponding fault property to which the exception data
            should be transferred. 
            </summary>
            <remarks>
            The use of this attribute assumes the <see cref="T:Microsoft.IT.ServiceModel.FaultTypeAttribute"/>
            has been used on the enclosing Exception class.
            </remarks>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.FaultPropertyAttribute.#ctor(System.String)">
            <summary>
            Constructor that initializes the FaultPropertyName property.
            </summary>
            <param name="faultPropertyName">
            The name of the property in the corresponding fault class to which
            data from the exception property should be copied.
            </param>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.FaultPropertyAttribute.FaultPropertyName">
            <summary>
            The name of the property in the corresponding fault class to which
            data from the exception property should be copied.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.FaultTypeAttribute">
            <summary>
            An attribute used to decorate Exception and derived types to 
            identify the type of fault to be used when returning error information
            from a WCF web service implementation to a client.
            </summary>
            <remarks>
            The use of this attribute assumes the installation of the standard
            platform IErrorHandler behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.FaultTypeAttribute.#ctor(System.Type)">
            <summary>
            Constructor that initializes the FaultType property.
            </summary>
            <param name="faultType">
            The CLR Type that represents the corresponding fault type to which an exception will be converted.
            </param>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.FaultTypeAttribute.FaultType">
            <summary>
            Identifies the fault type that corresponds to the attributed Exception class.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.MonitoringInfo">
            <summary>
            A default implementation of the <see cref="T:Microsoft.IT.Diagnostics.IMonitoringInfo"/> interface that sets
            the default values of <see cref="P:Microsoft.IT.Diagnostics.MonitoringInfo.MonitoringEventType"/> and <see cref="P:Microsoft.IT.Diagnostics.MonitoringInfo.MonitoringEventId"/>
            to 'TraceEventType.Error' and zero respectively.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.MonitoringInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.MonitoringInfo.MonitoringEventType">
            <summary>
            One of the enumerated <see cref="T:System.Diagnostics.TraceEventType"/> values depicting the severity of the 
            the event to be monitored.  If not explicitly set the default value is 'Error'.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.MonitoringInfo.MonitoringEventId">
            <summary>
            Specifies a unique identifier to be used in error logs when reporting an Exception.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.CompressionEvent">
            <summary>
            Defines the context within which compression data is being reported to the TimingBehavior.
            </summary>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.CompressionEvent.None">
            <summary>
            No recognized compression event.
            </summary>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.CompressionEvent.ClientCompression">
            <summary>
            Denotes client compression
            </summary>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.CompressionEvent.ClientDecompression">
            <summary>
            Denotes client decompression
            </summary>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.CompressionEvent.ServerCompression">
            <summary>
            Denotes server compression
            </summary>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.CompressionEvent.ServerDecompression">
            <summary>
            Denotes server decompression
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.ErrorContextData">
            <summary>
            A class that contains a set of properties all of which can be derived from calls
            to system level methods or framework libraries that would be useful as context
            information in calls to the error logging methods.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ErrorContextData.#ctor">
            <summary>
            Constructs and returns an object containing environment and process context data.
            This instance can be passed to the logging/tracing methods to add rich context
            to error reports.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ErrorContextData.WorkingSet">
            <summary>
            Gets the working set performance counter for the current process.  <see cref="P:System.Environment.WorkingSet"/>.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ErrorContextData.ClrVersion">
            <summary>
            Gets the target CLR version.  <see cref="P:System.Environment.Version"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ErrorContextData.OSVersion">
            <summary>
            Get the version number of the operating system.  <see cref="P:System.Environment.OSVersion"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ErrorContextData.MachineName">
            <summary>
            Gets the name of the machine.  <see cref="P:System.Environment.MachineName"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ErrorContextData.CommandLine">
            <summary>
            Gets the commandline used to start the process.  <see cref="P:System.Environment.CommandLine"/>
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ErrorContextData.ProcessId">
            <summary>
            Gets the current process id if available.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ErrorContextData.ThreadId">
            <summary>
            Gets the Thread.CurrentThread.ManagedThreadId value.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ErrorContextData.ThreadName">
            <summary>
            Gets the Thread.CurrentThread.Name value.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.NamedTraceSource">
            <summary>
            Extends the .NET <see cref="T:System.Diagnostics.TraceSource"/> class to include methods that provide more robust
            reporting of Exception and error event information.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.NamedTraceSource.#ctor(System.String)">
            <summary>
            Constructs an object instance initializing the Name property with the passed in value.
            </summary>
            <param name="name">Name to be used for the underlying <see cref="T:System.Diagnostics.TraceSource"/>.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.NamedTraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)">
            <summary>
            Constructs an object instance initializing the Name and SourceLevel properties with the passed in values.
            </summary>
            <param name="name">Name to be used for the underlying <see cref="T:System.Diagnostics.TraceSource"/>.</param>
            <param name="levels">SourceLevels to be used for the underlying <see cref="T:System.Diagnostics.TraceSource"/>.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.NamedTraceSource.GetNamedTraceSource(System.Reflection.MemberInfo)">
            <summary>
            Creates and returns an appropriately named <see cref="T:Microsoft.IT.Diagnostics.NamedTraceSource"/> object instance
            based on the calling class's information. The <see cref="T:System.Diagnostics.TraceSource"/> 
            name is the name of the assembly in which the calling method/class is declared unless the class 
            is decorated with the <see cref="T:Microsoft.IT.Diagnostics.NamedTraceSourceDesignatorAttribute"/> in which case the name is
            the class name itself.
            </summary>
            <param name="memberInfo">
            Always pass MethodInfo.GetCurrentMethod(). This is used to enable systematic determination of the name.  
            </param>
            <returns>An appropriately named <see cref="T:Microsoft.IT.Diagnostics.NamedTraceSource"/> object instance.</returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.NamedTraceSource.LogEvent(System.Reflection.MemberInfo,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Exception,System.Object[])">
            <summary>
            Used to provide error specific information to the trace listener infrastructure.  Use this
            method whenever an exception is being reported.
            </summary>
            <param name="memberInfo">
            Always pass MethodInfo.GetCurrentMethod(). This is used to enable systematic determination of the TraceSource name.  
            </param>
            <param name="eventType">Level of severity that should be used for this event.</param>
            <param name="eventId">
            Unique id of a specific event. Typically this value in conjuction with the event source 
            is used for monitoring purposes via a Management Pack.
            </param>
            <param name="message">Message describing the event.</param>
            <param name="ex">
            Exception instance that caused the generation of the event.  Pass null if there is no exception to report.
            </param>
            <param name="extraDetails">
            A list of objects that are to be converted into human readable dumps of the object 
            data and included in the event.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.NamedTraceSource.LogEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Exception,System.Object[])">
            <summary>
            Used to provide error specific information to the trace listener infrastructure.  Use this
            method whenever an exception is being reported. 
            </summary>
            <param name="eventType">Level of severity that should be used for this event.</param>
            <param name="eventId">
            Unique id of a specific event. Typically this value in conjuction with the event source 
            is used for monitoring purposes via a Management Pack.
            </param>
            <param name="message">Message describing the event.</param>
            <param name="ex">
            Exception instance that caused the generation of the event.  Pass null if there is no exception to report.
            </param>
            <param name="extraDetails">
            A list of objects that are to be converted into human readable dumps of the object 
            data and included in the event.
            </param>
            <remarks>
            Though not required it is useful to pass objects in the extraDetails params array in pairs - 
            i.e. preceed each object to be included with a string object that 
            describes it.  For example...
            <example >
              ts.LogEvent(
                  TraceEventType.Error, 
                  4178, 
                  "Exception occurred attempting to create a customer.", 
                  ex, 
                  "Customer object in error:", 
                  customer,
                  "Address object in error:", 
                  address );
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.NamedTraceSource.LogEvent(System.String,System.Exception,System.Object[])">
            <summary>
            Used by generic error handling routines to log exception information.  The caller of this method
            must have set an IMonitoringInfo object into the exception Data collection or default values of 
            "Error" and zero will be used for the TraceEventType and EventId respectively.
            </summary>
            <param name="message">Message describing the event.</param>
            <param name="ex">Exception instance that caused the generation of the event.</param>
            <param name="extraDetails">
            A list of objects that are to be converted into human readable dumps of the object 
            data and included in the event.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.NamedTraceSource.LogEvent(Microsoft.IT.Diagnostics.ApplicationEvent,System.Object[])">
            <summary>
            Logs an event using the data passed in the <paramref name="applicationEvent"/> parameter. The <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/>'s
            Message, MonitoringEventId and MonitoringEventType are used in the call directly and the Cause, Information and Name
            are added as extra information to the log text.
            </summary>
            <param name="applicationEvent">The <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> to be written.</param>
            <param name="extraDetails">
            A list of objects that are to be converted into human readable dumps of the object 
            data and included in the event.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.NamedTraceSource.LogEvent(Microsoft.IT.Diagnostics.ApplicationEvent,System.Exception,System.Object[])">
            <summary>
            Logs an event using the data passed in the <paramref name="applicationEvent"/> and <paramref name="exception"/> parameters. 
            The <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/>'s Message, MonitoringEventId and MonitoringEventType are used in the call directly
            and the Cause, Information and Name are added as extra information to the log text.
            </summary>
            <param name="applicationEvent">The <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> to be written.</param>
            <param name="exception">The exception to be included in the log entry.</param>
            <param name="extraDetails">
            A list of objects that are to be converted into human readable dumps of the object 
            data and included in the event.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.NamedTraceSource.LogEvent(System.Exception,System.Object[])">
            <summary>
            Logs an event using the data passed in the <paramref name="exception"/> parameter. This method will retrieve any existing
            <see cref="T:Microsoft.IT.Diagnostics.IMonitoringInfo"/> that exists in the exception's Data collection and use those values for EventId and EventType.
            If the <see cref="T:Microsoft.IT.Diagnostics.IMonitoringInfo"/> is of type <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> then this method will extract/remove the 
            <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> and delegate the call to the <see cref="M:Microsoft.IT.Diagnostics.NamedTraceSource.LogEvent(Microsoft.IT.Diagnostics.ApplicationEvent,System.Exception,System.Object[])"/>
            overload.  If none of the above conditions apply the exception.Message property will be the logged message with EventId of zero 
            and EventType of Error.
            </summary>
            <param name="exception">
            The exception to be logged.
            </param>
            <param name="extraDetails">
            A list of objects that are to be converted into human readable dumps of the object 
            data and included in the event.
            </param>
            <remarks>
            Note that this call has the potential for altering the passed in exception by removing any <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/>
            that was previously set.  This facilitates the logging of the exception with the low level root cause information
            then rethrowing a new exception with a new <see cref="T:Microsoft.IT.Diagnostics.ApplicationEvent"/> that wraps the root cause exception and 
            describes a different situation.
            <para>
            For example, a library throws a ConfigurationException using an ApplicationEvent describing the error.  One application
            might just log the error then failover to a cached configuration and continue.  Another application, however, may need
            to treat the error as fatal and shutdown.  If this app just wrapped the existing ConfigurationException in a FatalException
            there would be 2 <see cref="T:Microsoft.IT.Diagnostics.IMonitoringInfo"/> conflicting entries.  Instead, the ConfigurationException should be logged 
            first, then the escalated FatalException should wrap the now clean root exception and allow the last exception to be logged.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.NamedTraceSourceDesignatorAttribute">
            <summary>
            Used by the <see cref="T:Microsoft.IT.Diagnostics.NamedTraceSource"/> class to construct all <see cref="T:Microsoft.IT.Diagnostics.NamedTraceSource"/> 
            objects requested by the decorated class to be created with a name that equals the class name.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.NamedTraceSourceDesignatorAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.NamedTraceSourceDesignatorAttribute.TraceSourceName">
            <summary>
            Name of the trace source to be used.  Typically you should not assign a value
            to this property and let the default naming conventions supply the trace source
            name based on assembly name or class name.  Assign to this property only when
            legacy code requires something non-standard
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.NamedTraceSourceDesignatorAttribute.SuggestedEventLogSourceName">
            <summary>
            A suggested name to be used on listeners that must provide a source name like
            <see cref="T:System.Diagnostics.EventLogTraceListener"/>.  Do not confuse this name with
            the Name property of the TraceSource.  This value is used by the RXP Platform SDK IDE 
            utilities to generate the app.config file entries to enable logging.  Once those entries
            are generated this value can be changed in the config file. The event log source name is
            typically used in conjunction with the event id to perform monitoring in Operations Manager.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.NamedTraceSourceDesignatorAttribute.Description">
            <summary>
            Provide a textual description of what types of tracing the NamedTraceSource will provide.
            RXP Platform SDK IDE utilities will read this value when generating the 
            app.config file entries and will place it in a comment block above the TraceSource entry
            for the class or assembly.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.ObjectSerializer">
            <summary>
            A static class that exposes methods for converting an object of any type into
            a serialized format.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ObjectSerializer.GetObjectAsString(System.Object)">
            <summary>
            Reflects through the specified object and returns a human readable string that
            contains the values of the objects properties.  Inner property objects are
            dumped recursively also.  
            </summary>
            <param name="instance">
            The object to be dumped.
            </param>
            <returns>
            A human readable string that contains the values of the objects properties.
            </returns>
            <remarks>
            This method is typically used for dumping data to diagnostic logging entries.
            </remarks>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ObjectSerializer.GetObjectAsString(System.Object,System.String,System.Int32)">
            <summary>
            Reflects through the specified object and returns a human readable string that
            contains the values of the objects properties.  Inner property objects are
            dumped recursively also.  
            </summary>
            <param name="instance">
            The object to be dumped.
            </param>
            <param name="name">The name to be used as a heading for the object being dumped.</param>
            <param name="maxNestingLevel">Maximum number of levels to recurse into.</param>
            <returns>
            A human readable string that contains the values of the objects properties.
            </returns>
            <remarks>
            This method is typically used for dumping data to diagnostic logging entries.
            </remarks>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ObjectSerializer.GetObjectAsString(System.Object,System.String,System.Int32,System.IO.TextWriter)">
            <summary>
            Reflects through the specified object and returns a human readable string that
            contains the values of the objects properties.  Inner property objects are
            dumped recursively also.  
            </summary>
            <param name="instance">
            The object to be dumped.
            </param>
            <param name="name">The name to be used as a heading for the object being dumped.</param>
            <param name="maxNestingLevel">Maximum number of levels to recurse into.</param>
            <param name="textWriter">A TextWriter object to which the output will be written.</param>
            <remarks>
            This method is typically used for dumping data to diagnostic logging entries.
            </remarks>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ObjectSerializer.WriteObjectDetails(System.CodeDom.Compiler.IndentedTextWriter,System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            The internal method that is called recursively to dump the object properties.
            </summary>
            <param name="iw">IndentedTextWriter to write to</param>
            <param name="instance">The object to be dumped.</param>
            <param name="name">The name to be used as a heading for the object being dumped.</param>
            <param name="nestingLevel">The current level of nesting.</param>
            <param name="maxNestingLevel">Maximum number of levels to recurse into.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ObjectSerializer.CheckForSpecialCase(System.CodeDom.Compiler.IndentedTextWriter,System.Object,System.String)">
            <summary>
            Handles the special case object types that are either simple to output (e.g. primitives and strings)
            and other types that we don't want to recurse into (XmlNode, DateTime, etc.).
            </summary>
            <param name="iw">IndentedTextWriter to write to</param>
            <param name="instance">The object to be dumped.</param>
            <param name="name">The name to be used as a heading for the object being dumped.</param>
            <returns>True if a special case object was handled, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ObjectSerializer.SerializeToXml(System.Object,System.Boolean,System.String,System.String)">
            <summary>
            Serializes an object to an XML string using the XmlSerializer and optionally specifying
            whether or not to indent child elements for human readability.
            </summary>
            <param name="instance">The object to be serialized.</param>
            <param name="indent">True to add CRLF and indentation to the output, false for a more compact representation.</param>
            <param name="xmlNamespaceName">
            Name of the namespace to be used in the generated output.  For example,
            use 'myname' to generate 'xmlns=myname:mynamespace'.
            </param>
            <param name="xmlNamespace">
            Namespace to be used in the generated output.  For example,
            use 'mynamespace' to generate 'xmlns=myname:mynamespace'.
            </param>
            <returns>An XML string representing the object.</returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.ObjectSerializer.DeserializeFromXml``1(System.String)">
            <summary>
            Creates an object from the passed in XML.
            </summary>
            <typeparam name="T">The Type of object to create.</typeparam>
            <param name="xml">The XML from which to create the object.</param>
            <returns>An object instance of Type T constructed from the xml.</returns>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.ObjectSerializer.MaxNestingLevel">
            <summary>
            A global value to specify how deep the recursion should go when constructing the string from a object.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.Timer">
            <summary>
            The timer class is a light-weight serializable class that is used to capture end-to-end operational timing
            information - typically for tasks of interest like calls to external systems and end-to-end.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs an instance of the Timer class setting the description object to passed in value.
            </summary>
            <param name="name">
            Free-form textual description of what is being timed.  For example, "spFindUser", "GetUserDetails".
            </param>
            <param name="startNow">Instructs the timer to begin timing immediately.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.#ctor(System.String,System.Boolean,Microsoft.IT.Diagnostics.Timer,System.Boolean)">
            <summary>
            Constructs an instance of the Timer class setting the description object to passed in value.
            </summary>
            <param name="name">
            Free-form textual description of what is being timed.  For example, "ClientCompression", "DispatchDecompression".
            </param>
            <param name="startNow">Instructs the timer to begin timing immediately.</param>
            <param name="parentTimer">
            A child timer's elapsed time is a subset of its parentTimer's elapsed time .
            You should use this constructor when inside a method call that is already being timed.
            </param>
            <param name="isParallel">
            True indicates the timer will time a thread that is running in parallel with other sibling timers, false means the siblings are 
            executing serially.  All the sibling timers of an specific parent for which IsParallel==true will display in 
            a graphic UI in an overlapped fashion.  Serial timers are displayed end to end.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.#ctor(System.String,System.Boolean,Microsoft.IT.Diagnostics.Timer,System.Boolean,Microsoft.IT.Diagnostics.TimerType)">
            <summary>
            Constructs an instance of the Timer class setting the description object to the passed in value and
            adjusts the parent/child hierarchy as needed.
            </summary>
            <param name="name">
            Free-form textual description of what is being timed.  For example, "ClientCompression", "DispatchDecompression".
            </param>
            <param name="startNow">Instructs the timer to begin timing immediately.</param>
            <param name="parentTimer">
            A child timer's elapsed time is a subset of its parentTimer's elapsed time .
            You should use this constructor when inside a method call that is already being timed.
            </param>
            <param name="isParallel">
            True indicates the timer will time a thread that is running in parallel with other sibling timers, false means the siblings are 
            executing serially.  All the sibling timers of an specific parent for which IsParallel==true will display in 
            a graphic UI in an overlapped fashion.  Serial timers are displayed end to end.
            </param>
            <param name="timerType">Describes the type of timer.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.#ctor(System.String,Microsoft.IT.Diagnostics.TimerType,System.String,System.UInt64,System.UInt64,System.String,System.Int64,System.Boolean,System.String,System.DateTime,System.String)">
            <summary>
            Constructs an instance of the timer class setting all the members to the passed in values
            </summary>
            <param name="name">Name of the timer</param>
            <param name="timerType">Describes the type of timer.</param>
            <param name="machineName">Machine where the timer was constructed</param>
            <param name="startTickCount">The tick count when the timer's Start method was invoked</param>
            <param name="stopTickCount">The tick count when the timer's Stop method was invoked</param>
            <param name="applicationName">The application which created the timer</param>
            <param name="cpuFrequency">The number of CPU clock ticks that represent one second</param>
            <param name="isParallel">Indicates if this timer was running in parallel to a sibling or not.</param>
            <param name="timerVersion">Version of the library which instantiated the timer</param>
            <param name="timerExtensionXml">Custom timer extension object</param>
            <param name="createdDateTime"></param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.AddChildTimer(Microsoft.IT.Diagnostics.Timer)">
            <summary>
            Adds a Timer object to the child collection keeping the ParentTimer property up to date.
            </summary>
            <param name="childTimer">Timer to be added to the child collection.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.AddOverheadTimer(System.Double)">
            <summary>
            This method is intended for use by the infrastructure only and should not be used by applications.  It creates and inserts
            a timer that represents time that is unaccounted for either on the same machine or across machines.
            The timer created can only have meaning for display purposes.
            </summary>
            <param name="elapsedSeconds">
            The amount of time the created timer should represent.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.CheckForPossibleCycle(Microsoft.IT.Diagnostics.Timer,Microsoft.IT.Diagnostics.Timer)">
            <summary>
            Will check to see if adding a timer as child will cause any cyclic dependecies
            </summary>
            <param name="parentTimer">The Parent Time</param>
            <param name="childTimer">The child timer to be added</param>
            <returns>True if it causes cyclic dependecy, false if not</returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.Clone">
            <summary>
            Creates a complete deep copy of current instance.
            </summary>
            <returns>
            Returns a complete deep copy of current instance.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.CloneChildren(Microsoft.IT.Diagnostics.Timer,Microsoft.IT.Diagnostics.Timer)">
            <summary>
            Private method to clone the children of a passed in <paramref name="originalParentTimer"/> and append the 
            newly cloned instances to the passed in <paramref name="clonedParentTimer"/> instance.
            </summary>
            <param name="clonedParentTimer">
            The parent to which to append the newly cloned timers.
            </param>
            <param name="originalParentTimer">
            The original timer from which the children will be cloned.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.ComputeTickCountDifference(System.UInt64,System.UInt64)">
            <summary>
            Computes the difference in tick counts by checking to see if the CPU tick counter has rolled
            over and adjusting accordingly.
            </summary>
            <param name="startTickCount">
            The starting tick count from which to compute the delta.
            </param>
            <param name="stopTickCount">
            The stop tick count from which to compute the delta.
            </param>
            <returns>
            The difference in tick counts adjusted for potential CPU tick counter rollover.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.ComputeTicksAsSeconds(System.Int64,System.Int64)">
            <summary>
            Converts the passed in <paramref name="tickCount"/> to seconds based on the passed in <paramref name="cpuFrequency"/>.
            </summary>
            <param name="tickCount">
            The count of clock ticks to be convertered.
            </param>
            <param name="cpuFrequency">
            The number of clock ticks in a second as measured on the machine.
            </param>
            <returns>
            The amount of time in seconds the passed in tickCount represents.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.GetTimerInfo(Microsoft.IT.Diagnostics.Timer,System.Int32,System.Boolean)">
            <summary>
            Recurses through the child hierarchy appending a string representation of the objects.
            </summary>
            <param name="timer">Timer object from which to start.</param>
            <param name="level">The current level of recursion.</param>
            <param name="includeChildren">
            A boolean value that when true will request a complete recursion of the entire timer hierarchy
            and when false will return a string representation of just the current object instance.
            </param>
            <returns>A string representing this timer and its children's values.</returns>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.InsertChildTimer(System.Int32,Microsoft.IT.Diagnostics.Timer)">
            <summary>
            Inserts a Timer object to the child collection at a particular index keeping 
            the ParentTimer property up to date.
            </summary>
            <param name="index">Position at which to insert the child timer.</param>
            <param name="childTimer">Timer to be added to the child collection.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Upon deserialization this method sets the child timer's parentTimer property correctly
            to compensate for the fact that the parentTimer was explicitly configured to not be serialized.
            </summary>
            <param name="context">Not used.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            This event is called just prior to the object serializing. The implementation traverses the hierarchy
            blanking out all properties whose values can be inherited from their parent thereby optimizing/minimizing
            the overhead of data placed in the header of WCF calls.
            </summary>
            <param name="context">
            Not used.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.RedactFilteredProperties(Microsoft.IT.Diagnostics.Timer,Microsoft.IT.Diagnostics.TimerProperties)">
            <summary>
            Recursively traverses the timer hierarchy redacting the property values that are to be filtered.
            </summary>
            <param name="timer">
            The timer which is to be traversed and cleaned.
            </param>
            <param name="filteredProperties">
            The properties that are to be redacted.
            </param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.RemoveChildTimer(Microsoft.IT.Diagnostics.Timer)">
            <summary>
            Safely removes a child timer from the hierarchy.  
            </summary>
            <param name="timer">
            The timer to remove. The passed in <paramref name="timer"/> must exist or an exception is thrown.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the passed in timer does not exist in the hierarchy.
            </exception>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.ReplaceChildTimer(Microsoft.IT.Diagnostics.Timer,Microsoft.IT.Diagnostics.Timer)">
            <summary>
            Safely replaces one timer with another in the child hierarchy.
            </summary>
            <param name="oldTimer">The timer to be removed.</param>
            <param name="newTimer">The timer to be added in <paramref name="oldTimer"/>'s place.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.SetMachineName">
            <summary>
            A safe method to set the timer's MachineName property from the Environment.MachineName property and not 
            worry about DNS exceptions.  Once a call is successful the cached copy is used for the entire process.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.Start">
            <summary>
            Starts the timer and resets the internal values such that any previously captured timing data is discarded.  
            Every Timer instance should be started and stopped exactly once.
            </summary>
            <remarks>
            This Timer class does not support the capture of separate timing segments.
            If the timer was previously started and this method is invoked a second time, the previous start timestamp 
            is replaced with the current timestamp.
            </remarks>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.Stop">
            <summary>
            Stops the timer (and all descendents if necessary) by capturing the current system tick count. 
            Every Timer instance should be started and stopped exactly once.
            </summary>
            <remarks>
            This Timer class is not intended for reuse nor does it support the capture of separate timing segments.
            If the timer has not been started this method does nothing. 
            </remarks>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.StopChildren(Microsoft.IT.Diagnostics.Timer)">
            <summary>
            Recursively traverses the timer hierarchy stopping all timers.
            </summary>
            <param name="timer">Timer being processed.</param>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.ToString">
            <summary>
            Returns a string representation of the timer and its value including a recursive view of 
            the parent/child hierarchy.  This value is typically used for debugging or logging purposes.
            </summary>
            <returns>
            A string representation of the timer and its value including 
            a recursive view of the parent/child hierarchy.
            </returns>
            <remarks>
            This method is the same as making a call to ToString(true);
            </remarks>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.Timer.ToString(System.Boolean)">
            <summary>
            Returns a string representation of the timer and its value optionally including a recursive view of 
            the parent/child hierarchy.  This value is typically used for debugging or logging purposes.
            </summary>
            <param name="includeChildren">
            A boolean value that when true will request a complete recursion of the entire timer hierarchy
            and when false will return a string representation of just the current object instance.
            </param>
            <returns>
            A string representation of the timer and its value optionally including 
            a recursive view of the parent/child hierarchy.
            </returns>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.ApplicationName">
            <summary>
            Gets and sets the name of the application that is responsible for the creation of the timer. This is an inherited property.
            </summary>
            <remarks>
            In order to reduce the size of the data put in the header of a WCF call the Timer class provides certain properties that inherit
            their values, via property implementations, from the value from the closest ancestor that matches.  This is one of those properties.
            </remarks>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.ChildTimers">
            <summary>
            Gets a collection of timer objects whose elapsed time should be considered as a subset
            of this timer's elapsed time .
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.CpuFrequency">
            <summary>
            Gets the number of CPU clock ticks that represent one second.  This value varies by machine and operating system. This is an inherited property.
            </summary>
            <remarks>
            In order to reduce the size of the data put in the header of a WCF call the Timer class provides certain properties that inherit
            their values, via property implementations, from the value from the closest ancestor that matches.  This is one of those properties.
            </remarks>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.DefaultApplicationName">
            <summary>
            Gets and sets a value that will be used to populate the <see cref="P:Microsoft.IT.Diagnostics.Timer.ApplicationName"/> property on
            all newly constructed timer instances.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.Name">
            <summary>
            Gets and sets the free-form textual description of what is being timed.  For example, "ClientCompression", "DispatchDecompression".
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.DisplayName">
            <summary>
            Get a simple string with data from the object instance suitable for display in UI or log files.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.ElapsedMilliseconds">
            <summary>
            Gets the number of milliseconds this timer was in the 'started' state.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.ElapsedSeconds">
            <summary>
            Gets the number of seconds this timer was in the 'started' state.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.ElapsedTicks">
            <summary>
            Gets the number of ticks of the system clock that occurred while this timer was in the 'started' state.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.ErrorMessage">
            <summary>
            Gets and sets a value that describes an error that has occurred during the lifetime of the Timer instance that describes a 
            condition that renders the instance data invalid.  This property will have a value for conditions like if an instance
            is stopped on a machine other than the one on which it was started.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.IsParallel">
            <summary>
            Gets and sets a boolean value that indicates whether or not this timer is executing in parallel with other siblings in the hierarchy.
            True indicates the timer will time a thread that is running in parallel with other sibling timers, false means the siblings are 
            executing serially.  All the sibling timers of an specific parent for which IsParallel==true will display in 
            a graphic UI in an overlapped fashion.  Serial timers are displayed end to end.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.IsStarted">
            <summary>
            Gets a value indicating whether or not the timer has been started and is accruing elapsed time.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.MachineName">
            <summary>
            Gets the machine on which the timer was constructed. This is an inherited property.
            </summary>
            <remarks>
            In order to reduce the size of the data put in the header of a WCF call the Timer class provides certain properties that inherit
            their values, via property implementations, from the value from the closest ancestor that matches.  This is one of those properties.
            </remarks>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.ParentTimer">
            <summary>
            Gets the Timer object that is parent in the hierarchy.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.StartTickCount">
            <summary>
            Gets the CPU clock's tick count at the point the Start() method was invoked.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.StopTickCount">
            <summary>
            Gets the CPU clock's tick count at the point the Stop() method was invoked.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.RootTimer">
            <summary>
            Gets the topmost Timer in the hierarchy.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.TimerExtension">
            <summary>
            Gets and sets the custom timer extension object. This property can be any custom implementation of the 
            a <see cref="P:Microsoft.IT.Diagnostics.Timer.TimerExtension"/> abstract class.  It must be a serializable class that is recognized by the channel stack's
            serializer/deserializer - typically accomplished via app.config file &lt;knownType&gt; entry.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.TimerType">
            <summary>
            Gets and sets the type of timer.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.TimerVersion">
            <summary>
            Gets the version of the library that was used to construct the Timer instance.  By default, 
            this value is generated from the AssemblyFileVersion of library defining this class. This is an inherited property.
            </summary>
            <remarks>
            In order to reduce the size of the data put in the header of a WCF call the Timer class provides certain properties that inherit
            their values, via property implementations, from the value from the closest ancestor that matches.  This is one of those properties.
            </remarks>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.UserName">
            <summary>
            This value represents the name of the user that initiated the timed sequence and typically 
            only appears on the root timer.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.CreatedDateTime">
            <summary>
            Gets the DateTime stamp when the timer was started.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.TimerExtensionXml">
            <summary>
            Gets the serialized Xml for Timer Extension object
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.Timer.ExtensionData">
            <summary>
            Gets and sets the <see cref="T:System.Runtime.Serialization.ExtensionDataObject"/> that functions as a property bag for properties encountered
            in XML but unrecognized by the DataContractSerializer.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.TimerExtension">
            <summary>
            Interface required for including additional timing information on Timer records.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.TimerExtension.ExtensionData">
            <summary>
            Gets and sets the <see cref="T:System.Runtime.Serialization.ExtensionDataObject"/> that functions as a property bag for properties encountered
            in XML but unrecognized by the DataContractSerializer.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.ProxyTimerManager">
            <summary>
            A static class that provides helper methods for managing the propagation of a <see cref="T:Microsoft.IT.Diagnostics.Timer"/> object to 
            a client proxy that implements a <see cref="T:Microsoft.IT.ServiceModel.TimingBehavior"/> in its channel stack.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ProxyTimerManager.GetTimer``1(System.ServiceModel.ClientBase{``0})">
            <summary>
            A static method that will traverse the channel stack of the passed in client proxy and locate the configured
            <see cref="T:Microsoft.IT.ServiceModel.TimingBehavior"/> object instance and return the Timer property of that behavior.
            </summary>
            <typeparam name="T">
            Specifies the interface of the client from which the timer is being requested.
            </typeparam>
            <param name="client">
            A client proxy that is configured with a <see cref="T:Microsoft.IT.ServiceModel.TimingBehavior"/> on its endpoint.
            </param>
            <returns>
            A <see cref="T:Microsoft.IT.Diagnostics.Timer"/> that has been marshalled to a remote WCF service.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the client parameter is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the client parameter is not configured with a <see cref="T:Microsoft.IT.ServiceModel.TimingBehavior"/>.</exception>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ProxyTimerManager.SetTimer``1(System.ServiceModel.ClientBase{``0},Microsoft.IT.Diagnostics.Timer)">
            <summary>
            A static method that will traverse the channel stack of the passed in client proxy and locate the configured
            <see cref="T:Microsoft.IT.ServiceModel.TimingBehavior"/> object instance and set the RootTimer property of that behavior to the value in
            the <paramref name="timer"/> parameter.
            </summary>
            <typeparam name="T">
            Specifies the interface of the client from which the timer is being requested.
            </typeparam>
            <param name="client">
            A client proxy that is configured with a <see cref="T:Microsoft.IT.ServiceModel.TimingBehavior"/> on its endpoint.
            </param>
            <param name="timer">
            The <see cref="T:Microsoft.IT.Diagnostics.Timer"/> which is the value to be set.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if the client parameter is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the client parameter is not configured with a <see cref="T:Microsoft.IT.ServiceModel.TimingBehavior"/>.</exception>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.TimingBehavior">
            <summary>
            Extends the behavior of a contract to include timings captured at the relevant and interesting
            points of a method call.  This WCF behavior implementation takes care of timing end-to-end the 
            execution time of a service call and provides programmatic access to the timing data so that 
            server hosts can accumulate subordinate timings.  It also provides programmatic access to the client
            to also extend the timing collection and implement a custom reporting method.  This class can be
            used as both an Endpoint behavior (configured via app.config) or a Contract behavior (configured
            via attributes on the contract).
            </summary>
            <remarks>
            <para>
            This behavior manages the exchange of Timer between the proxy and the behavior via a [ThreadStatic] 
            property.  This property is only considered valid in the following 2 cases:  
            <list type="ordered">
            <item>
            That period of time between an application setting the client proxy Timer property just prior to making 
            a web service call and the point that the BeforeSendRequest event fires;  
            </item>
            <item>
            That period of time between when the AfterReceiveReply fires and the application retrieves the Timer from 
            the client proxy.
            </item>
            </list>
            This convention works for both synchronous and asynchronous calls because we are always reasonably guaranteed
            that the application will not spawn new threads to set or retrieve the Timer.  This is in fact a similar
            approach to how .NET manages the OperationContext.
            </para>
            <para>
            Once the behavior fires at the beginning of the request the timer moved to a collection that tracks internally 
            via the WCF MessageId.  This unique identifier is carried through to reply as the RelatesTo property in the WCF
            header.  At the last possible moment the managed Timer for the request is moved to the the ThreadStatic property
            for the client to be able to access without requiring the need to know a 'key'.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.TimingBehavior.proxyRootTimers">
            <summary>
            A private collection that is used only to exchange data between proxy and client. Timers are managed in the 
            collection with a key of ManagedThreadId.
            </summary>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.TimingBehavior.proxyRootTimerSetByCaller">
            <summary>
            A ThreadStatic values that is set when a client application sets a value into the proxy.Timer property just
            prior to making a web service call.  This instructs the TimingBehavior that the proxyRootTimers.Timer is valid and
            should be used.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Required implementation of the <see cref="T:System.ServiceModel.Description.IEndpointBehavior"/> interface.  Currently this method does nothing.
            </summary>
            <param name="endpoint">Not used.  See <see cref="T:System.ServiceModel.Description.IEndpointBehavior"/> for details.</param>
            <param name="bindingParameters">Not used.  See <see cref="T:System.ServiceModel.Description.IEndpointBehavior"/> for details.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Required implementation of the <see cref="T:System.ServiceModel.Description.IEndpointBehavior"/> interface.  This method 
            adds the TimingClientMessageInspector to the clientRuntime's collection.
            </summary>
            <param name="endpoint">Not used.  See <see cref="T:System.ServiceModel.Description.IEndpointBehavior"/> for details.</param>
            <param name="clientRuntime">The object that provides access to the existing MessageInspectors collection.  See <see cref="T:System.ServiceModel.Description.IContractBehavior"/> for details.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            Adds a custom MessageInspector to the chain of existing inspectors.
            </summary>
            <param name="endpoint">Endpoint of the server-side service.  See <see cref="T:System.ServiceModel.Description.IContractBehavior"/> for details.</param>
            <param name="endpointDispatcher">The object that provides access to the existing MessageInspectors collection.  See <see cref="T:System.ServiceModel.Description.IEndpointBehavior"/> for details.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Verifies that the contract and behavior attribute settings are valid. Current implmentation does nothing.
            </summary>
            <param name="endpoint">See <see cref="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)"/> for details.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Required implementation of the <see cref="T:System.ServiceModel.Description.IContractBehavior"/> interface.  Currently this method does nothing.
            </summary>
            <param name="contractDescription">Not used.  See <see cref="T:System.ServiceModel.Description.IContractBehavior"/> for details.</param>
            <param name="endpoint">Not used.  See <see cref="T:System.ServiceModel.Description.IContractBehavior"/> for details.</param>
            <param name="bindingParameters">Not used.  See <see cref="T:System.ServiceModel.Description.IContractBehavior"/> for details.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Adds a custom MessageInspector to the chain of existing inspectors.
            </summary>
            <param name="contractDescription">Not used.  See <see cref="T:System.ServiceModel.Description.IContractBehavior"/> for details.</param>
            <param name="endpoint">Not used.  See <see cref="T:System.ServiceModel.Description.IContractBehavior"/> for details.</param>
            <param name="clientRuntime">The object that provides access to the existing MessageInspectors collection.  See <see cref="T:System.ServiceModel.Description.IContractBehavior"/> for details.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
            <summary>
            Adds a custom MessageInspector to the chain of existing inspectors.
            </summary>
            <param name="contractDescription">Not used.  See <see cref="T:System.ServiceModel.Description.IContractBehavior"/> for details.</param>
            <param name="endpoint">Not used.  See <see cref="T:System.ServiceModel.Description.IContractBehavior"/> for details.</param>
            <param name="dispatchRuntime">The object that provides access to the existing MessageInspectors collection.  See <see cref="T:System.ServiceModel.Description.IContractBehavior"/> for details.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Verifies that the contract and behavior attribute settings are valid. Current implmentation does nothing.
            </summary>
            <param name="contractDescription">See <see cref="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)"/> for details.</param>
            <param name="endpoint">See <see cref="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)"/> for details.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
            Creates and starts a <see cref="T:Microsoft.IT.Diagnostics.Timer"/> objects then adds it to the request headers collection.
            </summary>
            <param name="request">The current request message.  See <see cref="T:System.ServiceModel.Dispatcher.IClientMessageInspector"/> for details.</param>
            <param name="channel">The channel performing the request.  See <see cref="T:System.ServiceModel.Dispatcher.IClientMessageInspector"/> for details.</param>
            <returns>
            A state object which is ultimately passed to the AfterReceiveReply() method.  Currently this 
            is a null object.  See <see cref="T:System.ServiceModel.Dispatcher.IClientMessageInspector"/> for details.
            </returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Retrieves the <see cref="T:Microsoft.IT.Diagnostics.Timer"/> object from the reply's header collection, stops it then reports to all registered 
            ReportTimings event handlers.
            </summary>
            <param name="reply">The reply message.  See <see cref="T:System.ServiceModel.Dispatcher.IClientMessageInspector"/> for details.</param>
            <param name="correlationState">
            A state object set by the BeforeSendRequest method.  Currently not used.  See <see cref="T:System.ServiceModel.Dispatcher.IClientMessageInspector"/> for details.
            </param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
            <summary>
            Retrieves the <see cref="T:Microsoft.IT.Diagnostics.Timer"/> object from the request's header collection and makes it available to implementors of 
            the <see cref="T:Microsoft.IT.Diagnostics.IInstrumented"/> interface.  If no timer is present in the header collection a
            new instance is created and started.
            </summary>
            <param name="request">The request message.  See <see cref="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector"/> for details.</param>
            <param name="channel">Not used. See <see cref="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector"/> for details.</param>
            <param name="instanceContext">
            Provides access to the instance object that implements the contract.  
            See <see cref="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector"/> for details.
            </param>
            <returns>
            Either the <see cref="T:Microsoft.IT.Diagnostics.IInstrumented"/> object if found or the timer that was created.
            This value is ultimately passed to the BeforeSendReply() method as the correlationState.
            </returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Processes the message before returning to the client and reports the aggregated timings when
            appropriate.  The timings collected by the server process are returned in the SOAP header.
            </summary>
            <param name="reply">The message returned to the client.  </param>
            <param name="correlationState">
            Either a Timer object of an IInstrumented object depending on the configuration of the hosted instance.
            </param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.GetCompressionDetails(System.ServiceModel.Channels.Message)">
            <summary>
            Retrieves the CompressionDetails header from the message.
            </summary>
            <param name="message">
            The message from which the CompressionDetails header is to be extracted.
            </param>
            <returns>
            The <see cref="T:Microsoft.IT.ServiceModel.CompressionDetails"/> found in the message, or null if no header is found.
            </returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.SetCompressionHeader(System.ServiceModel.Channels.Message,Microsoft.IT.ServiceModel.CompressionDetails)">
            <summary>
            Ensures the message has a CompressionDetails header value set to the value of the passed in <paramref name="compressionDetails "/> by removing
            any existing header and adding a new one.  If <paramref name="compressionDetails"/> is null any existing header is removed and nothing is added.
            </summary>
            <param name="message">
            Message into which the CompressionDetails header is to be set.
            </param>
            <param name="compressionDetails ">
            The value to be used for the CompressionDetails header.
            </param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.GetRootTimerFromHeaders(System.ServiceModel.Channels.Message)">
            <summary>
            Retrieves the timer found in the RootTimerHeader of the message.
            </summary>
            <param name="message">
            The message from which the root timer is to be extracted.
            </param>
            <returns>
            The timer found in the RootTimerHeader of the message, or null if no header is found.
            </returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.SetRootTimerToHeaders(System.ServiceModel.Channels.Message,Microsoft.IT.Diagnostics.Timer)">
            <summary>
            Ensures the message has a RootTimerHeader value set to the value of the passed in <paramref name="rootTimer"/> by removing
            any existing header and adding a new one.  If <paramref name="rootTimer"/> is null any existing header is removed and nothing is added.
            </summary>
            <param name="message">
            Message into which the rootTimer is to be set.
            </param>
            <param name="rootTimer">
            The value to be used for the RootTimerHeader.
            </param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.InitializeRootTimer(System.ServiceModel.Channels.Message)">
            <summary>
            Sets the TimingBehavior.RootTimer property with a newly created root timer which contains a placeholder child timer. 
            The new timer is then used as the root for all future appending of child timers.
            The placeholder timer is replaced in the client or dispatch message inspector with actual timer for which the placeholder is intended.
            </summary>
            <param name="message">
            The message that is currently being processed.
            </param>
            <returns>
            The newly created timer which is now set as the TimingBehavior.RootTimer.
            </returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.AppendTimer(Microsoft.IT.Diagnostics.Timer,System.ServiceModel.Channels.Message,Microsoft.IT.ServiceModel.TimingBehaviorRole)">
            <summary>
            This method is only called by other behaviors in the channels stack that want to participate in 
            the timing mechanism.  Other behaviors (Compression for example) call this method passing
            in the timer to be recorded and this method ensures it gets hooked into the headers and
            other references as needed.
            </summary>
            <param name="timer">The timer to be appended.</param>
            <param name="message">The message being processed.</param>
            <param name="timingBehaviorRole">
            Describes the role of the calling behavior as far as being a ClientSend, ClientReceive, DispatchSend and DispatchReceive.
            </param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.GetRootTimer">
            <summary>
            Returns the root timer property maintained by the TimingBehavior instance.
            </summary>
            <returns>
            Returns the root timer property maintained by the TimingBehavior instance.
            </returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehavior.SetRootTimer(Microsoft.IT.Diagnostics.Timer)">
            <summary>
            Explicitly sets the TimingBehavior.RootTimer to the value supplied by the <paramref name="timer"/> parameter.
            This method is called by the <see cref="T:Microsoft.IT.ServiceModel.ProxyTimerManager"/> class to allow applications to set the proxy
            timer in advance of being used in order to allow an intuitive coding experience.
            </summary>
            <param name="timer">
            Value to be used as the RootTimer.
            </param>
            <remarks>
            When this method is called to explicitly set the root timer, the infrastructure will not automatically clear the
            timer at the beginning of the next call.
            </remarks>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.TimingBehavior.WebServiceReturnValueIsEnabled">
            <summary>
            Gets and sets the configured value for that defines whether or not the web service should return
            timer instrumentation data to the caller.  Default is true if not specified.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.TimingBehavior.CacheManager">
            <summary>
            Gets and sets the options that control caching and ultimate reporting of timing data.  
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.TimingBehavior.TimerOptions">
            <summary>
            Gets and sets the options that control various aspects of the capturing of timing data.  See the <see cref="P:Microsoft.IT.ServiceModel.TimingBehavior.TimerOptions"/>
            class for more information on what options are available.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.TimingBehavior.ProxyRootTimerSetByCallerFlagsKeyedCollection">
            <summary>
            A private synchronized collection to track some boolean values by ThreadId.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.TimingBehavior.ProxyRootTimerSetByCallerFlagsKeyedCollection.IsSet">
            <summary>
            Gets and sets a boolean value on a per thread basis by using a Dictionary collection keyed by thread id.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.TimingBehaviorExtensionElement">
            <summary>
            This class enable the WCF runtime to hook into the TimingEndpointBehavior functionality
            by way of the app.config file.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TimingBehaviorExtensionElement.CreateBehavior">
            <summary>
            Required implementation of the abstract member which returns an instance of the 
            behavior object that will provide the timing behavior functionality.
            </summary>
            <returns>An instance ot the <see cref="T:Microsoft.IT.ServiceModel.TimingBehavior"/> class.</returns>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.TimingBehaviorExtensionElement.BehaviorType">
            <summary>
            Returns the type name of the class that provides the timing behavior functionality - 
            i.e. typeof(<see cref="T:Microsoft.IT.ServiceModel.TimingBehavior"/>).
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.TimingBehaviorExtensionElement.TimerOptionsName">
            <summary>
            Gets the name that is to be used to acquired the <see cref="T:Microsoft.IT.Configuration.TimerOptions"/> instance that represents the 
            values in an app.config file's &lt;timingOptions&gt; element.  This element defines
            the various values that can control the behavior of the timing infrastructure.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.TimingBehaviorExtensionElement.CacheManagerOptionsName">
            <summary>
            Gets the name that is to be used to acquired the <see cref="T:Microsoft.IT.Configuration.CacheManagerOptions"/> instance that represents the 
            values in an app.config file's &lt;cacheManagerOptions&gt; element.  
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.TimingBehaviorExtensionElement.WebServiceReturnValueIsEnabled">
            <summary>
            Gets the value of the webServiceReturnValueIsEnabled attribute in the config file which controls whether or not
            a properly configured web service will return timing information to callers of the web service.  This value is true by
            default.  When set to false timing data will still be captured but the results will not be placed in the response header
            of the web service call and therefore will not be available to the caller.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.TimingBehaviorExtensionElement.CacheManagerType">
            <summary>
            Gets the cache manager type to be used to persist the timers. 
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.TimingBehaviorRole">
            <summary>
            Defines the various kinds of behaviors that participate in adding <see cref="T:Microsoft.IT.Diagnostics.Timer"/>s to an instrumented WCF call.
            </summary>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.TimingBehaviorRole.None">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.TimingBehaviorRole.ClientSend">
            <summary>
            Identifies the behavior as a client side behavior that is invoked prior to sending to the server.
            </summary>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.TimingBehaviorRole.ClientReceive">
            <summary>
            Identifies the behavior as a client side behavior that is invoked after receiving a response from the server.
            </summary>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.TimingBehaviorRole.DispatchSend">
            <summary>
            Identifies the behavior as a dispatch behavior that is invoked prior to sending the response to the client.
            </summary>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.TimingBehaviorRole.DispatchReceive">
            <summary>
            Identifies the behavior as a dispatch behavior that is invoked after receiving the request from the client and prior to the service processing it.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Configuration.TimerOptions">
            <summary>
            This class represents the various values that can be set via configuration file to control
            the behavior of the instrumentation infrastructure.
            </summary>
        </member>
        <member name="F:Microsoft.IT.Configuration.TimerOptions.DefaultName">
            <summary>
            Specifies the name to be used for the obtaining an instance of default values.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptions.#ctor(Microsoft.IT.Configuration.TimerOptionsElement)">
            <summary>
            Constructs an instance from the values found in the app.config file's &lt;diagnostics&gt; section.
            </summary>
            <param name="timerOptionsElement">
            The app.config entry from which the new instance is to be constructed.
            </param>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptions.GetNamedTimerOptions(System.String)">
            <summary>
            Factory method to create and return an instance constructed and initialized from 
            the values found in the app.config file's &lt;diagnostics&gt; section.
            </summary>
            <param name="name">
            Name of that uniquely identifies the <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> from the app.config that is
            to be used to initialize the instance returned.
            </param>
            <returns>
            An instance initialized from the <see cref="T:Microsoft.IT.Configuration.TimerOptionsElement"/> from the app.config that is
            uniquely identified by the <paramref name="name"/> requested.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptions.Equals(System.Object)">
            <summary>
            Compares the current value to the passed in value and returns true if all fields in the current
            instance are equal to their corresponding fields in the second instance.
            </summary>
            <param name="obj">
            Object instance to which the current instance is compared.
            </param>
            <returns>
            Returns true if all fields in the current instance are equal to the corresponding fields in the second instance.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptions.op_Equality(Microsoft.IT.Configuration.TimerOptions,Microsoft.IT.Configuration.TimerOptions)">
            <summary>
            Compares two object instances and
            returns true if all fields in the first instance are equal to the corresponding fields in the second instance.
            </summary>
            <param name="obj1">First instance to compare.</param>
            <param name="obj2">Instance to which the <paramref name="obj1"/> instance is compared.</param>
            <returns>
            Returns true if all fields in the first instance are equal to the corresponding fields in the second instance.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptions.op_Inequality(Microsoft.IT.Configuration.TimerOptions,Microsoft.IT.Configuration.TimerOptions)">
            <summary>
            Compares two object instances and
            returns true if any field in the first instance does not equal the corresponding field in the second instance.
            </summary>
            <param name="obj1">First instance to compare.</param>
            <param name="obj2">Instance to which the <paramref name="obj1"/> instance is compared.</param>
            <returns>
            Returns true if any field in the first instance does not equal the corresponding field in the second instance.
            </returns>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptions.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.IT.Configuration.TimerOptions.Name">
            <summary>
            Gets and sets the name of the instance as it was defined in the app.config file.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.TimerOptions.TimerPropertiesFilter">
            <summary>
            Gets and sets a comma-delimited value that is a list of <see cref="T:Microsoft.IT.Diagnostics.TimerProperties"/> values specifying certain potentially 
            sensitive data elements that should be ommitted from all <see cref="T:Microsoft.IT.Diagnostics.Timer"/> instances created in the current process.  
            This value is initially established via the 'timerDataFilter' attribute of the 'timerOptions' element in the config file and the default is <see cref="F:Microsoft.IT.Diagnostics.TimerProperties.None"/>.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Configuration.TimerOptionsElement">
            <summary>
            This class represents the various values that can be set via configuration file to control
            the behavior of the instrumentation infrastructure.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Configuration.TimerOptionsElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.TimerOptionsElement.Name">
            <summary>
            Specifies a logical name by which an application or caller can refer to this particular entry.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Configuration.TimerOptionsElement.TimerPropertiesFilter">
            <summary>
            Gets and sets the value of timerDataFilter attribute in the config file.  This value is comma-delimited list of <see cref="T:Microsoft.IT.Diagnostics.TimerProperties"/> 
            values specifying certain potentially sensitive data elements that should be ommitted from <see cref="T:Microsoft.IT.Diagnostics.Timer"/> instance created in the current
            process.
            </summary>
        </member>
        <member name="T:Microsoft.IT.Diagnostics.TraceContextData">
            <summary>
            A class that exposes certain system derivable properties and is intended for use with
            the tracing methods to provide some standard values such as PID and thread ID.  The ToString()
            method returns values in the format defined by the FormatString property.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TraceContextData.#cctor">
            <summary>
            Initializes the more expensive properties that cannot change over time in the context of 
            the app domain.  This is done to improve performance when used in tracing methods.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TraceContextData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.Diagnostics.TraceContextData.ToString">
            <summary>
            Returns a string representation of the instance that is formatted according to the <see cref="P:Microsoft.IT.Diagnostics.TraceContextData.FormatString"/> property.
            </summary>
            <returns>
            A string representation of the instance that is formatted according to the <see cref="P:Microsoft.IT.Diagnostics.TraceContextData.FormatString"/> property.
            </returns>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.TraceContextData.Name">
            <summary>
            Name to appear in the output string to distinguish the trace context from others.
            </summary>
        </member>
        <member name="P:Microsoft.IT.Diagnostics.TraceContextData.FormatString">
            <summary>
            The format string passed to a string.Format method that will be used to generate the output.
            The arguments used in the call in order are: <see cref="M:System.Diagnostics.Stopwatch.GetTimestamp"/>, 
            <see cref="P:Microsoft.IT.Diagnostics.TraceContextData.Name"/>,
            <see cref="M:System.Diagnostics.Process.GetCurrentProcess"/>.Id, 
            <see cref="P:System.Threading.Thread.ManagedThreadId"/>,
            <see cref="P:System.Threading.Thread.Name"/>,
            and 
            <see cref="P:System.Environment.MachineName"/>.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.CompressionEncoder">
            <summary>
            CompressionEncoder provides GZip compression for WCF messages.  Compression is applied 
            to messages that exceed a specified threshhold.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoder.#ctor(System.ServiceModel.Channels.MessageEncoder)">
            <summary>
            Public constructor
            </summary>
            <param name="innerEncoder">
            The existing encoder which will be chained to by the new encoder.
            </param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoder.GetDecompressedMessageBuffer(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String,System.UInt64@)">
            <summary>
            Internal method to read a compression formatted buffer, extract the meaningful timer data and decompmress
            returning a buffer usable by WCF.
            </summary>
            <param name="buffer">
            A buffer that was passed from the caller encoder containing data in a specific format.
            </param>
            <param name="bufferManager">
            WCF provided manager for buffer memory allocation.
            </param>
            <param name="contentType">
            Mime type of the compressed data.
            </param>
            <param name="compressTimerStopTickCount">
            A value sent by the caller after the compressed buffer was created that represents the CPU tick count on the 
            caller machine at the point in time where compression was completed.
            </param>
            <returns>
            A decompressed buffer usable by WCF.
            </returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoder.GetCompressedMessageBuffer(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.Int32,System.Int32,Microsoft.IT.Diagnostics.Timer)">
            <summary>
            An internal method that will compress a normal message and return a buffer containing the compressed payload.
            </summary>
            <param name="buffer">
            The uncompressed buffer that is to be compressed.
            </param>
            <param name="bufferManager">
            WCF provided manager for buffer memory allocation.
            </param>
            <param name="messageOffset">
            The offset into the parent buffer whern the message begins.
            </param>
            <param name="compressionThreshold">
            Messages whose length is less than this value will not be compressed.
            </param>
            <param name="compressionTimer">
            Timer from which to obtain StopTickCount which is appended to the end of the buffer.
            </param>
            <returns>
            A compressed buffer.
            </returns>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionEncoder.ContentType">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionEncoder.MediaType">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionEncoder.MessageVersion">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionEncoder.CompressionContext">
            <summary>
            Gets and sets the context in which the encoder is running.  Allowed values are 'Client' or 'Server'.
            This value is set from the app.config custom encoder tag.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionEncoder.CompressionThreshold">
            <summary>
            Gets and sets the point at which compression will be performed.  When a message about to be sent
            exceeds this size it will be compressed prior to sending.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement">
            <summary>
            Summary description for CompressionEncoderBindingElement.
            This is the binding element within the custom binding that enables the 
            CompressionEncoder
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.#ctor">
            <summary>
            Summary description for CompressionEncoderBindingElement.
            Use the default text encoder as the inner encoder
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.#ctor(System.ServiceModel.Channels.MessageEncodingBindingElement)">
            <summary>
            CompressionEncoderBindingElement with messageEncoderBindingElement 
            specified
            </summary>
            <param name="messageEncoderBindingElement">
            The configuration element that provides the configuration binding information.
            </param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.CreateMessageEncoderFactory">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel factory.
            </summary>
            <param name="context">The BindingContext context.</param>
            <typeparam name="TChannel">The Type of channel.</typeparam>
            <returns>
            A new IChannelFactory instance.
            </returns>
            <remarks>
            Whenever a binding is instantiated, WCF creates a ChannelBuildContext which contains the 
            sequence of the binding elements that shall be stacked onto each other into a channel or listener 
            stack and starts stacking them from top to bottom by invoking the topmost binding element’s 
            BuildChannelListener or BuildChannelFactory method. 
            Once the binding element is done creating its channel factory or channel listener, 
            it invokes BuildInnerChannel[Listener/Factory] on the context to have the binding element 
            underneath do its work.
            Our binding element won’t create a channel factory or listener, but rather put itself 
            into the BindingParameters collection on the build context and will then just have the context complete 
            the construction work.
            </remarks>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel listener.
            </summary>
            <param name="context">The BindingContext context.</param>
            <typeparam name="TChannel">The Type of channel.</typeparam>
            <returns>
            A new IChannelListener instance.
            </returns>
            <remarks>
            Our binding element won’t create a channel listener, but rather put itself 
            into the BindingParameters collection on the build context and will then just have the context complete 
            the construction work.
            </remarks>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the inner channel listener 
            can be built to listen for a specified type of channel. 
            </summary>
            <param name="context">The BindingContext context.</param>
            <typeparam name="TChannel">The Type of channel.</typeparam>
            <returns>
            True if the channel listener can be built, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.GetCompressionThreshold(System.ServiceModel.Channels.Binding)">
            <summary>
            Gets a compression threshold value from the channel stack's <see cref="T:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement"/>.
            This method is called by clients to get the message size at which compression will kick in.
            </summary>
            <param name="binding">The binding from which to retrieve the compression threshold.</param>
            <returns>
            A number of bytes.  Messages that are larger than this number of bytes will be compressed.
            </returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.SetCompressionThreshold(System.ServiceModel.Channels.Binding,System.Int32)">
            <summary>
            Sets a compression threshold value into the channel stack's <see cref="T:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement"/>.
            This method is called by clients to set the message size at which compression will kick in.
            </summary>
            <param name="binding">The binding to which the compression threshold should be applied.</param>
            <param name="compressionThreshold">
            A number of bytes.  Messages that are larger than this number of bytes will be compressed.
            </param>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.InnerMessageEncodingBindingElement">
            <summary>
            Gets and sets the InnerMessageEncodingBindingElement
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.CompressionContext">
            <summary>
            Gets and sets the context in which the encoder is running.  Allowed values are 'Client' or 'Server'.
            This value is set from the app.config custom encoder tag.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.CompressionThreshold">
            <summary>
            Gets and sets the point at which compression will be performed.  When a message about to be sent
            exceeds this size it will be compressed prior to sending.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionEncoderBindingElement.MessageVersion">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.CompressionMessageEncoderFactory">
            <summary>
            This class is used to create the custom compression encoder.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionMessageEncoderFactory.#ctor(System.ServiceModel.Channels.MessageEncoderFactory)">
            <summary>
            Constructs a <see cref="T:Microsoft.IT.ServiceModel.CompressionMessageEncoderFactory"/> object that will 
            link to the passed in <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory"/>.
            </summary>
            <param name="messageEncoderFactory">
            Factory instance containing the chained encoder.
            </param>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionMessageEncoderFactory.Encoder">
            <summary>
            Gets the underlying <see cref="T:Microsoft.IT.ServiceModel.CompressionEncoder"/> object.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionMessageEncoderFactory.MessageVersion">
            <summary>
            Gets the underlying <see cref="T:Microsoft.IT.ServiceModel.CompressionEncoder"/> object's <see cref="P:Microsoft.IT.ServiceModel.CompressionMessageEncoderFactory.MessageVersion"/>.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.CompressionContext">
            <summary>
            Used to identify to the encoder the context under which it is running.
            </summary>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.CompressionContext.Client">
            <summary>Indicates the encoder is functioning on the client side.</summary>
        </member>
        <member name="F:Microsoft.IT.ServiceModel.CompressionContext.Server">
            <summary>Indicates the encoder is functioning on the server side.</summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement">
            <summary>
             This class is necessary to be able to plug in the Compression encoder 
             from the binding element through configuration file
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement.CreateBindingElement">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement.InnerMessageEncoding">
            <summary>
            Gets the or sets the InnerMessageEncoding Property.
            The only property we need to configure for our binding element is the type of
            inner encoder to use. Here, we support text and binary.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement.CompressionThreshold">
            <summary>
            Gets and sets the value of compressionThreshold attribute in the config file.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement.CompressionContext">
            <summary>
            Gets and sets the context under which the compression encoder is running.  Allowed values 
            are Client
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement.ReaderQuotasMaxArrayLength">
            <summary>
            Gets and sets the value of readerQuotasMaxArrayLength attribute in the config file.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement.ReaderQuotasMaxBytesPerRead">
            <summary>
            Gets and sets the value of readerQuotasMaxBytesPerRead  attribute in the config file.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement.ReaderQuotasMaxDepth">
            <summary>
            Gets and sets the value of readerQuotasMaxDepth attribute in the config file.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement.ReaderQuotasMaxNameTableCharCount">
            <summary>
            Gets and sets the value of readerQuotasMaxNameTableCharCount attribute in the config file.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement.ReaderQuotasMaxStringContentLength">
            <summary>
            Gets and sets the value of readerQuotasMaxStringContentLength attribute in the config file.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionMessageEncodingElement.BindingElementType">
            <summary>
            Gets the type of the binding element.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.CompressionTimerExtension">
            <summary>
            Implementation of a <see cref="T:Microsoft.IT.Diagnostics.TimerExtension"/> class that provides compression
            statistics to <see cref="T:Microsoft.IT.Diagnostics.Timer"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionTimerExtension.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionTimerExtension.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an object from the supplied values.
            </summary>
            <param name="compressedSize">
            When sending data (either client or dispatch) this is the size of the message after compression is performed.
            When receiving data (either client or dispatch) this is the size of the message before decompression is performed.
            </param>
            <param name="decompressedSize">
            When sending data (either client or dispatch) this is the size of the message before compression is performed.
            When receiving data (either client or dispatch) this is the size of the message after decompression is performed.
            </param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.CompressionTimerExtension.ToString">
            <summary>
            Returns a human readable string of the form: 'CompressedSize=999, DecompressedSize=999'.
            </summary>
            <returns>
            Returns a human readable string of the form: 'CompressedSize=999, DecompressedSize=999'.
            </returns>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionTimerExtension.CompressedSize">
            <summary>
            When sending data (either client or dispatch) this is the size of the message after compression is performed.
            When receiving data (either client or dispatch) this is the size of the message before decompression is performed.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.CompressionTimerExtension.DecompressedSize">
            <summary>
            When sending data (either client or dispatch) this is the size of the message before compression is performed.
            When receiving data (either client or dispatch) this is the size of the message after decompression is performed.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.ErrorBehavior">
            <summary>
            Implements both IServiceBehavior and IEndpointBehavior which setup an
            IErrorHandler implementation for trapping and logging all exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ErrorBehavior.#ctor">
            <summary>
            Constructor called by the ErrorBehaviorExtensionElement to instantiate and 
            hook the error handler implementation into the channel stack.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ErrorBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Verifies that the required configuration parameters are supplied.
            </summary>
            <param name="description">Not used.</param>
            <param name="serviceHostBase">Not used.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ErrorBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Obligatory implementation for IServiceBehavior. Does nothing.
            </summary>
            <param name="description">Not used.</param>
            <param name="serviceHostBase">Not used.</param>
            <param name="endpoints">Not used.</param>
            <param name="parameters">Not used.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ErrorBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Adds the error handler to the dispatch channel stack's collection of error handlers.
            </summary>
            <param name="description">Not used.</param>
            <param name="serviceHostBase">Provides the collection of ChannelDispatchers.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ErrorBehavior.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Obligatory implementation for IServiceBehavior. Does nothing.
            </summary>
            <param name="endpoint">Not used.</param>
            <param name="bindingParameters">Not used.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ErrorBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Obligatory implementation for IEndpointBehavior. Throws NotSupportedException in all cases
            because the error behavior only makes sense as a server-side behavior.
            </summary>
            <param name="endpoint">Not used.</param>
            <param name="clientRuntime">Not used.</param>
            <exception cref="T:System.NotSupportedException">Thrown whenever invoked.</exception>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ErrorBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            Hooks the error handler implementation into the channel stack for the designated endpoint.
            </summary>
            <param name="endpoint">Not used.</param>
            <param name="endpointDispatcher">Provides access to the ErrorHandlers collection for the endpoint.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ErrorBehavior.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Verifies that the required configuration parameters are supplied.
            </summary>
            <param name="endpoint">Not used.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ErrorBehavior.RegisterErrorHandlerCallback(System.String,System.String)">
            <summary>
            Utility method that will hook up the specified method to callback.
            </summary>
            <param name="ErrorHandlerTypeName">>Fully qualified type name of the class and assembly providing the handler</param>
            <param name="ErrorHandlerMethodName">Name of the method that serves as the event handler.</param>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ErrorBehavior.ServiceErrorHandler">
            <summary>
            Gets the ServiceErrorHandler instance that implements the IErrorHandler interface.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ErrorBehavior.OnHandleError">
            <summary>
            Applications should register their handlers to custom handle the exceptions
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.ErrorBehaviorExtensionElement">
            <summary>
            This class enable the WCF runtime to hook into the ErrorBehavior functionality
            by way of the app.config file.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ErrorBehaviorExtensionElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ErrorBehaviorExtensionElement.CreateBehavior">
            <summary>
            Required implementation of the abstract member which returns an instance of the 
            behavior object that will provide the error behavior functionality.
            </summary>
            <returns>An instance of the <see cref="T:Microsoft.IT.ServiceModel.ErrorBehavior"/> class.</returns>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ErrorBehaviorExtensionElement.BehaviorType">
            <summary>
            Returns the type name of the class that provides the error behavior functionality - 
            i.e. typeof(<see cref="T:Microsoft.IT.ServiceModel.ErrorBehavior"/>).
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ErrorBehaviorExtensionElement.ExceptionConverters">
            <summary>
            Gets the collection of exception converter objects declared in the config file.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ErrorBehaviorExtensionElement.LoggingExclusions">
            <summary>
            Gets the collection of logging exclusion exception objects declared in the config file.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ErrorBehaviorExtensionElement.ErrorHandlerTypeName">
            <summary>
            Gets and sets the value of errorHandlerTypeName attribute in the config file.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ErrorBehaviorExtensionElement.ErrorHandlerMethodName">
            <summary>
            Gets and sets the value of errorHandlerMethodName attribute in the config file.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.ErrorHandlerEventArgs">
            <summary>
            Derived from <see cref="T:System.EventArgs"/> this class is passed as an argument to the <see cref="P:Microsoft.IT.ServiceModel.ErrorBehavior.OnHandleError"/>
            event handler to allow applications to custom handle the processing of Exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ErrorHandlerEventArgs.#ctor(System.Exception,System.Boolean,System.Boolean)">
            <summary>
            Constructor to initialize the ErrorHandler event args
            </summary>
            <param name="trappedException">The Exception that is caught by the Behavior</param>
            <param name="isExcluded"> Indicates whether the exception is excluded by the logging exclusions</param>
            <param name="cancelErrorHandling">Indicates whether to stop further processing of the exception by the behavior</param>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ErrorHandlerEventArgs.TrappedException">
            <summary>
            The Exception that is caught by the Behavior
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ErrorHandlerEventArgs.IsExcluded">
            <summary>
            Indicates whether the exception is excluded by the logging exclusions
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ErrorHandlerEventArgs.Cancel">
            <summary>
            Set the Cancel property to true to stop further processing of the exception by the behavior.
            By Default it is set to false.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ErrorHandlerEventArgs.MonitoringInfo">
            <summary>
            Information relevant to the logging and subsequent monitoring of the exception event.  Modify
            any of the values in this instance and they will be used in the infrastructure LogEvent statement
            as long as the <see cref="P:Microsoft.IT.ServiceModel.ErrorHandlerEventArgs.Cancel"/> property is false.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.ServiceErrorHandler">
            <summary>
            Error handler that traps all server-side exceptions, logs them to the EventLog and returns
            a generic Fault to the client.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ServiceErrorHandler.#ctor">
            <summary>
            The platform class that implements <see cref="T:System.ServiceModel.Dispatcher.IErrorHandler"/> providing
            exception to fault conversion and automatic logging for web services.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ServiceErrorHandler.#ctor(Microsoft.IT.ServiceModel.ErrorBehavior)">
            <summary>
            The platform class that implements <see cref="T:System.ServiceModel.Dispatcher.IErrorHandler"/> providing
            exception to fault conversion and automatic logging for web services.
            </summary>
            <param name="errorBehaviorRef">
            A reference to the channel stack behavior that manages the calls to the IErrorHandler implementation.
            </param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ServiceErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
            <summary>
            Provide a fault for return to the client. This ensures no sensitive data goes to the client.
            </summary>
            <param name="error">Exception getting handled.</param>
            <param name="version">Message version.</param>
            <param name="fault">Fault that is returned to the client.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.ServiceErrorHandler.HandleError(System.Exception)">
            <summary>
            HandleError. Log an error, then allow the error to be handled as usual.
            Return true if the error is considered as already handled
            </summary>
            <param name="error">The exception to be logged.</param>
            <returns>True indicating the processing of the error is complete.</returns>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ServiceErrorHandler.ExceptionConverters">
            <summary>
            A collection of <see cref="T:Microsoft.IT.ServiceModel.IExceptionToFaultConverter"/> objects
            that are used to convert external or third party exceptions to faults.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.ServiceErrorHandler.LoggingExclusions">
            <summary>
            A collection of exception types that are should not generate log information.
            These typically represent business rule errors that would only be 
            noise to a production support person.
            </summary>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.TypeNameCollection">
            <summary>
            Represents a collection of ExceptionMapping type objects.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TypeNameCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TypeNameCollection.CreateNewElement">
            <summary>
            Constructs and returns a <see cref="T:Microsoft.IT.ServiceModel.TypeNameElement"/> object.
            </summary>
            <returns>A <see cref="T:Microsoft.IT.ServiceModel.TypeNameElement"/> object.</returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TypeNameCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the 'TypeName' property from the passed in element.
            </summary>
            <param name="element">Element from which to determine the key.</param>
            <returns>The string from the the 'TypeName' property from the passed in element.</returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TypeNameCollection.IndexOf(Microsoft.IT.ServiceModel.TypeNameElement)">
            <summary>
            Locates and returns the numeric offset into the collection of 
            the passed in element.
            </summary>
            <param name="exceptionMapping">Object instance to be located.</param>
            <returns>The numeric offset into the collection of the passed in element.</returns>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TypeNameCollection.Add(Microsoft.IT.ServiceModel.TypeNameElement)">
            <summary>
            Adds and element to the collection.
            </summary>
            <param name="exceptionMapping">Element to be added.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TypeNameCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Safe method to add and element to the collection.  No exception is
            thrown if the element already exists.
            </summary>
            <param name="element">Element to be added.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TypeNameCollection.Remove(Microsoft.IT.ServiceModel.TypeNameElement)">
            <summary>
            Removes an element from the collection.
            </summary>
            <param name="exceptionMapping">Element to be removed.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TypeNameCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified index.
            </summary>
            <param name="index">Numeric index of the element to be removed.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TypeNameCollection.Remove(System.String)">
            <summary>
            Removes and element of the specified name.
            </summary>
            <param name="name">Name of the element to be removed.</param>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TypeNameCollection.Clear">
            <summary>
            Clears the entire collection.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.TypeNameCollection.CollectionType">
            <summary>
            Gets the ConfigurationElementCollectionType this collection represents. 
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.TypeNameCollection.Item(System.Int32)">
            <summary>
            Class indexer gets and set the specified element from the collection
            via a numeric index.
            </summary>
            <param name="index">Index into the collection.</param>
            <returns>Element to be set or retrieved.</returns>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.TypeNameCollection.Item(System.String)">
            <summary>
            Class indexer gets and set the specified element from the collection
            via name.
            </summary>
            <param name="name">Index into the collection.</param>
            <returns>Element to be set or retrieved.</returns>
        </member>
        <member name="T:Microsoft.IT.ServiceModel.TypeNameElement">
            <summary>
            Represents the 'exception' element type in the config file.
            </summary>
        </member>
        <member name="M:Microsoft.IT.ServiceModel.TypeNameElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.IT.ServiceModel.TypeNameElement.TypeName">
            <summary>
            Gets and sets the typeName property from the attribute in the config file.
            </summary>
        </member>
    </members>
</doc>
